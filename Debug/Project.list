
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068a8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08006a58  08006a58  00007a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d20  08006d20  00008074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006d20  08006d20  00007d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d28  08006d28  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d28  08006d28  00007d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d2c  08006d2c  00007d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08006d30  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008074  2**0
                  CONTENTS
 10 .bss          00000354  20000074  20000074  00008074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003c8  200003c8  00008074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d7f3  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000239c  00000000  00000000  00015897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c38  00000000  00000000  00017c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000957  00000000  00000000  00018870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000248dd  00000000  00000000  000191c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001115e  00000000  00000000  0003daa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d51c1  00000000  00000000  0004ec02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00123dc3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003640  00000000  00000000  00123e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  00127448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006a40 	.word	0x08006a40

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08006a40 	.word	0x08006a40

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 80005cc:	b40f      	push	{r0, r1, r2, r3}
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b082      	sub	sp, #8
 80005d2:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	693a      	ldr	r2, [r7, #16]
 80005de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005e2:	480b      	ldr	r0, [pc, #44]	@ (8000610 <myprintf+0x44>)
 80005e4:	f005 fda0 	bl	8006128 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80005e8:	4809      	ldr	r0, [pc, #36]	@ (8000610 <myprintf+0x44>)
 80005ea:	f7ff fe01 	bl	80001f0 <strlen>
 80005ee:	4603      	mov	r3, r0
 80005f0:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, len, -1);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	4905      	ldr	r1, [pc, #20]	@ (8000610 <myprintf+0x44>)
 80005fc:	4805      	ldr	r0, [pc, #20]	@ (8000614 <myprintf+0x48>)
 80005fe:	f002 f873 	bl	80026e8 <HAL_UART_Transmit>

}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800060c:	b004      	add	sp, #16
 800060e:	4770      	bx	lr
 8000610:	20000130 	.word	0x20000130
 8000614:	200000e8 	.word	0x200000e8

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b5b0      	push	{r4, r5, r7, lr}
 800061a:	f5ad 6d94 	sub.w	sp, sp, #1184	@ 0x4a0
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fb96 	bl	8000d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f912 	bl	800084c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f9e0 	bl	80009ec <MX_GPIO_Init>
  MX_SPI1_Init();
 800062c:	f000 f97e 	bl	800092c <MX_SPI1_Init>
  MX_FATFS_Init();
 8000630:	f002 fc16 	bl	8002e60 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8000634:	f000 f9b0 	bl	8000998 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 8000638:	4875      	ldr	r0, [pc, #468]	@ (8000810 <main+0x1f8>)
 800063a:	f7ff ffc7 	bl	80005cc <myprintf>

    HAL_Delay(1000);
 800063e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000642:	f000 fbf7 	bl	8000e34 <HAL_Delay>
      FATFS FatFs; 	//Fatfs handle
      FIL fil; 		//File handle
      FRESULT fres; //Result after operations

      //Open the file system
      fres = f_mount(&FatFs, "", 1); //1=mount now
 8000646:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800064a:	2201      	movs	r2, #1
 800064c:	4971      	ldr	r1, [pc, #452]	@ (8000814 <main+0x1fc>)
 800064e:	4618      	mov	r0, r3
 8000650:	f004 fe90 	bl	8005374 <f_mount>
 8000654:	4603      	mov	r3, r0
 8000656:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
      while (fres != FR_OK) {
 800065a:	e009      	b.n	8000670 <main+0x58>
    	myprintf("f_mount error (%i)\r\n", fres);
 800065c:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 8000660:	4619      	mov	r1, r3
 8000662:	486d      	ldr	r0, [pc, #436]	@ (8000818 <main+0x200>)
 8000664:	f7ff ffb2 	bl	80005cc <myprintf>
    	HAL_Delay(500);
 8000668:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800066c:	f000 fbe2 	bl	8000e34 <HAL_Delay>
      while (fres != FR_OK) {
 8000670:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 8000674:	2b00      	cmp	r3, #0
 8000676:	d1f1      	bne.n	800065c <main+0x44>
      //Let's get some statistics from the SD card
      DWORD free_clusters, free_sectors, total_sectors;

      FATFS* getFreeFs;

      fres = f_getfree("", &free_clusters, &getFreeFs);
 8000678:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800067c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000680:	4619      	mov	r1, r3
 8000682:	4864      	ldr	r0, [pc, #400]	@ (8000814 <main+0x1fc>)
 8000684:	f005 fbd2 	bl	8005e2c <f_getfree>
 8000688:	4603      	mov	r3, r0
 800068a:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
      while (fres != FR_OK) {
 800068e:	e009      	b.n	80006a4 <main+0x8c>
    	myprintf("f_getfree error (%i)\r\n", fres);
 8000690:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 8000694:	4619      	mov	r1, r3
 8000696:	4861      	ldr	r0, [pc, #388]	@ (800081c <main+0x204>)
 8000698:	f7ff ff98 	bl	80005cc <myprintf>
    	HAL_Delay(1000);
 800069c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006a0:	f000 fbc8 	bl	8000e34 <HAL_Delay>
      while (fres != FR_OK) {
 80006a4:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d1f1      	bne.n	8000690 <main+0x78>
      }

      //Formula comes from ChaN's documentation
      total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80006ac:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80006b0:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	3b02      	subs	r3, #2
 80006ba:	f507 6294 	add.w	r2, r7, #1184	@ 0x4a0
 80006be:	f5a2 628f 	sub.w	r2, r2, #1144	@ 0x478
 80006c2:	6812      	ldr	r2, [r2, #0]
 80006c4:	8952      	ldrh	r2, [r2, #10]
 80006c6:	fb02 f303 	mul.w	r3, r2, r3
 80006ca:	f8c7 3498 	str.w	r3, [r7, #1176]	@ 0x498
      free_sectors = free_clusters * getFreeFs->csize;
 80006ce:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80006d2:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	895b      	ldrh	r3, [r3, #10]
 80006da:	461a      	mov	r2, r3
 80006dc:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80006e0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	fb02 f303 	mul.w	r3, r2, r3
 80006ea:	f8c7 3494 	str.w	r3, [r7, #1172]	@ 0x494

      myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 80006ee:	f8d7 3498 	ldr.w	r3, [r7, #1176]	@ 0x498
 80006f2:	0859      	lsrs	r1, r3, #1
 80006f4:	f8d7 3494 	ldr.w	r3, [r7, #1172]	@ 0x494
 80006f8:	085b      	lsrs	r3, r3, #1
 80006fa:	461a      	mov	r2, r3
 80006fc:	4848      	ldr	r0, [pc, #288]	@ (8000820 <main+0x208>)
 80006fe:	f7ff ff65 	bl	80005cc <myprintf>

      //Now let's try to open file "test.txt"
      fres = f_open(&fil, "test.txt", FA_READ);
 8000702:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000706:	2201      	movs	r2, #1
 8000708:	4946      	ldr	r1, [pc, #280]	@ (8000824 <main+0x20c>)
 800070a:	4618      	mov	r0, r3
 800070c:	f004 fe78 	bl	8005400 <f_open>
 8000710:	4603      	mov	r3, r0
 8000712:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
      while (fres != FR_OK) {
 8000716:	e006      	b.n	8000726 <main+0x10e>
    	myprintf("f_open error (%i)\r\n");
 8000718:	4843      	ldr	r0, [pc, #268]	@ (8000828 <main+0x210>)
 800071a:	f7ff ff57 	bl	80005cc <myprintf>
    	HAL_Delay(1000);
 800071e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000722:	f000 fb87 	bl	8000e34 <HAL_Delay>
      while (fres != FR_OK) {
 8000726:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1f4      	bne.n	8000718 <main+0x100>
      }
      myprintf("I was able to open 'test.txt' for reading!\r\n");
 800072e:	483f      	ldr	r0, [pc, #252]	@ (800082c <main+0x214>)
 8000730:	f7ff ff4c 	bl	80005cc <myprintf>
      //Read 30 bytes from "test.txt" on the SD card
      BYTE readBuf[30];

      //We can either use f_read OR f_gets to get data out of files
      //f_gets is a wrapper on f_read that does some string formatting for us
      TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8000734:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	211e      	movs	r1, #30
 800073e:	4618      	mov	r0, r3
 8000740:	f005 fc29 	bl	8005f96 <f_gets>
 8000744:	f8c7 0490 	str.w	r0, [r7, #1168]	@ 0x490
      if(rres != 0) {
 8000748:	f8d7 3490 	ldr.w	r3, [r7, #1168]	@ 0x490
 800074c:	2b00      	cmp	r3, #0
 800074e:	d006      	beq.n	800075e <main+0x146>
    	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	4619      	mov	r1, r3
 8000756:	4836      	ldr	r0, [pc, #216]	@ (8000830 <main+0x218>)
 8000758:	f7ff ff38 	bl	80005cc <myprintf>
 800075c:	e005      	b.n	800076a <main+0x152>
      } else {
    	myprintf("f_gets error (%i)\r\n", fres);
 800075e:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 8000762:	4619      	mov	r1, r3
 8000764:	4833      	ldr	r0, [pc, #204]	@ (8000834 <main+0x21c>)
 8000766:	f7ff ff31 	bl	80005cc <myprintf>
      }

      //Be a tidy kiwi - don't forget to close your file!
      f_close(&fil);
 800076a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800076e:	4618      	mov	r0, r3
 8000770:	f005 fb32 	bl	8005dd8 <f_close>

      //Now let's try and write a file "write.txt"
      fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000774:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000778:	221a      	movs	r2, #26
 800077a:	492f      	ldr	r1, [pc, #188]	@ (8000838 <main+0x220>)
 800077c:	4618      	mov	r0, r3
 800077e:	f004 fe3f 	bl	8005400 <f_open>
 8000782:	4603      	mov	r3, r0
 8000784:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
      if(fres == FR_OK) {
 8000788:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 800078c:	2b00      	cmp	r3, #0
 800078e:	d103      	bne.n	8000798 <main+0x180>
    	myprintf("I was able to open 'write.txt' for writing\r\n");
 8000790:	482a      	ldr	r0, [pc, #168]	@ (800083c <main+0x224>)
 8000792:	f7ff ff1b 	bl	80005cc <myprintf>
 8000796:	e005      	b.n	80007a4 <main+0x18c>
      } else {
    	myprintf("f_open error (%i)\r\n", fres);
 8000798:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 800079c:	4619      	mov	r1, r3
 800079e:	4822      	ldr	r0, [pc, #136]	@ (8000828 <main+0x210>)
 80007a0:	f7ff ff14 	bl	80005cc <myprintf>
      }

      //Copy in a string
      strncpy((char*)readBuf, "a new file is made!", 19);
 80007a4:	f107 0308 	add.w	r3, r7, #8
 80007a8:	4a25      	ldr	r2, [pc, #148]	@ (8000840 <main+0x228>)
 80007aa:	461c      	mov	r4, r3
 80007ac:	4615      	mov	r5, r2
 80007ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b2:	682b      	ldr	r3, [r5, #0]
 80007b4:	461a      	mov	r2, r3
 80007b6:	8022      	strh	r2, [r4, #0]
 80007b8:	3402      	adds	r4, #2
 80007ba:	0c1b      	lsrs	r3, r3, #16
 80007bc:	7023      	strb	r3, [r4, #0]
      UINT bytesWrote;
      fres = f_write(&fil, readBuf, 19, &bytesWrote);
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	f107 0108 	add.w	r1, r7, #8
 80007c4:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80007c8:	2213      	movs	r2, #19
 80007ca:	f005 f912 	bl	80059f2 <f_write>
 80007ce:	4603      	mov	r3, r0
 80007d0:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
      if(fres == FR_OK) {
 80007d4:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d109      	bne.n	80007f0 <main+0x1d8>
    	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 80007dc:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80007e0:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4619      	mov	r1, r3
 80007e8:	4816      	ldr	r0, [pc, #88]	@ (8000844 <main+0x22c>)
 80007ea:	f7ff feef 	bl	80005cc <myprintf>
 80007ee:	e002      	b.n	80007f6 <main+0x1de>
      } else {
    	myprintf("f_write error (%i)\r\n");
 80007f0:	4815      	ldr	r0, [pc, #84]	@ (8000848 <main+0x230>)
 80007f2:	f7ff feeb 	bl	80005cc <myprintf>
      }

      //Be a tidy kiwi - don't forget to close your file!
      f_close(&fil);
 80007f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007fa:	4618      	mov	r0, r3
 80007fc:	f005 faec 	bl	8005dd8 <f_close>

      //We're done, so de-mount the drive
      f_mount(NULL, "", 0);
 8000800:	2200      	movs	r2, #0
 8000802:	4904      	ldr	r1, [pc, #16]	@ (8000814 <main+0x1fc>)
 8000804:	2000      	movs	r0, #0
 8000806:	f004 fdb5 	bl	8005374 <f_mount>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800080a:	bf00      	nop
 800080c:	e7fd      	b.n	800080a <main+0x1f2>
 800080e:	bf00      	nop
 8000810:	08006a58 	.word	0x08006a58
 8000814:	08006a78 	.word	0x08006a78
 8000818:	08006a7c 	.word	0x08006a7c
 800081c:	08006a94 	.word	0x08006a94
 8000820:	08006aac 	.word	0x08006aac
 8000824:	08006af4 	.word	0x08006af4
 8000828:	08006b00 	.word	0x08006b00
 800082c:	08006b14 	.word	0x08006b14
 8000830:	08006b44 	.word	0x08006b44
 8000834:	08006b70 	.word	0x08006b70
 8000838:	08006b84 	.word	0x08006b84
 800083c:	08006b90 	.word	0x08006b90
 8000840:	08006bc0 	.word	0x08006bc0
 8000844:	08006bd4 	.word	0x08006bd4
 8000848:	08006bf8 	.word	0x08006bf8

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b094      	sub	sp, #80	@ 0x50
 8000850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	f107 0320 	add.w	r3, r7, #32
 8000856:	2230      	movs	r2, #48	@ 0x30
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f005 fc72 	bl	8006144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	4b2b      	ldr	r3, [pc, #172]	@ (8000924 <SystemClock_Config+0xd8>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000878:	4a2a      	ldr	r2, [pc, #168]	@ (8000924 <SystemClock_Config+0xd8>)
 800087a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800087e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000880:	4b28      	ldr	r3, [pc, #160]	@ (8000924 <SystemClock_Config+0xd8>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	4b25      	ldr	r3, [pc, #148]	@ (8000928 <SystemClock_Config+0xdc>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a24      	ldr	r2, [pc, #144]	@ (8000928 <SystemClock_Config+0xdc>)
 8000896:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800089a:	6013      	str	r3, [r2, #0]
 800089c:	4b22      	ldr	r3, [pc, #136]	@ (8000928 <SystemClock_Config+0xdc>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a8:	2301      	movs	r3, #1
 80008aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b2:	2302      	movs	r3, #2
 80008b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008bc:	2304      	movs	r3, #4
 80008be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80008c0:	23b4      	movs	r3, #180	@ 0xb4
 80008c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c8:	2304      	movs	r3, #4
 80008ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008cc:	f107 0320 	add.w	r3, r7, #32
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 fdcf 	bl	8001474 <HAL_RCC_OscConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008dc:	f000 f8d8 	bl	8000a90 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008e0:	f000 fd78 	bl	80013d4 <HAL_PWREx_EnableOverDrive>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80008ea:	f000 f8d1 	bl	8000a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ee:	230f      	movs	r3, #15
 80008f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f2:	2302      	movs	r3, #2
 80008f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000900:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000904:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	2105      	movs	r1, #5
 800090c:	4618      	mov	r0, r3
 800090e:	f001 f829 	bl	8001964 <HAL_RCC_ClockConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000918:	f000 f8ba 	bl	8000a90 <Error_Handler>
  }
}
 800091c:	bf00      	nop
 800091e:	3750      	adds	r7, #80	@ 0x50
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	40007000 	.word	0x40007000

0800092c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000930:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <MX_SPI1_Init+0x64>)
 8000932:	4a18      	ldr	r2, [pc, #96]	@ (8000994 <MX_SPI1_Init+0x68>)
 8000934:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000936:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <MX_SPI1_Init+0x64>)
 8000938:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800093c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800093e:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_SPI1_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000944:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <MX_SPI1_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800094a:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <MX_SPI1_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000950:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_SPI1_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000956:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <MX_SPI1_Init+0x64>)
 8000958:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800095c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_SPI1_Init+0x64>)
 8000960:	2230      	movs	r2, #48	@ 0x30
 8000962:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000964:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <MX_SPI1_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_SPI1_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000970:	4b07      	ldr	r3, [pc, #28]	@ (8000990 <MX_SPI1_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <MX_SPI1_Init+0x64>)
 8000978:	220a      	movs	r2, #10
 800097a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	@ (8000990 <MX_SPI1_Init+0x64>)
 800097e:	f001 fa11 	bl	8001da4 <HAL_SPI_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000988:	f000 f882 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000090 	.word	0x20000090
 8000994:	40013000 	.word	0x40013000

08000998 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800099c:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <MX_USART1_UART_Init+0x4c>)
 800099e:	4a12      	ldr	r2, [pc, #72]	@ (80009e8 <MX_USART1_UART_Init+0x50>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009a2:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	@ (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009d0:	f001 fe3a 	bl	8002648 <HAL_UART_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009da:	f000 f859 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200000e8 	.word	0x200000e8
 80009e8:	40011000 	.word	0x40011000

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 030c 	add.w	r3, r7, #12
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	4b20      	ldr	r3, [pc, #128]	@ (8000a88 <MX_GPIO_Init+0x9c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	4a1f      	ldr	r2, [pc, #124]	@ (8000a88 <MX_GPIO_Init+0x9c>)
 8000a0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a12:	4b1d      	ldr	r3, [pc, #116]	@ (8000a88 <MX_GPIO_Init+0x9c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <MX_GPIO_Init+0x9c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a18      	ldr	r2, [pc, #96]	@ (8000a88 <MX_GPIO_Init+0x9c>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2e:	4b16      	ldr	r3, [pc, #88]	@ (8000a88 <MX_GPIO_Init+0x9c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <MX_GPIO_Init+0x9c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	4a11      	ldr	r2, [pc, #68]	@ (8000a88 <MX_GPIO_Init+0x9c>)
 8000a44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <MX_GPIO_Init+0x9c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a5c:	480b      	ldr	r0, [pc, #44]	@ (8000a8c <MX_GPIO_Init+0xa0>)
 8000a5e:	f000 fc9f 	bl	80013a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000a62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4804      	ldr	r0, [pc, #16]	@ (8000a8c <MX_GPIO_Init+0xa0>)
 8000a7c:	f000 fae4 	bl	8001048 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a80:	bf00      	nop
 8000a82:	3720      	adds	r7, #32
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40021800 	.word	0x40021800

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <Error_Handler+0x8>

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <HAL_MspInit+0x4c>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aaa:	4a0f      	ldr	r2, [pc, #60]	@ (8000ae8 <HAL_MspInit+0x4c>)
 8000aac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae8 <HAL_MspInit+0x4c>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <HAL_MspInit+0x4c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac6:	4a08      	ldr	r2, [pc, #32]	@ (8000ae8 <HAL_MspInit+0x4c>)
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ace:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <HAL_MspInit+0x4c>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800

08000aec <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	@ 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a19      	ldr	r2, [pc, #100]	@ (8000b70 <HAL_SPI_MspInit+0x84>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d12b      	bne.n	8000b66 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	4b18      	ldr	r3, [pc, #96]	@ (8000b74 <HAL_SPI_MspInit+0x88>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b16:	4a17      	ldr	r2, [pc, #92]	@ (8000b74 <HAL_SPI_MspInit+0x88>)
 8000b18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b1e:	4b15      	ldr	r3, [pc, #84]	@ (8000b74 <HAL_SPI_MspInit+0x88>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <HAL_SPI_MspInit+0x88>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a10      	ldr	r2, [pc, #64]	@ (8000b74 <HAL_SPI_MspInit+0x88>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <HAL_SPI_MspInit+0x88>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b46:	23e0      	movs	r3, #224	@ 0xe0
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b56:	2305      	movs	r3, #5
 8000b58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <HAL_SPI_MspInit+0x8c>)
 8000b62:	f000 fa71 	bl	8001048 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b66:	bf00      	nop
 8000b68:	3728      	adds	r7, #40	@ 0x28
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40013000 	.word	0x40013000
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020000 	.word	0x40020000

08000b7c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	@ 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a19      	ldr	r2, [pc, #100]	@ (8000c00 <HAL_UART_MspInit+0x84>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d12c      	bne.n	8000bf8 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b18      	ldr	r3, [pc, #96]	@ (8000c04 <HAL_UART_MspInit+0x88>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba6:	4a17      	ldr	r2, [pc, #92]	@ (8000c04 <HAL_UART_MspInit+0x88>)
 8000ba8:	f043 0310 	orr.w	r3, r3, #16
 8000bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bae:	4b15      	ldr	r3, [pc, #84]	@ (8000c04 <HAL_UART_MspInit+0x88>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb2:	f003 0310 	and.w	r3, r3, #16
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <HAL_UART_MspInit+0x88>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	4a10      	ldr	r2, [pc, #64]	@ (8000c04 <HAL_UART_MspInit+0x88>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bca:	4b0e      	ldr	r3, [pc, #56]	@ (8000c04 <HAL_UART_MspInit+0x88>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bd6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be4:	2303      	movs	r3, #3
 8000be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000be8:	2307      	movs	r3, #7
 8000bea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4805      	ldr	r0, [pc, #20]	@ (8000c08 <HAL_UART_MspInit+0x8c>)
 8000bf4:	f000 fa28 	bl	8001048 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000bf8:	bf00      	nop
 8000bfa:	3728      	adds	r7, #40	@ 0x28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40011000 	.word	0x40011000
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020000 	.word	0x40020000

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <NMI_Handler+0x4>

08000c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <MemManage_Handler+0x4>

08000c24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c62:	f000 f8c7 	bl	8000df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c74:	4a14      	ldr	r2, [pc, #80]	@ (8000cc8 <_sbrk+0x5c>)
 8000c76:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <_sbrk+0x60>)
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c80:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c88:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <_sbrk+0x64>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	@ (8000cd4 <_sbrk+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8e:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d207      	bcs.n	8000cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c9c:	f005 fa5a 	bl	8006154 <__errno>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	e009      	b.n	8000cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cac:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a05      	ldr	r2, [pc, #20]	@ (8000cd0 <_sbrk+0x64>)
 8000cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20030000 	.word	0x20030000
 8000ccc:	00000400 	.word	0x00000400
 8000cd0:	20000230 	.word	0x20000230
 8000cd4:	200003c8 	.word	0x200003c8

08000cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <SystemInit+0x20>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ce2:	4a05      	ldr	r2, [pc, #20]	@ (8000cf8 <SystemInit+0x20>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000cfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d00:	f7ff ffea 	bl	8000cd8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d04:	480c      	ldr	r0, [pc, #48]	@ (8000d38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d06:	490d      	ldr	r1, [pc, #52]	@ (8000d3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d08:	4a0d      	ldr	r2, [pc, #52]	@ (8000d40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d0c:	e002      	b.n	8000d14 <LoopCopyDataInit>

08000d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d12:	3304      	adds	r3, #4

08000d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d18:	d3f9      	bcc.n	8000d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d20:	e001      	b.n	8000d26 <LoopFillZerobss>

08000d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d24:	3204      	adds	r2, #4

08000d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d28:	d3fb      	bcc.n	8000d22 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d2a:	f005 fa19 	bl	8006160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d2e:	f7ff fc73 	bl	8000618 <main>
  bx  lr    
 8000d32:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d34:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d3c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d40:	08006d30 	.word	0x08006d30
  ldr r2, =_sbss
 8000d44:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d48:	200003c8 	.word	0x200003c8

08000d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC_IRQHandler>
	...

08000d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d54:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0d      	ldr	r2, [pc, #52]	@ (8000d90 <HAL_Init+0x40>)
 8000d5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d60:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <HAL_Init+0x40>)
 8000d66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d6c:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a07      	ldr	r2, [pc, #28]	@ (8000d90 <HAL_Init+0x40>)
 8000d72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f000 f931 	bl	8000fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7e:	200f      	movs	r0, #15
 8000d80:	f000 f808 	bl	8000d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d84:	f7ff fe8a 	bl	8000a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023c00 	.word	0x40023c00

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d9c:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <HAL_InitTick+0x54>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b12      	ldr	r3, [pc, #72]	@ (8000dec <HAL_InitTick+0x58>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 f93b 	bl	800102e <HAL_SYSTICK_Config>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00e      	b.n	8000de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d80a      	bhi.n	8000dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f000 f911 	bl	8000ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd4:	4a06      	ldr	r2, [pc, #24]	@ (8000df0 <HAL_InitTick+0x5c>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e000      	b.n	8000de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000000 	.word	0x20000000
 8000dec:	20000008 	.word	0x20000008
 8000df0:	20000004 	.word	0x20000004

08000df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <HAL_IncTick+0x20>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <HAL_IncTick+0x24>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	4a04      	ldr	r2, [pc, #16]	@ (8000e18 <HAL_IncTick+0x24>)
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000008 	.word	0x20000008
 8000e18:	20000234 	.word	0x20000234

08000e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e20:	4b03      	ldr	r3, [pc, #12]	@ (8000e30 <HAL_GetTick+0x14>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000234 	.word	0x20000234

08000e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e3c:	f7ff ffee 	bl	8000e1c <HAL_GetTick>
 8000e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e4c:	d005      	beq.n	8000e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <HAL_Delay+0x44>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4413      	add	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e5a:	bf00      	nop
 8000e5c:	f7ff ffde 	bl	8000e1c <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d8f7      	bhi.n	8000e5c <HAL_Delay+0x28>
  {
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000008 	.word	0x20000008

08000e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eae:	4a04      	ldr	r2, [pc, #16]	@ (8000ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	60d3      	str	r3, [r2, #12]
}
 8000eb4:	bf00      	nop
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec8:	4b04      	ldr	r3, [pc, #16]	@ (8000edc <__NVIC_GetPriorityGrouping+0x18>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	0a1b      	lsrs	r3, r3, #8
 8000ece:	f003 0307 	and.w	r3, r3, #7
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	db0a      	blt.n	8000f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	490c      	ldr	r1, [pc, #48]	@ (8000f2c <__NVIC_SetPriority+0x4c>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	0112      	lsls	r2, r2, #4
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	440b      	add	r3, r1
 8000f04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f08:	e00a      	b.n	8000f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4908      	ldr	r1, [pc, #32]	@ (8000f30 <__NVIC_SetPriority+0x50>)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	3b04      	subs	r3, #4
 8000f18:	0112      	lsls	r2, r2, #4
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	761a      	strb	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000e100 	.word	0xe000e100
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	@ 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f1c3 0307 	rsb	r3, r3, #7
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	bf28      	it	cs
 8000f52:	2304      	movcs	r3, #4
 8000f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d902      	bls.n	8000f64 <NVIC_EncodePriority+0x30>
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3b03      	subs	r3, #3
 8000f62:	e000      	b.n	8000f66 <NVIC_EncodePriority+0x32>
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43da      	mvns	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	43d9      	mvns	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	4313      	orrs	r3, r2
         );
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3724      	adds	r7, #36	@ 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fac:	d301      	bcc.n	8000fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00f      	b.n	8000fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <SysTick_Config+0x40>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fba:	210f      	movs	r1, #15
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f7ff ff8e 	bl	8000ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc4:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <SysTick_Config+0x40>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fca:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <SysTick_Config+0x40>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff47 	bl	8000e7c <__NVIC_SetPriorityGrouping>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
 8001002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001008:	f7ff ff5c 	bl	8000ec4 <__NVIC_GetPriorityGrouping>
 800100c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	6978      	ldr	r0, [r7, #20]
 8001014:	f7ff ff8e 	bl	8000f34 <NVIC_EncodePriority>
 8001018:	4602      	mov	r2, r0
 800101a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff5d 	bl	8000ee0 <__NVIC_SetPriority>
}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ffb0 	bl	8000f9c <SysTick_Config>
 800103c:	4603      	mov	r3, r0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	@ 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	e177      	b.n	8001354 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001064:	2201      	movs	r2, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	429a      	cmp	r2, r3
 800107e:	f040 8166 	bne.w	800134e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	2b01      	cmp	r3, #1
 800108c:	d005      	beq.n	800109a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001096:	2b02      	cmp	r3, #2
 8001098:	d130      	bne.n	80010fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	2203      	movs	r2, #3
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	68da      	ldr	r2, [r3, #12]
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d0:	2201      	movs	r2, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	091b      	lsrs	r3, r3, #4
 80010e6:	f003 0201 	and.w	r2, r3, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	2b03      	cmp	r3, #3
 8001106:	d017      	beq.n	8001138 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d123      	bne.n	800118c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	08da      	lsrs	r2, r3, #3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3208      	adds	r2, #8
 800114c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	220f      	movs	r2, #15
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3208      	adds	r2, #8
 8001186:	69b9      	ldr	r1, [r7, #24]
 8001188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0203 	and.w	r2, r3, #3
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80c0 	beq.w	800134e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b66      	ldr	r3, [pc, #408]	@ (800136c <HAL_GPIO_Init+0x324>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d6:	4a65      	ldr	r2, [pc, #404]	@ (800136c <HAL_GPIO_Init+0x324>)
 80011d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011de:	4b63      	ldr	r3, [pc, #396]	@ (800136c <HAL_GPIO_Init+0x324>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ea:	4a61      	ldr	r2, [pc, #388]	@ (8001370 <HAL_GPIO_Init+0x328>)
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	089b      	lsrs	r3, r3, #2
 80011f0:	3302      	adds	r3, #2
 80011f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	220f      	movs	r2, #15
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a58      	ldr	r2, [pc, #352]	@ (8001374 <HAL_GPIO_Init+0x32c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d037      	beq.n	8001286 <HAL_GPIO_Init+0x23e>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a57      	ldr	r2, [pc, #348]	@ (8001378 <HAL_GPIO_Init+0x330>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d031      	beq.n	8001282 <HAL_GPIO_Init+0x23a>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a56      	ldr	r2, [pc, #344]	@ (800137c <HAL_GPIO_Init+0x334>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d02b      	beq.n	800127e <HAL_GPIO_Init+0x236>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a55      	ldr	r2, [pc, #340]	@ (8001380 <HAL_GPIO_Init+0x338>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d025      	beq.n	800127a <HAL_GPIO_Init+0x232>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a54      	ldr	r2, [pc, #336]	@ (8001384 <HAL_GPIO_Init+0x33c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d01f      	beq.n	8001276 <HAL_GPIO_Init+0x22e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a53      	ldr	r2, [pc, #332]	@ (8001388 <HAL_GPIO_Init+0x340>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d019      	beq.n	8001272 <HAL_GPIO_Init+0x22a>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a52      	ldr	r2, [pc, #328]	@ (800138c <HAL_GPIO_Init+0x344>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d013      	beq.n	800126e <HAL_GPIO_Init+0x226>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a51      	ldr	r2, [pc, #324]	@ (8001390 <HAL_GPIO_Init+0x348>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d00d      	beq.n	800126a <HAL_GPIO_Init+0x222>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a50      	ldr	r2, [pc, #320]	@ (8001394 <HAL_GPIO_Init+0x34c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d007      	beq.n	8001266 <HAL_GPIO_Init+0x21e>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4f      	ldr	r2, [pc, #316]	@ (8001398 <HAL_GPIO_Init+0x350>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d101      	bne.n	8001262 <HAL_GPIO_Init+0x21a>
 800125e:	2309      	movs	r3, #9
 8001260:	e012      	b.n	8001288 <HAL_GPIO_Init+0x240>
 8001262:	230a      	movs	r3, #10
 8001264:	e010      	b.n	8001288 <HAL_GPIO_Init+0x240>
 8001266:	2308      	movs	r3, #8
 8001268:	e00e      	b.n	8001288 <HAL_GPIO_Init+0x240>
 800126a:	2307      	movs	r3, #7
 800126c:	e00c      	b.n	8001288 <HAL_GPIO_Init+0x240>
 800126e:	2306      	movs	r3, #6
 8001270:	e00a      	b.n	8001288 <HAL_GPIO_Init+0x240>
 8001272:	2305      	movs	r3, #5
 8001274:	e008      	b.n	8001288 <HAL_GPIO_Init+0x240>
 8001276:	2304      	movs	r3, #4
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x240>
 800127a:	2303      	movs	r3, #3
 800127c:	e004      	b.n	8001288 <HAL_GPIO_Init+0x240>
 800127e:	2302      	movs	r3, #2
 8001280:	e002      	b.n	8001288 <HAL_GPIO_Init+0x240>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_GPIO_Init+0x240>
 8001286:	2300      	movs	r3, #0
 8001288:	69fa      	ldr	r2, [r7, #28]
 800128a:	f002 0203 	and.w	r2, r2, #3
 800128e:	0092      	lsls	r2, r2, #2
 8001290:	4093      	lsls	r3, r2
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001298:	4935      	ldr	r1, [pc, #212]	@ (8001370 <HAL_GPIO_Init+0x328>)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a6:	4b3d      	ldr	r3, [pc, #244]	@ (800139c <HAL_GPIO_Init+0x354>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ca:	4a34      	ldr	r2, [pc, #208]	@ (800139c <HAL_GPIO_Init+0x354>)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d0:	4b32      	ldr	r3, [pc, #200]	@ (800139c <HAL_GPIO_Init+0x354>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f4:	4a29      	ldr	r2, [pc, #164]	@ (800139c <HAL_GPIO_Init+0x354>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012fa:	4b28      	ldr	r3, [pc, #160]	@ (800139c <HAL_GPIO_Init+0x354>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800131e:	4a1f      	ldr	r2, [pc, #124]	@ (800139c <HAL_GPIO_Init+0x354>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001324:	4b1d      	ldr	r3, [pc, #116]	@ (800139c <HAL_GPIO_Init+0x354>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001348:	4a14      	ldr	r2, [pc, #80]	@ (800139c <HAL_GPIO_Init+0x354>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3301      	adds	r3, #1
 8001352:	61fb      	str	r3, [r7, #28]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	2b0f      	cmp	r3, #15
 8001358:	f67f ae84 	bls.w	8001064 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3724      	adds	r7, #36	@ 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800
 8001370:	40013800 	.word	0x40013800
 8001374:	40020000 	.word	0x40020000
 8001378:	40020400 	.word	0x40020400
 800137c:	40020800 	.word	0x40020800
 8001380:	40020c00 	.word	0x40020c00
 8001384:	40021000 	.word	0x40021000
 8001388:	40021400 	.word	0x40021400
 800138c:	40021800 	.word	0x40021800
 8001390:	40021c00 	.word	0x40021c00
 8001394:	40022000 	.word	0x40022000
 8001398:	40022400 	.word	0x40022400
 800139c:	40013c00 	.word	0x40013c00

080013a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
 80013ac:	4613      	mov	r3, r2
 80013ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013b0:	787b      	ldrb	r3, [r7, #1]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013b6:	887a      	ldrh	r2, [r7, #2]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013bc:	e003      	b.n	80013c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013be:	887b      	ldrh	r3, [r7, #2]
 80013c0:	041a      	lsls	r2, r3, #16
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	619a      	str	r2, [r3, #24]
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	4b20      	ldr	r3, [pc, #128]	@ (8001464 <HAL_PWREx_EnableOverDrive+0x90>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001464 <HAL_PWREx_EnableOverDrive+0x90>)
 80013e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001464 <HAL_PWREx_EnableOverDrive+0x90>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80013fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001468 <HAL_PWREx_EnableOverDrive+0x94>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001400:	f7ff fd0c 	bl	8000e1c <HAL_GetTick>
 8001404:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001406:	e009      	b.n	800141c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001408:	f7ff fd08 	bl	8000e1c <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001416:	d901      	bls.n	800141c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e01f      	b.n	800145c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800141c:	4b13      	ldr	r3, [pc, #76]	@ (800146c <HAL_PWREx_EnableOverDrive+0x98>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001428:	d1ee      	bne.n	8001408 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800142a:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <HAL_PWREx_EnableOverDrive+0x9c>)
 800142c:	2201      	movs	r2, #1
 800142e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001430:	f7ff fcf4 	bl	8000e1c <HAL_GetTick>
 8001434:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001436:	e009      	b.n	800144c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001438:	f7ff fcf0 	bl	8000e1c <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001446:	d901      	bls.n	800144c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e007      	b.n	800145c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800144c:	4b07      	ldr	r3, [pc, #28]	@ (800146c <HAL_PWREx_EnableOverDrive+0x98>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001454:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001458:	d1ee      	bne.n	8001438 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40023800 	.word	0x40023800
 8001468:	420e0040 	.word	0x420e0040
 800146c:	40007000 	.word	0x40007000
 8001470:	420e0044 	.word	0x420e0044

08001474 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e267      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d075      	beq.n	800157e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001492:	4b88      	ldr	r3, [pc, #544]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 030c 	and.w	r3, r3, #12
 800149a:	2b04      	cmp	r3, #4
 800149c:	d00c      	beq.n	80014b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800149e:	4b85      	ldr	r3, [pc, #532]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d112      	bne.n	80014d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014aa:	4b82      	ldr	r3, [pc, #520]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014b6:	d10b      	bne.n	80014d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b8:	4b7e      	ldr	r3, [pc, #504]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d05b      	beq.n	800157c <HAL_RCC_OscConfig+0x108>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d157      	bne.n	800157c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e242      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014d8:	d106      	bne.n	80014e8 <HAL_RCC_OscConfig+0x74>
 80014da:	4b76      	ldr	r3, [pc, #472]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a75      	ldr	r2, [pc, #468]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e01d      	b.n	8001524 <HAL_RCC_OscConfig+0xb0>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014f0:	d10c      	bne.n	800150c <HAL_RCC_OscConfig+0x98>
 80014f2:	4b70      	ldr	r3, [pc, #448]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a6f      	ldr	r2, [pc, #444]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	4b6d      	ldr	r3, [pc, #436]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a6c      	ldr	r2, [pc, #432]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	e00b      	b.n	8001524 <HAL_RCC_OscConfig+0xb0>
 800150c:	4b69      	ldr	r3, [pc, #420]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a68      	ldr	r2, [pc, #416]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001512:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	4b66      	ldr	r3, [pc, #408]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a65      	ldr	r2, [pc, #404]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 800151e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d013      	beq.n	8001554 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fc76 	bl	8000e1c <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001534:	f7ff fc72 	bl	8000e1c <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b64      	cmp	r3, #100	@ 0x64
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e207      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001546:	4b5b      	ldr	r3, [pc, #364]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0xc0>
 8001552:	e014      	b.n	800157e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001554:	f7ff fc62 	bl	8000e1c <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800155c:	f7ff fc5e 	bl	8000e1c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b64      	cmp	r3, #100	@ 0x64
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e1f3      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156e:	4b51      	ldr	r3, [pc, #324]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0xe8>
 800157a:	e000      	b.n	800157e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d063      	beq.n	8001652 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800158a:	4b4a      	ldr	r3, [pc, #296]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 030c 	and.w	r3, r3, #12
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00b      	beq.n	80015ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001596:	4b47      	ldr	r3, [pc, #284]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d11c      	bne.n	80015dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015a2:	4b44      	ldr	r3, [pc, #272]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d116      	bne.n	80015dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ae:	4b41      	ldr	r3, [pc, #260]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d005      	beq.n	80015c6 <HAL_RCC_OscConfig+0x152>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d001      	beq.n	80015c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e1c7      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c6:	4b3b      	ldr	r3, [pc, #236]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	4937      	ldr	r1, [pc, #220]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015da:	e03a      	b.n	8001652 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d020      	beq.n	8001626 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e4:	4b34      	ldr	r3, [pc, #208]	@ (80016b8 <HAL_RCC_OscConfig+0x244>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ea:	f7ff fc17 	bl	8000e1c <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f2:	f7ff fc13 	bl	8000e1c <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e1a8      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001604:	4b2b      	ldr	r3, [pc, #172]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001610:	4b28      	ldr	r3, [pc, #160]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4925      	ldr	r1, [pc, #148]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001620:	4313      	orrs	r3, r2
 8001622:	600b      	str	r3, [r1, #0]
 8001624:	e015      	b.n	8001652 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001626:	4b24      	ldr	r3, [pc, #144]	@ (80016b8 <HAL_RCC_OscConfig+0x244>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162c:	f7ff fbf6 	bl	8000e1c <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001634:	f7ff fbf2 	bl	8000e1c <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e187      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001646:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	2b00      	cmp	r3, #0
 800165c:	d036      	beq.n	80016cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d016      	beq.n	8001694 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001666:	4b15      	ldr	r3, [pc, #84]	@ (80016bc <HAL_RCC_OscConfig+0x248>)
 8001668:	2201      	movs	r2, #1
 800166a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166c:	f7ff fbd6 	bl	8000e1c <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001674:	f7ff fbd2 	bl	8000e1c <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e167      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001686:	4b0b      	ldr	r3, [pc, #44]	@ (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0x200>
 8001692:	e01b      	b.n	80016cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001694:	4b09      	ldr	r3, [pc, #36]	@ (80016bc <HAL_RCC_OscConfig+0x248>)
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169a:	f7ff fbbf 	bl	8000e1c <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a0:	e00e      	b.n	80016c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a2:	f7ff fbbb 	bl	8000e1c <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d907      	bls.n	80016c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e150      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
 80016b4:	40023800 	.word	0x40023800
 80016b8:	42470000 	.word	0x42470000
 80016bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c0:	4b88      	ldr	r3, [pc, #544]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 80016c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1ea      	bne.n	80016a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 8097 	beq.w	8001808 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016de:	4b81      	ldr	r3, [pc, #516]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10f      	bne.n	800170a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	4b7d      	ldr	r3, [pc, #500]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f2:	4a7c      	ldr	r2, [pc, #496]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 80016f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fa:	4b7a      	ldr	r3, [pc, #488]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001706:	2301      	movs	r3, #1
 8001708:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170a:	4b77      	ldr	r3, [pc, #476]	@ (80018e8 <HAL_RCC_OscConfig+0x474>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001712:	2b00      	cmp	r3, #0
 8001714:	d118      	bne.n	8001748 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001716:	4b74      	ldr	r3, [pc, #464]	@ (80018e8 <HAL_RCC_OscConfig+0x474>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a73      	ldr	r2, [pc, #460]	@ (80018e8 <HAL_RCC_OscConfig+0x474>)
 800171c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001722:	f7ff fb7b 	bl	8000e1c <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172a:	f7ff fb77 	bl	8000e1c <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e10c      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173c:	4b6a      	ldr	r3, [pc, #424]	@ (80018e8 <HAL_RCC_OscConfig+0x474>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d106      	bne.n	800175e <HAL_RCC_OscConfig+0x2ea>
 8001750:	4b64      	ldr	r3, [pc, #400]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001754:	4a63      	ldr	r2, [pc, #396]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6713      	str	r3, [r2, #112]	@ 0x70
 800175c:	e01c      	b.n	8001798 <HAL_RCC_OscConfig+0x324>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b05      	cmp	r3, #5
 8001764:	d10c      	bne.n	8001780 <HAL_RCC_OscConfig+0x30c>
 8001766:	4b5f      	ldr	r3, [pc, #380]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800176a:	4a5e      	ldr	r2, [pc, #376]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	6713      	str	r3, [r2, #112]	@ 0x70
 8001772:	4b5c      	ldr	r3, [pc, #368]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001776:	4a5b      	ldr	r2, [pc, #364]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6713      	str	r3, [r2, #112]	@ 0x70
 800177e:	e00b      	b.n	8001798 <HAL_RCC_OscConfig+0x324>
 8001780:	4b58      	ldr	r3, [pc, #352]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001784:	4a57      	ldr	r2, [pc, #348]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001786:	f023 0301 	bic.w	r3, r3, #1
 800178a:	6713      	str	r3, [r2, #112]	@ 0x70
 800178c:	4b55      	ldr	r3, [pc, #340]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 800178e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001790:	4a54      	ldr	r2, [pc, #336]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001792:	f023 0304 	bic.w	r3, r3, #4
 8001796:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d015      	beq.n	80017cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a0:	f7ff fb3c 	bl	8000e1c <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a6:	e00a      	b.n	80017be <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a8:	f7ff fb38 	bl	8000e1c <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e0cb      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017be:	4b49      	ldr	r3, [pc, #292]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 80017c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0ee      	beq.n	80017a8 <HAL_RCC_OscConfig+0x334>
 80017ca:	e014      	b.n	80017f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017cc:	f7ff fb26 	bl	8000e1c <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d2:	e00a      	b.n	80017ea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d4:	f7ff fb22 	bl	8000e1c <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e0b5      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ea:	4b3e      	ldr	r3, [pc, #248]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 80017ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1ee      	bne.n	80017d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017f6:	7dfb      	ldrb	r3, [r7, #23]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d105      	bne.n	8001808 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017fc:	4b39      	ldr	r3, [pc, #228]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 80017fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001800:	4a38      	ldr	r2, [pc, #224]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001802:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001806:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 80a1 	beq.w	8001954 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001812:	4b34      	ldr	r3, [pc, #208]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	2b08      	cmp	r3, #8
 800181c:	d05c      	beq.n	80018d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d141      	bne.n	80018aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001826:	4b31      	ldr	r3, [pc, #196]	@ (80018ec <HAL_RCC_OscConfig+0x478>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182c:	f7ff faf6 	bl	8000e1c <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001834:	f7ff faf2 	bl	8000e1c <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e087      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001846:	4b27      	ldr	r3, [pc, #156]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69da      	ldr	r2, [r3, #28]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001860:	019b      	lsls	r3, r3, #6
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001868:	085b      	lsrs	r3, r3, #1
 800186a:	3b01      	subs	r3, #1
 800186c:	041b      	lsls	r3, r3, #16
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001874:	061b      	lsls	r3, r3, #24
 8001876:	491b      	ldr	r1, [pc, #108]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800187c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <HAL_RCC_OscConfig+0x478>)
 800187e:	2201      	movs	r2, #1
 8001880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001882:	f7ff facb 	bl	8000e1c <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188a:	f7ff fac7 	bl	8000e1c <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e05c      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189c:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x416>
 80018a8:	e054      	b.n	8001954 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018aa:	4b10      	ldr	r3, [pc, #64]	@ (80018ec <HAL_RCC_OscConfig+0x478>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7ff fab4 	bl	8000e1c <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b8:	f7ff fab0 	bl	8000e1c <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e045      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ca:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <HAL_RCC_OscConfig+0x470>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0x444>
 80018d6:	e03d      	b.n	8001954 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d107      	bne.n	80018f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e038      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40007000 	.word	0x40007000
 80018ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001960 <HAL_RCC_OscConfig+0x4ec>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d028      	beq.n	8001950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d121      	bne.n	8001950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001916:	429a      	cmp	r2, r3
 8001918:	d11a      	bne.n	8001950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001920:	4013      	ands	r3, r2
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001926:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001928:	4293      	cmp	r3, r2
 800192a:	d111      	bne.n	8001950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001936:	085b      	lsrs	r3, r3, #1
 8001938:	3b01      	subs	r3, #1
 800193a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800193c:	429a      	cmp	r2, r3
 800193e:	d107      	bne.n	8001950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800194a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e000      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800

08001964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0cc      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001978:	4b68      	ldr	r3, [pc, #416]	@ (8001b1c <HAL_RCC_ClockConfig+0x1b8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 030f 	and.w	r3, r3, #15
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d90c      	bls.n	80019a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001986:	4b65      	ldr	r3, [pc, #404]	@ (8001b1c <HAL_RCC_ClockConfig+0x1b8>)
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800198e:	4b63      	ldr	r3, [pc, #396]	@ (8001b1c <HAL_RCC_ClockConfig+0x1b8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e0b8      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d020      	beq.n	80019ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019b8:	4b59      	ldr	r3, [pc, #356]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	4a58      	ldr	r2, [pc, #352]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0308 	and.w	r3, r3, #8
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d005      	beq.n	80019dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019d0:	4b53      	ldr	r3, [pc, #332]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	4a52      	ldr	r2, [pc, #328]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019dc:	4b50      	ldr	r3, [pc, #320]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	494d      	ldr	r1, [pc, #308]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d044      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d107      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a02:	4b47      	ldr	r3, [pc, #284]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d119      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e07f      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d003      	beq.n	8001a22 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d107      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a22:	4b3f      	ldr	r3, [pc, #252]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d109      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e06f      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a32:	4b3b      	ldr	r3, [pc, #236]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e067      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a42:	4b37      	ldr	r3, [pc, #220]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f023 0203 	bic.w	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	4934      	ldr	r1, [pc, #208]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a54:	f7ff f9e2 	bl	8000e1c <HAL_GetTick>
 8001a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5a:	e00a      	b.n	8001a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a5c:	f7ff f9de 	bl	8000e1c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e04f      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a72:	4b2b      	ldr	r3, [pc, #172]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 020c 	and.w	r2, r3, #12
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d1eb      	bne.n	8001a5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a84:	4b25      	ldr	r3, [pc, #148]	@ (8001b1c <HAL_RCC_ClockConfig+0x1b8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 030f 	and.w	r3, r3, #15
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d20c      	bcs.n	8001aac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b22      	ldr	r3, [pc, #136]	@ (8001b1c <HAL_RCC_ClockConfig+0x1b8>)
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9a:	4b20      	ldr	r3, [pc, #128]	@ (8001b1c <HAL_RCC_ClockConfig+0x1b8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d001      	beq.n	8001aac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e032      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d008      	beq.n	8001aca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab8:	4b19      	ldr	r3, [pc, #100]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	4916      	ldr	r1, [pc, #88]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d009      	beq.n	8001aea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ad6:	4b12      	ldr	r3, [pc, #72]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	490e      	ldr	r1, [pc, #56]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aea:	f000 f821 	bl	8001b30 <HAL_RCC_GetSysClockFreq>
 8001aee:	4602      	mov	r2, r0
 8001af0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	490a      	ldr	r1, [pc, #40]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 8001afc:	5ccb      	ldrb	r3, [r1, r3]
 8001afe:	fa22 f303 	lsr.w	r3, r2, r3
 8001b02:	4a09      	ldr	r2, [pc, #36]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b06:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff f942 	bl	8000d94 <HAL_InitTick>

  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40023c00 	.word	0x40023c00
 8001b20:	40023800 	.word	0x40023800
 8001b24:	08006c54 	.word	0x08006c54
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	20000004 	.word	0x20000004

08001b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b34:	b094      	sub	sp, #80	@ 0x50
 8001b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b48:	4b79      	ldr	r3, [pc, #484]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 030c 	and.w	r3, r3, #12
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d00d      	beq.n	8001b70 <HAL_RCC_GetSysClockFreq+0x40>
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	f200 80e1 	bhi.w	8001d1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <HAL_RCC_GetSysClockFreq+0x34>
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d003      	beq.n	8001b6a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b62:	e0db      	b.n	8001d1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b64:	4b73      	ldr	r3, [pc, #460]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b68:	e0db      	b.n	8001d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b6a:	4b73      	ldr	r3, [pc, #460]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b6e:	e0d8      	b.n	8001d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b70:	4b6f      	ldr	r3, [pc, #444]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b78:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b7a:	4b6d      	ldr	r3, [pc, #436]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d063      	beq.n	8001c4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b86:	4b6a      	ldr	r3, [pc, #424]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	099b      	lsrs	r3, r3, #6
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b90:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b98:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ba2:	4622      	mov	r2, r4
 8001ba4:	462b      	mov	r3, r5
 8001ba6:	f04f 0000 	mov.w	r0, #0
 8001baa:	f04f 0100 	mov.w	r1, #0
 8001bae:	0159      	lsls	r1, r3, #5
 8001bb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bb4:	0150      	lsls	r0, r2, #5
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4621      	mov	r1, r4
 8001bbc:	1a51      	subs	r1, r2, r1
 8001bbe:	6139      	str	r1, [r7, #16]
 8001bc0:	4629      	mov	r1, r5
 8001bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bd4:	4659      	mov	r1, fp
 8001bd6:	018b      	lsls	r3, r1, #6
 8001bd8:	4651      	mov	r1, sl
 8001bda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bde:	4651      	mov	r1, sl
 8001be0:	018a      	lsls	r2, r1, #6
 8001be2:	4651      	mov	r1, sl
 8001be4:	ebb2 0801 	subs.w	r8, r2, r1
 8001be8:	4659      	mov	r1, fp
 8001bea:	eb63 0901 	sbc.w	r9, r3, r1
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c02:	4690      	mov	r8, r2
 8001c04:	4699      	mov	r9, r3
 8001c06:	4623      	mov	r3, r4
 8001c08:	eb18 0303 	adds.w	r3, r8, r3
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	462b      	mov	r3, r5
 8001c10:	eb49 0303 	adc.w	r3, r9, r3
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c22:	4629      	mov	r1, r5
 8001c24:	024b      	lsls	r3, r1, #9
 8001c26:	4621      	mov	r1, r4
 8001c28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c2c:	4621      	mov	r1, r4
 8001c2e:	024a      	lsls	r2, r1, #9
 8001c30:	4610      	mov	r0, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c36:	2200      	movs	r2, #0
 8001c38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c40:	f7fe fb2e 	bl	80002a0 <__aeabi_uldivmod>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4613      	mov	r3, r2
 8001c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c4c:	e058      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4e:	4b38      	ldr	r3, [pc, #224]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	099b      	lsrs	r3, r3, #6
 8001c54:	2200      	movs	r2, #0
 8001c56:	4618      	mov	r0, r3
 8001c58:	4611      	mov	r1, r2
 8001c5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c5e:	623b      	str	r3, [r7, #32]
 8001c60:	2300      	movs	r3, #0
 8001c62:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c68:	4642      	mov	r2, r8
 8001c6a:	464b      	mov	r3, r9
 8001c6c:	f04f 0000 	mov.w	r0, #0
 8001c70:	f04f 0100 	mov.w	r1, #0
 8001c74:	0159      	lsls	r1, r3, #5
 8001c76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c7a:	0150      	lsls	r0, r2, #5
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4641      	mov	r1, r8
 8001c82:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c86:	4649      	mov	r1, r9
 8001c88:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	f04f 0300 	mov.w	r3, #0
 8001c94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ca0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ca4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	00eb      	lsls	r3, r5, #3
 8001cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cb6:	00e2      	lsls	r2, r4, #3
 8001cb8:	4614      	mov	r4, r2
 8001cba:	461d      	mov	r5, r3
 8001cbc:	4643      	mov	r3, r8
 8001cbe:	18e3      	adds	r3, r4, r3
 8001cc0:	603b      	str	r3, [r7, #0]
 8001cc2:	464b      	mov	r3, r9
 8001cc4:	eb45 0303 	adc.w	r3, r5, r3
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cd6:	4629      	mov	r1, r5
 8001cd8:	028b      	lsls	r3, r1, #10
 8001cda:	4621      	mov	r1, r4
 8001cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ce0:	4621      	mov	r1, r4
 8001ce2:	028a      	lsls	r2, r1, #10
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cea:	2200      	movs	r2, #0
 8001cec:	61bb      	str	r3, [r7, #24]
 8001cee:	61fa      	str	r2, [r7, #28]
 8001cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cf4:	f7fe fad4 	bl	80002a0 <__aeabi_uldivmod>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001d00:	4b0b      	ldr	r3, [pc, #44]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	0c1b      	lsrs	r3, r3, #16
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001d10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d1a:	e002      	b.n	8001d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d1c:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3750      	adds	r7, #80	@ 0x50
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800
 8001d34:	00f42400 	.word	0x00f42400
 8001d38:	007a1200 	.word	0x007a1200

08001d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d40:	4b03      	ldr	r3, [pc, #12]	@ (8001d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20000000 	.word	0x20000000

08001d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d58:	f7ff fff0 	bl	8001d3c <HAL_RCC_GetHCLKFreq>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	4b05      	ldr	r3, [pc, #20]	@ (8001d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	0a9b      	lsrs	r3, r3, #10
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	4903      	ldr	r1, [pc, #12]	@ (8001d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d6a:	5ccb      	ldrb	r3, [r1, r3]
 8001d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40023800 	.word	0x40023800
 8001d78:	08006c64 	.word	0x08006c64

08001d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d80:	f7ff ffdc 	bl	8001d3c <HAL_RCC_GetHCLKFreq>
 8001d84:	4602      	mov	r2, r0
 8001d86:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	0b5b      	lsrs	r3, r3, #13
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	4903      	ldr	r1, [pc, #12]	@ (8001da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d92:	5ccb      	ldrb	r3, [r1, r3]
 8001d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	08006c64 	.word	0x08006c64

08001da4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e07b      	b.n	8001eae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d108      	bne.n	8001dd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001dc6:	d009      	beq.n	8001ddc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	61da      	str	r2, [r3, #28]
 8001dce:	e005      	b.n	8001ddc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d106      	bne.n	8001dfc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7fe fe78 	bl	8000aec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001e24:	431a      	orrs	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e60:	ea42 0103 	orr.w	r1, r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e68:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	0c1b      	lsrs	r3, r3, #16
 8001e7a:	f003 0104 	and.w	r1, r3, #4
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e82:	f003 0210 	and.w	r2, r3, #16
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	69da      	ldr	r2, [r3, #28]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b088      	sub	sp, #32
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	603b      	str	r3, [r7, #0]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ec6:	f7fe ffa9 	bl	8000e1c <HAL_GetTick>
 8001eca:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001ecc:	88fb      	ldrh	r3, [r7, #6]
 8001ece:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d001      	beq.n	8001ee0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001edc:	2302      	movs	r3, #2
 8001ede:	e12a      	b.n	8002136 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d002      	beq.n	8001eec <HAL_SPI_Transmit+0x36>
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e122      	b.n	8002136 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <HAL_SPI_Transmit+0x48>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e11b      	b.n	8002136 <HAL_SPI_Transmit+0x280>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2203      	movs	r2, #3
 8001f0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	88fa      	ldrh	r2, [r7, #6]
 8001f1e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	88fa      	ldrh	r2, [r7, #6]
 8001f24:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f4c:	d10f      	bne.n	8001f6e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f78:	2b40      	cmp	r3, #64	@ 0x40
 8001f7a:	d007      	beq.n	8001f8c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f94:	d152      	bne.n	800203c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <HAL_SPI_Transmit+0xee>
 8001f9e:	8b7b      	ldrh	r3, [r7, #26]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d145      	bne.n	8002030 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa8:	881a      	ldrh	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb4:	1c9a      	adds	r2, r3, #2
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001fc8:	e032      	b.n	8002030 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d112      	bne.n	8001ffe <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fdc:	881a      	ldrh	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe8:	1c9a      	adds	r2, r3, #2
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001ffc:	e018      	b.n	8002030 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ffe:	f7fe ff0d 	bl	8000e1c <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d803      	bhi.n	8002016 <HAL_SPI_Transmit+0x160>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002014:	d102      	bne.n	800201c <HAL_SPI_Transmit+0x166>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d109      	bne.n	8002030 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e082      	b.n	8002136 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002034:	b29b      	uxth	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1c7      	bne.n	8001fca <HAL_SPI_Transmit+0x114>
 800203a:	e053      	b.n	80020e4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <HAL_SPI_Transmit+0x194>
 8002044:	8b7b      	ldrh	r3, [r7, #26]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d147      	bne.n	80020da <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	330c      	adds	r3, #12
 8002054:	7812      	ldrb	r2, [r2, #0]
 8002056:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002066:	b29b      	uxth	r3, r3
 8002068:	3b01      	subs	r3, #1
 800206a:	b29a      	uxth	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002070:	e033      	b.n	80020da <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b02      	cmp	r3, #2
 800207e:	d113      	bne.n	80020a8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	330c      	adds	r3, #12
 800208a:	7812      	ldrb	r2, [r2, #0]
 800208c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800209c:	b29b      	uxth	r3, r3
 800209e:	3b01      	subs	r3, #1
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80020a6:	e018      	b.n	80020da <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020a8:	f7fe feb8 	bl	8000e1c <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d803      	bhi.n	80020c0 <HAL_SPI_Transmit+0x20a>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020be:	d102      	bne.n	80020c6 <HAL_SPI_Transmit+0x210>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d109      	bne.n	80020da <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e02d      	b.n	8002136 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020de:	b29b      	uxth	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1c6      	bne.n	8002072 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020e4:	69fa      	ldr	r2, [r7, #28]
 80020e6:	6839      	ldr	r1, [r7, #0]
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 fa59 	bl	80025a0 <SPI_EndRxTxTransaction>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2220      	movs	r2, #32
 80020f8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10a      	bne.n	8002118 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e000      	b.n	8002136 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002134:	2300      	movs	r3, #0
  }
}
 8002136:	4618      	mov	r0, r3
 8002138:	3720      	adds	r7, #32
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b08a      	sub	sp, #40	@ 0x28
 8002142:	af00      	add	r7, sp, #0
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
 800214a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800214c:	2301      	movs	r3, #1
 800214e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002150:	f7fe fe64 	bl	8000e1c <HAL_GetTick>
 8002154:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800215c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002164:	887b      	ldrh	r3, [r7, #2]
 8002166:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002168:	7ffb      	ldrb	r3, [r7, #31]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d00c      	beq.n	8002188 <HAL_SPI_TransmitReceive+0x4a>
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002174:	d106      	bne.n	8002184 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d102      	bne.n	8002184 <HAL_SPI_TransmitReceive+0x46>
 800217e:	7ffb      	ldrb	r3, [r7, #31]
 8002180:	2b04      	cmp	r3, #4
 8002182:	d001      	beq.n	8002188 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002184:	2302      	movs	r3, #2
 8002186:	e17f      	b.n	8002488 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d005      	beq.n	800219a <HAL_SPI_TransmitReceive+0x5c>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <HAL_SPI_TransmitReceive+0x5c>
 8002194:	887b      	ldrh	r3, [r7, #2]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e174      	b.n	8002488 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_SPI_TransmitReceive+0x6e>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e16d      	b.n	8002488 <HAL_SPI_TransmitReceive+0x34a>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d003      	beq.n	80021c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2205      	movs	r2, #5
 80021c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	887a      	ldrh	r2, [r7, #2]
 80021d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	887a      	ldrh	r2, [r7, #2]
 80021de:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	887a      	ldrh	r2, [r7, #2]
 80021ea:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	887a      	ldrh	r2, [r7, #2]
 80021f0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002208:	2b40      	cmp	r3, #64	@ 0x40
 800220a:	d007      	beq.n	800221c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800221a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002224:	d17e      	bne.n	8002324 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <HAL_SPI_TransmitReceive+0xf6>
 800222e:	8afb      	ldrh	r3, [r7, #22]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d16c      	bne.n	800230e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002238:	881a      	ldrh	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002244:	1c9a      	adds	r2, r3, #2
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800224e:	b29b      	uxth	r3, r3
 8002250:	3b01      	subs	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002258:	e059      	b.n	800230e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b02      	cmp	r3, #2
 8002266:	d11b      	bne.n	80022a0 <HAL_SPI_TransmitReceive+0x162>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800226c:	b29b      	uxth	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d016      	beq.n	80022a0 <HAL_SPI_TransmitReceive+0x162>
 8002272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002274:	2b01      	cmp	r3, #1
 8002276:	d113      	bne.n	80022a0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227c:	881a      	ldrh	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002288:	1c9a      	adds	r2, r3, #2
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002292:	b29b      	uxth	r3, r3
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d119      	bne.n	80022e2 <HAL_SPI_TransmitReceive+0x1a4>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d014      	beq.n	80022e2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c2:	b292      	uxth	r2, r2
 80022c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ca:	1c9a      	adds	r2, r3, #2
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022de:	2301      	movs	r3, #1
 80022e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80022e2:	f7fe fd9b 	bl	8000e1c <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d80d      	bhi.n	800230e <HAL_SPI_TransmitReceive+0x1d0>
 80022f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f8:	d009      	beq.n	800230e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e0bc      	b.n	8002488 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002312:	b29b      	uxth	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1a0      	bne.n	800225a <HAL_SPI_TransmitReceive+0x11c>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800231c:	b29b      	uxth	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d19b      	bne.n	800225a <HAL_SPI_TransmitReceive+0x11c>
 8002322:	e082      	b.n	800242a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d002      	beq.n	8002332 <HAL_SPI_TransmitReceive+0x1f4>
 800232c:	8afb      	ldrh	r3, [r7, #22]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d171      	bne.n	8002416 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	330c      	adds	r3, #12
 800233c:	7812      	ldrb	r2, [r2, #0]
 800233e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002358:	e05d      	b.n	8002416 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b02      	cmp	r3, #2
 8002366:	d11c      	bne.n	80023a2 <HAL_SPI_TransmitReceive+0x264>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800236c:	b29b      	uxth	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d017      	beq.n	80023a2 <HAL_SPI_TransmitReceive+0x264>
 8002372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002374:	2b01      	cmp	r3, #1
 8002376:	d114      	bne.n	80023a2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	330c      	adds	r3, #12
 8002382:	7812      	ldrb	r2, [r2, #0]
 8002384:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002394:	b29b      	uxth	r3, r3
 8002396:	3b01      	subs	r3, #1
 8002398:	b29a      	uxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d119      	bne.n	80023e4 <HAL_SPI_TransmitReceive+0x2a6>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d014      	beq.n	80023e4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023e0:	2301      	movs	r3, #1
 80023e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80023e4:	f7fe fd1a 	bl	8000e1c <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d803      	bhi.n	80023fc <HAL_SPI_TransmitReceive+0x2be>
 80023f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fa:	d102      	bne.n	8002402 <HAL_SPI_TransmitReceive+0x2c4>
 80023fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d109      	bne.n	8002416 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e038      	b.n	8002488 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800241a:	b29b      	uxth	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	d19c      	bne.n	800235a <HAL_SPI_TransmitReceive+0x21c>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002424:	b29b      	uxth	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d197      	bne.n	800235a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800242a:	6a3a      	ldr	r2, [r7, #32]
 800242c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 f8b6 	bl	80025a0 <SPI_EndRxTxTransaction>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d008      	beq.n	800244c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2220      	movs	r2, #32
 800243e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e01d      	b.n	8002488 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10a      	bne.n	800246a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002454:	2300      	movs	r3, #0
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002486:	2300      	movs	r3, #0
  }
}
 8002488:	4618      	mov	r0, r3
 800248a:	3728      	adds	r7, #40	@ 0x28
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	603b      	str	r3, [r7, #0]
 800249c:	4613      	mov	r3, r2
 800249e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024a0:	f7fe fcbc 	bl	8000e1c <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a8:	1a9b      	subs	r3, r3, r2
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	4413      	add	r3, r2
 80024ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024b0:	f7fe fcb4 	bl	8000e1c <HAL_GetTick>
 80024b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024b6:	4b39      	ldr	r3, [pc, #228]	@ (800259c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	015b      	lsls	r3, r3, #5
 80024bc:	0d1b      	lsrs	r3, r3, #20
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	fb02 f303 	mul.w	r3, r2, r3
 80024c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024c6:	e055      	b.n	8002574 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ce:	d051      	beq.n	8002574 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024d0:	f7fe fca4 	bl	8000e1c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	69fa      	ldr	r2, [r7, #28]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d902      	bls.n	80024e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d13d      	bne.n	8002562 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80024f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024fe:	d111      	bne.n	8002524 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002508:	d004      	beq.n	8002514 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002512:	d107      	bne.n	8002524 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002522:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002528:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800252c:	d10f      	bne.n	800254e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800254c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e018      	b.n	8002594 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d102      	bne.n	800256e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	e002      	b.n	8002574 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	3b01      	subs	r3, #1
 8002572:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	4013      	ands	r3, r2
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	429a      	cmp	r2, r3
 8002582:	bf0c      	ite	eq
 8002584:	2301      	moveq	r3, #1
 8002586:	2300      	movne	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	429a      	cmp	r2, r3
 8002590:	d19a      	bne.n	80024c8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3720      	adds	r7, #32
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000000 	.word	0x20000000

080025a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b088      	sub	sp, #32
 80025a4:	af02      	add	r7, sp, #8
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2201      	movs	r2, #1
 80025b4:	2102      	movs	r1, #2
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f7ff ff6a 	bl	8002490 <SPI_WaitFlagStateUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d007      	beq.n	80025d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c6:	f043 0220 	orr.w	r2, r3, #32
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e032      	b.n	8002638 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80025d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002640 <SPI_EndRxTxTransaction+0xa0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002644 <SPI_EndRxTxTransaction+0xa4>)
 80025d8:	fba2 2303 	umull	r2, r3, r2, r3
 80025dc:	0d5b      	lsrs	r3, r3, #21
 80025de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025e2:	fb02 f303 	mul.w	r3, r2, r3
 80025e6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025f0:	d112      	bne.n	8002618 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2200      	movs	r2, #0
 80025fa:	2180      	movs	r1, #128	@ 0x80
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f7ff ff47 	bl	8002490 <SPI_WaitFlagStateUntilTimeout>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d016      	beq.n	8002636 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800260c:	f043 0220 	orr.w	r2, r3, #32
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e00f      	b.n	8002638 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	3b01      	subs	r3, #1
 8002622:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800262e:	2b80      	cmp	r3, #128	@ 0x80
 8002630:	d0f2      	beq.n	8002618 <SPI_EndRxTxTransaction+0x78>
 8002632:	e000      	b.n	8002636 <SPI_EndRxTxTransaction+0x96>
        break;
 8002634:	bf00      	nop
  }

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000000 	.word	0x20000000
 8002644:	165e9f81 	.word	0x165e9f81

08002648 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e042      	b.n	80026e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d106      	bne.n	8002674 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7fe fa84 	bl	8000b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2224      	movs	r2, #36	@ 0x24
 8002678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800268a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f973 	bl	8002978 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2220      	movs	r2, #32
 80026cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08a      	sub	sp, #40	@ 0x28
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	4613      	mov	r3, r2
 80026f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b20      	cmp	r3, #32
 8002706:	d175      	bne.n	80027f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <HAL_UART_Transmit+0x2c>
 800270e:	88fb      	ldrh	r3, [r7, #6]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e06e      	b.n	80027f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2221      	movs	r2, #33	@ 0x21
 8002722:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002726:	f7fe fb79 	bl	8000e1c <HAL_GetTick>
 800272a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	88fa      	ldrh	r2, [r7, #6]
 8002730:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	88fa      	ldrh	r2, [r7, #6]
 8002736:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002740:	d108      	bne.n	8002754 <HAL_UART_Transmit+0x6c>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d104      	bne.n	8002754 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	61bb      	str	r3, [r7, #24]
 8002752:	e003      	b.n	800275c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002758:	2300      	movs	r3, #0
 800275a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800275c:	e02e      	b.n	80027bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2200      	movs	r2, #0
 8002766:	2180      	movs	r1, #128	@ 0x80
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 f848 	bl	80027fe <UART_WaitOnFlagUntilTimeout>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2220      	movs	r2, #32
 8002778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e03a      	b.n	80027f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10b      	bne.n	800279e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002794:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	3302      	adds	r3, #2
 800279a:	61bb      	str	r3, [r7, #24]
 800279c:	e007      	b.n	80027ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	781a      	ldrb	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	3301      	adds	r3, #1
 80027ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1cb      	bne.n	800275e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2200      	movs	r2, #0
 80027ce:	2140      	movs	r1, #64	@ 0x40
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 f814 	bl	80027fe <UART_WaitOnFlagUntilTimeout>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2220      	movs	r2, #32
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e006      	b.n	80027f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2220      	movs	r2, #32
 80027ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	e000      	b.n	80027f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80027f4:	2302      	movs	r3, #2
  }
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3720      	adds	r7, #32
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b086      	sub	sp, #24
 8002802:	af00      	add	r7, sp, #0
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	603b      	str	r3, [r7, #0]
 800280a:	4613      	mov	r3, r2
 800280c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800280e:	e03b      	b.n	8002888 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002816:	d037      	beq.n	8002888 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002818:	f7fe fb00 	bl	8000e1c <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	6a3a      	ldr	r2, [r7, #32]
 8002824:	429a      	cmp	r2, r3
 8002826:	d302      	bcc.n	800282e <UART_WaitOnFlagUntilTimeout+0x30>
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e03a      	b.n	80028a8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d023      	beq.n	8002888 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b80      	cmp	r3, #128	@ 0x80
 8002844:	d020      	beq.n	8002888 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b40      	cmp	r3, #64	@ 0x40
 800284a:	d01d      	beq.n	8002888 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b08      	cmp	r3, #8
 8002858:	d116      	bne.n	8002888 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 f81d 	bl	80028b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2208      	movs	r2, #8
 800287a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e00f      	b.n	80028a8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	4013      	ands	r3, r2
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	429a      	cmp	r2, r3
 8002896:	bf0c      	ite	eq
 8002898:	2301      	moveq	r3, #1
 800289a:	2300      	movne	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	461a      	mov	r2, r3
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d0b4      	beq.n	8002810 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b095      	sub	sp, #84	@ 0x54
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	330c      	adds	r3, #12
 80028be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c2:	e853 3f00 	ldrex	r3, [r3]
 80028c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80028c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	330c      	adds	r3, #12
 80028d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028d8:	643a      	str	r2, [r7, #64]	@ 0x40
 80028da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80028de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028e0:	e841 2300 	strex	r3, r2, [r1]
 80028e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80028e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1e5      	bne.n	80028b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	3314      	adds	r3, #20
 80028f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	e853 3f00 	ldrex	r3, [r3]
 80028fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f023 0301 	bic.w	r3, r3, #1
 8002902:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	3314      	adds	r3, #20
 800290a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800290c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800290e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002910:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002912:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002914:	e841 2300 	strex	r3, r2, [r1]
 8002918:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1e5      	bne.n	80028ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002924:	2b01      	cmp	r3, #1
 8002926:	d119      	bne.n	800295c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	330c      	adds	r3, #12
 800292e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	e853 3f00 	ldrex	r3, [r3]
 8002936:	60bb      	str	r3, [r7, #8]
   return(result);
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f023 0310 	bic.w	r3, r3, #16
 800293e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	330c      	adds	r3, #12
 8002946:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002948:	61ba      	str	r2, [r7, #24]
 800294a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294c:	6979      	ldr	r1, [r7, #20]
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	e841 2300 	strex	r3, r2, [r1]
 8002954:	613b      	str	r3, [r7, #16]
   return(result);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1e5      	bne.n	8002928 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800296a:	bf00      	nop
 800296c:	3754      	adds	r7, #84	@ 0x54
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800297c:	b0c0      	sub	sp, #256	@ 0x100
 800297e:	af00      	add	r7, sp, #0
 8002980:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002994:	68d9      	ldr	r1, [r3, #12]
 8002996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	ea40 0301 	orr.w	r3, r0, r1
 80029a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	431a      	orrs	r2, r3
 80029b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	431a      	orrs	r2, r3
 80029b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80029d0:	f021 010c 	bic.w	r1, r1, #12
 80029d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80029de:	430b      	orrs	r3, r1
 80029e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80029ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f2:	6999      	ldr	r1, [r3, #24]
 80029f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	ea40 0301 	orr.w	r3, r0, r1
 80029fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	4b8f      	ldr	r3, [pc, #572]	@ (8002c44 <UART_SetConfig+0x2cc>)
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d005      	beq.n	8002a18 <UART_SetConfig+0xa0>
 8002a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	4b8d      	ldr	r3, [pc, #564]	@ (8002c48 <UART_SetConfig+0x2d0>)
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d104      	bne.n	8002a22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a18:	f7ff f9b0 	bl	8001d7c <HAL_RCC_GetPCLK2Freq>
 8002a1c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002a20:	e003      	b.n	8002a2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a22:	f7ff f997 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 8002a26:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a34:	f040 810c 	bne.w	8002c50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a42:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002a46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002a4a:	4622      	mov	r2, r4
 8002a4c:	462b      	mov	r3, r5
 8002a4e:	1891      	adds	r1, r2, r2
 8002a50:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002a52:	415b      	adcs	r3, r3
 8002a54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a5a:	4621      	mov	r1, r4
 8002a5c:	eb12 0801 	adds.w	r8, r2, r1
 8002a60:	4629      	mov	r1, r5
 8002a62:	eb43 0901 	adc.w	r9, r3, r1
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a7a:	4690      	mov	r8, r2
 8002a7c:	4699      	mov	r9, r3
 8002a7e:	4623      	mov	r3, r4
 8002a80:	eb18 0303 	adds.w	r3, r8, r3
 8002a84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a88:	462b      	mov	r3, r5
 8002a8a:	eb49 0303 	adc.w	r3, r9, r3
 8002a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a9e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002aa2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	18db      	adds	r3, r3, r3
 8002aaa:	653b      	str	r3, [r7, #80]	@ 0x50
 8002aac:	4613      	mov	r3, r2
 8002aae:	eb42 0303 	adc.w	r3, r2, r3
 8002ab2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ab4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002ab8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002abc:	f7fd fbf0 	bl	80002a0 <__aeabi_uldivmod>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4b61      	ldr	r3, [pc, #388]	@ (8002c4c <UART_SetConfig+0x2d4>)
 8002ac6:	fba3 2302 	umull	r2, r3, r3, r2
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	011c      	lsls	r4, r3, #4
 8002ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ad8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002adc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002ae0:	4642      	mov	r2, r8
 8002ae2:	464b      	mov	r3, r9
 8002ae4:	1891      	adds	r1, r2, r2
 8002ae6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ae8:	415b      	adcs	r3, r3
 8002aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002aec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002af0:	4641      	mov	r1, r8
 8002af2:	eb12 0a01 	adds.w	sl, r2, r1
 8002af6:	4649      	mov	r1, r9
 8002af8:	eb43 0b01 	adc.w	fp, r3, r1
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b10:	4692      	mov	sl, r2
 8002b12:	469b      	mov	fp, r3
 8002b14:	4643      	mov	r3, r8
 8002b16:	eb1a 0303 	adds.w	r3, sl, r3
 8002b1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b1e:	464b      	mov	r3, r9
 8002b20:	eb4b 0303 	adc.w	r3, fp, r3
 8002b24:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b34:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002b38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	18db      	adds	r3, r3, r3
 8002b40:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b42:	4613      	mov	r3, r2
 8002b44:	eb42 0303 	adc.w	r3, r2, r3
 8002b48:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002b52:	f7fd fba5 	bl	80002a0 <__aeabi_uldivmod>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8002c4c <UART_SetConfig+0x2d4>)
 8002b5e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b62:	095b      	lsrs	r3, r3, #5
 8002b64:	2264      	movs	r2, #100	@ 0x64
 8002b66:	fb02 f303 	mul.w	r3, r2, r3
 8002b6a:	1acb      	subs	r3, r1, r3
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002b72:	4b36      	ldr	r3, [pc, #216]	@ (8002c4c <UART_SetConfig+0x2d4>)
 8002b74:	fba3 2302 	umull	r2, r3, r3, r2
 8002b78:	095b      	lsrs	r3, r3, #5
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002b80:	441c      	add	r4, r3
 8002b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b86:	2200      	movs	r2, #0
 8002b88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b8c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002b90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002b94:	4642      	mov	r2, r8
 8002b96:	464b      	mov	r3, r9
 8002b98:	1891      	adds	r1, r2, r2
 8002b9a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b9c:	415b      	adcs	r3, r3
 8002b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ba0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ba4:	4641      	mov	r1, r8
 8002ba6:	1851      	adds	r1, r2, r1
 8002ba8:	6339      	str	r1, [r7, #48]	@ 0x30
 8002baa:	4649      	mov	r1, r9
 8002bac:	414b      	adcs	r3, r1
 8002bae:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002bbc:	4659      	mov	r1, fp
 8002bbe:	00cb      	lsls	r3, r1, #3
 8002bc0:	4651      	mov	r1, sl
 8002bc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bc6:	4651      	mov	r1, sl
 8002bc8:	00ca      	lsls	r2, r1, #3
 8002bca:	4610      	mov	r0, r2
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4642      	mov	r2, r8
 8002bd2:	189b      	adds	r3, r3, r2
 8002bd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002bd8:	464b      	mov	r3, r9
 8002bda:	460a      	mov	r2, r1
 8002bdc:	eb42 0303 	adc.w	r3, r2, r3
 8002be0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002bf0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002bf4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	18db      	adds	r3, r3, r3
 8002bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bfe:	4613      	mov	r3, r2
 8002c00:	eb42 0303 	adc.w	r3, r2, r3
 8002c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002c0e:	f7fd fb47 	bl	80002a0 <__aeabi_uldivmod>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4b0d      	ldr	r3, [pc, #52]	@ (8002c4c <UART_SetConfig+0x2d4>)
 8002c18:	fba3 1302 	umull	r1, r3, r3, r2
 8002c1c:	095b      	lsrs	r3, r3, #5
 8002c1e:	2164      	movs	r1, #100	@ 0x64
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	3332      	adds	r3, #50	@ 0x32
 8002c2a:	4a08      	ldr	r2, [pc, #32]	@ (8002c4c <UART_SetConfig+0x2d4>)
 8002c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c30:	095b      	lsrs	r3, r3, #5
 8002c32:	f003 0207 	and.w	r2, r3, #7
 8002c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4422      	add	r2, r4
 8002c3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c40:	e106      	b.n	8002e50 <UART_SetConfig+0x4d8>
 8002c42:	bf00      	nop
 8002c44:	40011000 	.word	0x40011000
 8002c48:	40011400 	.word	0x40011400
 8002c4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c54:	2200      	movs	r2, #0
 8002c56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c5a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002c5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002c62:	4642      	mov	r2, r8
 8002c64:	464b      	mov	r3, r9
 8002c66:	1891      	adds	r1, r2, r2
 8002c68:	6239      	str	r1, [r7, #32]
 8002c6a:	415b      	adcs	r3, r3
 8002c6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c72:	4641      	mov	r1, r8
 8002c74:	1854      	adds	r4, r2, r1
 8002c76:	4649      	mov	r1, r9
 8002c78:	eb43 0501 	adc.w	r5, r3, r1
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	00eb      	lsls	r3, r5, #3
 8002c86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c8a:	00e2      	lsls	r2, r4, #3
 8002c8c:	4614      	mov	r4, r2
 8002c8e:	461d      	mov	r5, r3
 8002c90:	4643      	mov	r3, r8
 8002c92:	18e3      	adds	r3, r4, r3
 8002c94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c98:	464b      	mov	r3, r9
 8002c9a:	eb45 0303 	adc.w	r3, r5, r3
 8002c9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002cae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002cbe:	4629      	mov	r1, r5
 8002cc0:	008b      	lsls	r3, r1, #2
 8002cc2:	4621      	mov	r1, r4
 8002cc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cc8:	4621      	mov	r1, r4
 8002cca:	008a      	lsls	r2, r1, #2
 8002ccc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002cd0:	f7fd fae6 	bl	80002a0 <__aeabi_uldivmod>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4b60      	ldr	r3, [pc, #384]	@ (8002e5c <UART_SetConfig+0x4e4>)
 8002cda:	fba3 2302 	umull	r2, r3, r3, r2
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	011c      	lsls	r4, r3, #4
 8002ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002cec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002cf0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002cf4:	4642      	mov	r2, r8
 8002cf6:	464b      	mov	r3, r9
 8002cf8:	1891      	adds	r1, r2, r2
 8002cfa:	61b9      	str	r1, [r7, #24]
 8002cfc:	415b      	adcs	r3, r3
 8002cfe:	61fb      	str	r3, [r7, #28]
 8002d00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d04:	4641      	mov	r1, r8
 8002d06:	1851      	adds	r1, r2, r1
 8002d08:	6139      	str	r1, [r7, #16]
 8002d0a:	4649      	mov	r1, r9
 8002d0c:	414b      	adcs	r3, r1
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d1c:	4659      	mov	r1, fp
 8002d1e:	00cb      	lsls	r3, r1, #3
 8002d20:	4651      	mov	r1, sl
 8002d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d26:	4651      	mov	r1, sl
 8002d28:	00ca      	lsls	r2, r1, #3
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4603      	mov	r3, r0
 8002d30:	4642      	mov	r2, r8
 8002d32:	189b      	adds	r3, r3, r2
 8002d34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d38:	464b      	mov	r3, r9
 8002d3a:	460a      	mov	r2, r1
 8002d3c:	eb42 0303 	adc.w	r3, r2, r3
 8002d40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d4e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	f04f 0300 	mov.w	r3, #0
 8002d58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002d5c:	4649      	mov	r1, r9
 8002d5e:	008b      	lsls	r3, r1, #2
 8002d60:	4641      	mov	r1, r8
 8002d62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d66:	4641      	mov	r1, r8
 8002d68:	008a      	lsls	r2, r1, #2
 8002d6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d6e:	f7fd fa97 	bl	80002a0 <__aeabi_uldivmod>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4611      	mov	r1, r2
 8002d78:	4b38      	ldr	r3, [pc, #224]	@ (8002e5c <UART_SetConfig+0x4e4>)
 8002d7a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	2264      	movs	r2, #100	@ 0x64
 8002d82:	fb02 f303 	mul.w	r3, r2, r3
 8002d86:	1acb      	subs	r3, r1, r3
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	3332      	adds	r3, #50	@ 0x32
 8002d8c:	4a33      	ldr	r2, [pc, #204]	@ (8002e5c <UART_SetConfig+0x4e4>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d98:	441c      	add	r4, r3
 8002d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d9e:	2200      	movs	r2, #0
 8002da0:	673b      	str	r3, [r7, #112]	@ 0x70
 8002da2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002da4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002da8:	4642      	mov	r2, r8
 8002daa:	464b      	mov	r3, r9
 8002dac:	1891      	adds	r1, r2, r2
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	415b      	adcs	r3, r3
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002db8:	4641      	mov	r1, r8
 8002dba:	1851      	adds	r1, r2, r1
 8002dbc:	6039      	str	r1, [r7, #0]
 8002dbe:	4649      	mov	r1, r9
 8002dc0:	414b      	adcs	r3, r1
 8002dc2:	607b      	str	r3, [r7, #4]
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002dd0:	4659      	mov	r1, fp
 8002dd2:	00cb      	lsls	r3, r1, #3
 8002dd4:	4651      	mov	r1, sl
 8002dd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dda:	4651      	mov	r1, sl
 8002ddc:	00ca      	lsls	r2, r1, #3
 8002dde:	4610      	mov	r0, r2
 8002de0:	4619      	mov	r1, r3
 8002de2:	4603      	mov	r3, r0
 8002de4:	4642      	mov	r2, r8
 8002de6:	189b      	adds	r3, r3, r2
 8002de8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002dea:	464b      	mov	r3, r9
 8002dec:	460a      	mov	r2, r1
 8002dee:	eb42 0303 	adc.w	r3, r2, r3
 8002df2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	663b      	str	r3, [r7, #96]	@ 0x60
 8002dfe:	667a      	str	r2, [r7, #100]	@ 0x64
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002e0c:	4649      	mov	r1, r9
 8002e0e:	008b      	lsls	r3, r1, #2
 8002e10:	4641      	mov	r1, r8
 8002e12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e16:	4641      	mov	r1, r8
 8002e18:	008a      	lsls	r2, r1, #2
 8002e1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002e1e:	f7fd fa3f 	bl	80002a0 <__aeabi_uldivmod>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4b0d      	ldr	r3, [pc, #52]	@ (8002e5c <UART_SetConfig+0x4e4>)
 8002e28:	fba3 1302 	umull	r1, r3, r3, r2
 8002e2c:	095b      	lsrs	r3, r3, #5
 8002e2e:	2164      	movs	r1, #100	@ 0x64
 8002e30:	fb01 f303 	mul.w	r3, r1, r3
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	3332      	adds	r3, #50	@ 0x32
 8002e3a:	4a08      	ldr	r2, [pc, #32]	@ (8002e5c <UART_SetConfig+0x4e4>)
 8002e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e40:	095b      	lsrs	r3, r3, #5
 8002e42:	f003 020f 	and.w	r2, r3, #15
 8002e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4422      	add	r2, r4
 8002e4e:	609a      	str	r2, [r3, #8]
}
 8002e50:	bf00      	nop
 8002e52:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002e56:	46bd      	mov	sp, r7
 8002e58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e5c:	51eb851f 	.word	0x51eb851f

08002e60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002e64:	4904      	ldr	r1, [pc, #16]	@ (8002e78 <MX_FATFS_Init+0x18>)
 8002e66:	4805      	ldr	r0, [pc, #20]	@ (8002e7c <MX_FATFS_Init+0x1c>)
 8002e68:	f003 f920 	bl	80060ac <FATFS_LinkDriver>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	461a      	mov	r2, r3
 8002e70:	4b03      	ldr	r3, [pc, #12]	@ (8002e80 <MX_FATFS_Init+0x20>)
 8002e72:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002e74:	bf00      	nop
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	2000023c 	.word	0x2000023c
 8002e7c:	2000000c 	.word	0x2000000c
 8002e80:	20000238 	.word	0x20000238

08002e84 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002e88:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 f9d7 	bl	8003254 <USER_SPI_initialize>
 8002ea6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 fab3 	bl	8003428 <USER_SPI_status>
 8002ec2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	4603      	mov	r3, r0
 8002eda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8002edc:	7bf8      	ldrb	r0, [r7, #15]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	68b9      	ldr	r1, [r7, #8]
 8002ee4:	f000 fab6 	bl	8003454 <USER_SPI_read>
 8002ee8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b084      	sub	sp, #16
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	603b      	str	r3, [r7, #0]
 8002efe:	4603      	mov	r3, r0
 8002f00:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8002f02:	7bf8      	ldrb	r0, [r7, #15]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	68b9      	ldr	r1, [r7, #8]
 8002f0a:	f000 fb09 	bl	8003520 <USER_SPI_write>
 8002f0e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	603a      	str	r2, [r7, #0]
 8002f22:	71fb      	strb	r3, [r7, #7]
 8002f24:	460b      	mov	r3, r1
 8002f26:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8002f28:	79b9      	ldrb	r1, [r7, #6]
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fb72 	bl	8003618 <USER_SPI_ioctl>
 8002f34:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002f48:	f7fd ff68 	bl	8000e1c <HAL_GetTick>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	4a04      	ldr	r2, [pc, #16]	@ (8002f60 <SPI_Timer_On+0x20>)
 8002f50:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8002f52:	4a04      	ldr	r2, [pc, #16]	@ (8002f64 <SPI_Timer_On+0x24>)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6013      	str	r3, [r2, #0]
}
 8002f58:	bf00      	nop
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20000244 	.word	0x20000244
 8002f64:	20000248 	.word	0x20000248

08002f68 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002f6c:	f7fd ff56 	bl	8000e1c <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	4b06      	ldr	r3, [pc, #24]	@ (8002f8c <SPI_Timer_Status+0x24>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	1ad2      	subs	r2, r2, r3
 8002f78:	4b05      	ldr	r3, [pc, #20]	@ (8002f90 <SPI_Timer_Status+0x28>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	bf34      	ite	cc
 8002f80:	2301      	movcc	r3, #1
 8002f82:	2300      	movcs	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000244 	.word	0x20000244
 8002f90:	20000248 	.word	0x20000248

08002f94 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8002f9e:	f107 020f 	add.w	r2, r7, #15
 8002fa2:	1df9      	adds	r1, r7, #7
 8002fa4:	2332      	movs	r3, #50	@ 0x32
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	2301      	movs	r3, #1
 8002faa:	4804      	ldr	r0, [pc, #16]	@ (8002fbc <xchg_spi+0x28>)
 8002fac:	f7ff f8c7 	bl	800213e <HAL_SPI_TransmitReceive>
    return rxDat;
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000090 	.word	0x20000090

08002fc0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002fc0:	b590      	push	{r4, r7, lr}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	e00a      	b.n	8002fe6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	18d4      	adds	r4, r2, r3
 8002fd6:	20ff      	movs	r0, #255	@ 0xff
 8002fd8:	f7ff ffdc 	bl	8002f94 <xchg_spi>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d3f0      	bcc.n	8002fd0 <rcvr_spi_multi+0x10>
	}
}
 8002fee:	bf00      	nop
 8002ff0:	bf00      	nop
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd90      	pop	{r4, r7, pc}

08002ff8 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	b29a      	uxth	r2, r3
 8003006:	f04f 33ff 	mov.w	r3, #4294967295
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4803      	ldr	r0, [pc, #12]	@ (800301c <xmit_spi_multi+0x24>)
 800300e:	f7fe ff52 	bl	8001eb6 <HAL_SPI_Transmit>
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20000090 	.word	0x20000090

08003020 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8003028:	f7fd fef8 	bl	8000e1c <HAL_GetTick>
 800302c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8003032:	20ff      	movs	r0, #255	@ 0xff
 8003034:	f7ff ffae 	bl	8002f94 <xchg_spi>
 8003038:	4603      	mov	r3, r0
 800303a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	2bff      	cmp	r3, #255	@ 0xff
 8003040:	d007      	beq.n	8003052 <wait_ready+0x32>
 8003042:	f7fd feeb 	bl	8000e1c <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	429a      	cmp	r2, r3
 8003050:	d8ef      	bhi.n	8003032 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	2bff      	cmp	r3, #255	@ 0xff
 8003056:	bf0c      	ite	eq
 8003058:	2301      	moveq	r3, #1
 800305a:	2300      	movne	r3, #0
 800305c:	b2db      	uxtb	r3, r3
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800306c:	2201      	movs	r2, #1
 800306e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003072:	4804      	ldr	r0, [pc, #16]	@ (8003084 <despiselect+0x1c>)
 8003074:	f7fe f994 	bl	80013a0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8003078:	20ff      	movs	r0, #255	@ 0xff
 800307a:	f7ff ff8b 	bl	8002f94 <xchg_spi>

}
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40021800 	.word	0x40021800

08003088 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800308c:	2200      	movs	r2, #0
 800308e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003092:	480a      	ldr	r0, [pc, #40]	@ (80030bc <spiselect+0x34>)
 8003094:	f7fe f984 	bl	80013a0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8003098:	20ff      	movs	r0, #255	@ 0xff
 800309a:	f7ff ff7b 	bl	8002f94 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800309e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80030a2:	f7ff ffbd 	bl	8003020 <wait_ready>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <spiselect+0x28>
 80030ac:	2301      	movs	r3, #1
 80030ae:	e002      	b.n	80030b6 <spiselect+0x2e>

	despiselect();
 80030b0:	f7ff ffda 	bl	8003068 <despiselect>
	return 0;	/* Timeout */
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40021800 	.word	0x40021800

080030c0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80030ca:	20c8      	movs	r0, #200	@ 0xc8
 80030cc:	f7ff ff38 	bl	8002f40 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80030d0:	20ff      	movs	r0, #255	@ 0xff
 80030d2:	f7ff ff5f 	bl	8002f94 <xchg_spi>
 80030d6:	4603      	mov	r3, r0
 80030d8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80030da:	7bfb      	ldrb	r3, [r7, #15]
 80030dc:	2bff      	cmp	r3, #255	@ 0xff
 80030de:	d104      	bne.n	80030ea <rcvr_datablock+0x2a>
 80030e0:	f7ff ff42 	bl	8002f68 <SPI_Timer_Status>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f2      	bne.n	80030d0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	2bfe      	cmp	r3, #254	@ 0xfe
 80030ee:	d001      	beq.n	80030f4 <rcvr_datablock+0x34>
 80030f0:	2300      	movs	r3, #0
 80030f2:	e00a      	b.n	800310a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80030f4:	6839      	ldr	r1, [r7, #0]
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff ff62 	bl	8002fc0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80030fc:	20ff      	movs	r0, #255	@ 0xff
 80030fe:	f7ff ff49 	bl	8002f94 <xchg_spi>
 8003102:	20ff      	movs	r0, #255	@ 0xff
 8003104:	f7ff ff46 	bl	8002f94 <xchg_spi>

	return 1;						/* Function succeeded */
 8003108:	2301      	movs	r3, #1
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	460b      	mov	r3, r1
 800311c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800311e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003122:	f7ff ff7d 	bl	8003020 <wait_ready>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <xmit_datablock+0x1e>
 800312c:	2300      	movs	r3, #0
 800312e:	e01e      	b.n	800316e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff ff2e 	bl	8002f94 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003138:	78fb      	ldrb	r3, [r7, #3]
 800313a:	2bfd      	cmp	r3, #253	@ 0xfd
 800313c:	d016      	beq.n	800316c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800313e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff ff58 	bl	8002ff8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003148:	20ff      	movs	r0, #255	@ 0xff
 800314a:	f7ff ff23 	bl	8002f94 <xchg_spi>
 800314e:	20ff      	movs	r0, #255	@ 0xff
 8003150:	f7ff ff20 	bl	8002f94 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003154:	20ff      	movs	r0, #255	@ 0xff
 8003156:	f7ff ff1d 	bl	8002f94 <xchg_spi>
 800315a:	4603      	mov	r3, r0
 800315c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800315e:	7bfb      	ldrb	r3, [r7, #15]
 8003160:	f003 031f 	and.w	r3, r3, #31
 8003164:	2b05      	cmp	r3, #5
 8003166:	d001      	beq.n	800316c <xmit_datablock+0x5a>
 8003168:	2300      	movs	r3, #0
 800316a:	e000      	b.n	800316e <xmit_datablock+0x5c>
	}
	return 1;
 800316c:	2301      	movs	r3, #1
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	4603      	mov	r3, r0
 800317e:	6039      	str	r1, [r7, #0]
 8003180:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	2b00      	cmp	r3, #0
 8003188:	da0e      	bge.n	80031a8 <send_cmd+0x32>
		cmd &= 0x7F;
 800318a:	79fb      	ldrb	r3, [r7, #7]
 800318c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003190:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8003192:	2100      	movs	r1, #0
 8003194:	2037      	movs	r0, #55	@ 0x37
 8003196:	f7ff ffee 	bl	8003176 <send_cmd>
 800319a:	4603      	mov	r3, r0
 800319c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800319e:	7bbb      	ldrb	r3, [r7, #14]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d901      	bls.n	80031a8 <send_cmd+0x32>
 80031a4:	7bbb      	ldrb	r3, [r7, #14]
 80031a6:	e051      	b.n	800324c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80031a8:	79fb      	ldrb	r3, [r7, #7]
 80031aa:	2b0c      	cmp	r3, #12
 80031ac:	d008      	beq.n	80031c0 <send_cmd+0x4a>
		despiselect();
 80031ae:	f7ff ff5b 	bl	8003068 <despiselect>
		if (!spiselect()) return 0xFF;
 80031b2:	f7ff ff69 	bl	8003088 <spiselect>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <send_cmd+0x4a>
 80031bc:	23ff      	movs	r3, #255	@ 0xff
 80031be:	e045      	b.n	800324c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fee3 	bl	8002f94 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	0e1b      	lsrs	r3, r3, #24
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fedd 	bl	8002f94 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	0c1b      	lsrs	r3, r3, #16
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff fed7 	bl	8002f94 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	0a1b      	lsrs	r3, r3, #8
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff fed1 	bl	8002f94 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff fecc 	bl	8002f94 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80031fc:	2301      	movs	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <send_cmd+0x94>
 8003206:	2395      	movs	r3, #149	@ 0x95
 8003208:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	2b08      	cmp	r3, #8
 800320e:	d101      	bne.n	8003214 <send_cmd+0x9e>
 8003210:	2387      	movs	r3, #135	@ 0x87
 8003212:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff febc 	bl	8002f94 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800321c:	79fb      	ldrb	r3, [r7, #7]
 800321e:	2b0c      	cmp	r3, #12
 8003220:	d102      	bne.n	8003228 <send_cmd+0xb2>
 8003222:	20ff      	movs	r0, #255	@ 0xff
 8003224:	f7ff feb6 	bl	8002f94 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003228:	230a      	movs	r3, #10
 800322a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800322c:	20ff      	movs	r0, #255	@ 0xff
 800322e:	f7ff feb1 	bl	8002f94 <xchg_spi>
 8003232:	4603      	mov	r3, r0
 8003234:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003236:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800323a:	2b00      	cmp	r3, #0
 800323c:	da05      	bge.n	800324a <send_cmd+0xd4>
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	3b01      	subs	r3, #1
 8003242:	73fb      	strb	r3, [r7, #15]
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <send_cmd+0xb6>

	return res;							/* Return received response */
 800324a:	7bbb      	ldrb	r3, [r7, #14]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003254:	b590      	push	{r4, r7, lr}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <USER_SPI_initialize+0x14>
 8003264:	2301      	movs	r3, #1
 8003266:	e0d4      	b.n	8003412 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003268:	4b6c      	ldr	r3, [pc, #432]	@ (800341c <USER_SPI_initialize+0x1c8>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <USER_SPI_initialize+0x2a>
 8003276:	4b69      	ldr	r3, [pc, #420]	@ (800341c <USER_SPI_initialize+0x1c8>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	e0c9      	b.n	8003412 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800327e:	4b68      	ldr	r3, [pc, #416]	@ (8003420 <USER_SPI_initialize+0x1cc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	4b66      	ldr	r3, [pc, #408]	@ (8003420 <USER_SPI_initialize+0x1cc>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 0238 	orr.w	r2, r2, #56	@ 0x38
 800328c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800328e:	230a      	movs	r3, #10
 8003290:	73fb      	strb	r3, [r7, #15]
 8003292:	e005      	b.n	80032a0 <USER_SPI_initialize+0x4c>
 8003294:	20ff      	movs	r0, #255	@ 0xff
 8003296:	f7ff fe7d 	bl	8002f94 <xchg_spi>
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	3b01      	subs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f6      	bne.n	8003294 <USER_SPI_initialize+0x40>

	ty = 0;
 80032a6:	2300      	movs	r3, #0
 80032a8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80032aa:	2100      	movs	r1, #0
 80032ac:	2000      	movs	r0, #0
 80032ae:	f7ff ff62 	bl	8003176 <send_cmd>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	f040 808b 	bne.w	80033d0 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80032ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80032be:	f7ff fe3f 	bl	8002f40 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80032c2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80032c6:	2008      	movs	r0, #8
 80032c8:	f7ff ff55 	bl	8003176 <send_cmd>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d151      	bne.n	8003376 <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80032d2:	2300      	movs	r3, #0
 80032d4:	73fb      	strb	r3, [r7, #15]
 80032d6:	e00d      	b.n	80032f4 <USER_SPI_initialize+0xa0>
 80032d8:	7bfc      	ldrb	r4, [r7, #15]
 80032da:	20ff      	movs	r0, #255	@ 0xff
 80032dc:	f7ff fe5a 	bl	8002f94 <xchg_spi>
 80032e0:	4603      	mov	r3, r0
 80032e2:	461a      	mov	r2, r3
 80032e4:	f104 0310 	add.w	r3, r4, #16
 80032e8:	443b      	add	r3, r7
 80032ea:	f803 2c08 	strb.w	r2, [r3, #-8]
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	3301      	adds	r3, #1
 80032f2:	73fb      	strb	r3, [r7, #15]
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d9ee      	bls.n	80032d8 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80032fa:	7abb      	ldrb	r3, [r7, #10]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d167      	bne.n	80033d0 <USER_SPI_initialize+0x17c>
 8003300:	7afb      	ldrb	r3, [r7, #11]
 8003302:	2baa      	cmp	r3, #170	@ 0xaa
 8003304:	d164      	bne.n	80033d0 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003306:	bf00      	nop
 8003308:	f7ff fe2e 	bl	8002f68 <SPI_Timer_Status>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d007      	beq.n	8003322 <USER_SPI_initialize+0xce>
 8003312:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003316:	20a9      	movs	r0, #169	@ 0xa9
 8003318:	f7ff ff2d 	bl	8003176 <send_cmd>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f2      	bne.n	8003308 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003322:	f7ff fe21 	bl	8002f68 <SPI_Timer_Status>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d051      	beq.n	80033d0 <USER_SPI_initialize+0x17c>
 800332c:	2100      	movs	r1, #0
 800332e:	203a      	movs	r0, #58	@ 0x3a
 8003330:	f7ff ff21 	bl	8003176 <send_cmd>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d14a      	bne.n	80033d0 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800333a:	2300      	movs	r3, #0
 800333c:	73fb      	strb	r3, [r7, #15]
 800333e:	e00d      	b.n	800335c <USER_SPI_initialize+0x108>
 8003340:	7bfc      	ldrb	r4, [r7, #15]
 8003342:	20ff      	movs	r0, #255	@ 0xff
 8003344:	f7ff fe26 	bl	8002f94 <xchg_spi>
 8003348:	4603      	mov	r3, r0
 800334a:	461a      	mov	r2, r3
 800334c:	f104 0310 	add.w	r3, r4, #16
 8003350:	443b      	add	r3, r7
 8003352:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	3301      	adds	r3, #1
 800335a:	73fb      	strb	r3, [r7, #15]
 800335c:	7bfb      	ldrb	r3, [r7, #15]
 800335e:	2b03      	cmp	r3, #3
 8003360:	d9ee      	bls.n	8003340 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003362:	7a3b      	ldrb	r3, [r7, #8]
 8003364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <USER_SPI_initialize+0x11c>
 800336c:	230c      	movs	r3, #12
 800336e:	e000      	b.n	8003372 <USER_SPI_initialize+0x11e>
 8003370:	2304      	movs	r3, #4
 8003372:	737b      	strb	r3, [r7, #13]
 8003374:	e02c      	b.n	80033d0 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003376:	2100      	movs	r1, #0
 8003378:	20a9      	movs	r0, #169	@ 0xa9
 800337a:	f7ff fefc 	bl	8003176 <send_cmd>
 800337e:	4603      	mov	r3, r0
 8003380:	2b01      	cmp	r3, #1
 8003382:	d804      	bhi.n	800338e <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003384:	2302      	movs	r3, #2
 8003386:	737b      	strb	r3, [r7, #13]
 8003388:	23a9      	movs	r3, #169	@ 0xa9
 800338a:	73bb      	strb	r3, [r7, #14]
 800338c:	e003      	b.n	8003396 <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800338e:	2301      	movs	r3, #1
 8003390:	737b      	strb	r3, [r7, #13]
 8003392:	2301      	movs	r3, #1
 8003394:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003396:	bf00      	nop
 8003398:	f7ff fde6 	bl	8002f68 <SPI_Timer_Status>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d007      	beq.n	80033b2 <USER_SPI_initialize+0x15e>
 80033a2:	7bbb      	ldrb	r3, [r7, #14]
 80033a4:	2100      	movs	r1, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff fee5 	bl	8003176 <send_cmd>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f2      	bne.n	8003398 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80033b2:	f7ff fdd9 	bl	8002f68 <SPI_Timer_Status>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d007      	beq.n	80033cc <USER_SPI_initialize+0x178>
 80033bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80033c0:	2010      	movs	r0, #16
 80033c2:	f7ff fed8 	bl	8003176 <send_cmd>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <USER_SPI_initialize+0x17c>
				ty = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80033d0:	4a14      	ldr	r2, [pc, #80]	@ (8003424 <USER_SPI_initialize+0x1d0>)
 80033d2:	7b7b      	ldrb	r3, [r7, #13]
 80033d4:	7013      	strb	r3, [r2, #0]
	despiselect();
 80033d6:	f7ff fe47 	bl	8003068 <despiselect>

	if (ty) {			/* OK */
 80033da:	7b7b      	ldrb	r3, [r7, #13]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d012      	beq.n	8003406 <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 80033e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003420 <USER_SPI_initialize+0x1cc>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80033ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003420 <USER_SPI_initialize+0x1cc>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0218 	orr.w	r2, r2, #24
 80033f2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80033f4:	4b09      	ldr	r3, [pc, #36]	@ (800341c <USER_SPI_initialize+0x1c8>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	f023 0301 	bic.w	r3, r3, #1
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	4b06      	ldr	r3, [pc, #24]	@ (800341c <USER_SPI_initialize+0x1c8>)
 8003402:	701a      	strb	r2, [r3, #0]
 8003404:	e002      	b.n	800340c <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003406:	4b05      	ldr	r3, [pc, #20]	@ (800341c <USER_SPI_initialize+0x1c8>)
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800340c:	4b03      	ldr	r3, [pc, #12]	@ (800341c <USER_SPI_initialize+0x1c8>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	b2db      	uxtb	r3, r3
}
 8003412:	4618      	mov	r0, r3
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	bd90      	pop	{r4, r7, pc}
 800341a:	bf00      	nop
 800341c:	20000020 	.word	0x20000020
 8003420:	20000090 	.word	0x20000090
 8003424:	20000240 	.word	0x20000240

08003428 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <USER_SPI_status+0x14>
 8003438:	2301      	movs	r3, #1
 800343a:	e002      	b.n	8003442 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800343c:	4b04      	ldr	r3, [pc, #16]	@ (8003450 <USER_SPI_status+0x28>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	b2db      	uxtb	r3, r3
}
 8003442:	4618      	mov	r0, r3
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	20000020 	.word	0x20000020

08003454 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	607a      	str	r2, [r7, #4]
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	4603      	mov	r3, r0
 8003462:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003464:	7bfb      	ldrb	r3, [r7, #15]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d102      	bne.n	8003470 <USER_SPI_read+0x1c>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <USER_SPI_read+0x20>
 8003470:	2304      	movs	r3, #4
 8003472:	e04d      	b.n	8003510 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003474:	4b28      	ldr	r3, [pc, #160]	@ (8003518 <USER_SPI_read+0xc4>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	b2db      	uxtb	r3, r3
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <USER_SPI_read+0x32>
 8003482:	2303      	movs	r3, #3
 8003484:	e044      	b.n	8003510 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003486:	4b25      	ldr	r3, [pc, #148]	@ (800351c <USER_SPI_read+0xc8>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d102      	bne.n	8003498 <USER_SPI_read+0x44>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	025b      	lsls	r3, r3, #9
 8003496:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d111      	bne.n	80034c2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	2011      	movs	r0, #17
 80034a2:	f7ff fe68 	bl	8003176 <send_cmd>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d129      	bne.n	8003500 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80034ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80034b0:	68b8      	ldr	r0, [r7, #8]
 80034b2:	f7ff fe05 	bl	80030c0 <rcvr_datablock>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d021      	beq.n	8003500 <USER_SPI_read+0xac>
			count = 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	e01e      	b.n	8003500 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	2012      	movs	r0, #18
 80034c6:	f7ff fe56 	bl	8003176 <send_cmd>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d117      	bne.n	8003500 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80034d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80034d4:	68b8      	ldr	r0, [r7, #8]
 80034d6:	f7ff fdf3 	bl	80030c0 <rcvr_datablock>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <USER_SPI_read+0xa2>
				buff += 512;
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80034e6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	603b      	str	r3, [r7, #0]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1ed      	bne.n	80034d0 <USER_SPI_read+0x7c>
 80034f4:	e000      	b.n	80034f8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80034f6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80034f8:	2100      	movs	r1, #0
 80034fa:	200c      	movs	r0, #12
 80034fc:	f7ff fe3b 	bl	8003176 <send_cmd>
		}
	}
	despiselect();
 8003500:	f7ff fdb2 	bl	8003068 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	bf14      	ite	ne
 800350a:	2301      	movne	r3, #1
 800350c:	2300      	moveq	r3, #0
 800350e:	b2db      	uxtb	r3, r3
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000020 	.word	0x20000020
 800351c:	20000240 	.word	0x20000240

08003520 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	607a      	str	r2, [r7, #4]
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	4603      	mov	r3, r0
 800352e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003530:	7bfb      	ldrb	r3, [r7, #15]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d102      	bne.n	800353c <USER_SPI_write+0x1c>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <USER_SPI_write+0x20>
 800353c:	2304      	movs	r3, #4
 800353e:	e063      	b.n	8003608 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003540:	4b33      	ldr	r3, [pc, #204]	@ (8003610 <USER_SPI_write+0xf0>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <USER_SPI_write+0x32>
 800354e:	2303      	movs	r3, #3
 8003550:	e05a      	b.n	8003608 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003552:	4b2f      	ldr	r3, [pc, #188]	@ (8003610 <USER_SPI_write+0xf0>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <USER_SPI_write+0x44>
 8003560:	2302      	movs	r3, #2
 8003562:	e051      	b.n	8003608 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003564:	4b2b      	ldr	r3, [pc, #172]	@ (8003614 <USER_SPI_write+0xf4>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b00      	cmp	r3, #0
 800356e:	d102      	bne.n	8003576 <USER_SPI_write+0x56>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	025b      	lsls	r3, r3, #9
 8003574:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d110      	bne.n	800359e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	2018      	movs	r0, #24
 8003580:	f7ff fdf9 	bl	8003176 <send_cmd>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d136      	bne.n	80035f8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800358a:	21fe      	movs	r1, #254	@ 0xfe
 800358c:	68b8      	ldr	r0, [r7, #8]
 800358e:	f7ff fdc0 	bl	8003112 <xmit_datablock>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d02f      	beq.n	80035f8 <USER_SPI_write+0xd8>
			count = 0;
 8003598:	2300      	movs	r3, #0
 800359a:	603b      	str	r3, [r7, #0]
 800359c:	e02c      	b.n	80035f8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800359e:	4b1d      	ldr	r3, [pc, #116]	@ (8003614 <USER_SPI_write+0xf4>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	f003 0306 	and.w	r3, r3, #6
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <USER_SPI_write+0x92>
 80035aa:	6839      	ldr	r1, [r7, #0]
 80035ac:	2097      	movs	r0, #151	@ 0x97
 80035ae:	f7ff fde2 	bl	8003176 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	2019      	movs	r0, #25
 80035b6:	f7ff fdde 	bl	8003176 <send_cmd>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d11b      	bne.n	80035f8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80035c0:	21fc      	movs	r1, #252	@ 0xfc
 80035c2:	68b8      	ldr	r0, [r7, #8]
 80035c4:	f7ff fda5 	bl	8003112 <xmit_datablock>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <USER_SPI_write+0xc4>
				buff += 512;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80035d4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	3b01      	subs	r3, #1
 80035da:	603b      	str	r3, [r7, #0]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1ee      	bne.n	80035c0 <USER_SPI_write+0xa0>
 80035e2:	e000      	b.n	80035e6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80035e4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80035e6:	21fd      	movs	r1, #253	@ 0xfd
 80035e8:	2000      	movs	r0, #0
 80035ea:	f7ff fd92 	bl	8003112 <xmit_datablock>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <USER_SPI_write+0xd8>
 80035f4:	2301      	movs	r3, #1
 80035f6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80035f8:	f7ff fd36 	bl	8003068 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	bf14      	ite	ne
 8003602:	2301      	movne	r3, #1
 8003604:	2300      	moveq	r3, #0
 8003606:	b2db      	uxtb	r3, r3
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	20000020 	.word	0x20000020
 8003614:	20000240 	.word	0x20000240

08003618 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08c      	sub	sp, #48	@ 0x30
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	603a      	str	r2, [r7, #0]
 8003622:	71fb      	strb	r3, [r7, #7]
 8003624:	460b      	mov	r3, r1
 8003626:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <USER_SPI_ioctl+0x1a>
 800362e:	2304      	movs	r3, #4
 8003630:	e15a      	b.n	80038e8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003632:	4baf      	ldr	r3, [pc, #700]	@ (80038f0 <USER_SPI_ioctl+0x2d8>)
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	b2db      	uxtb	r3, r3
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <USER_SPI_ioctl+0x2c>
 8003640:	2303      	movs	r3, #3
 8003642:	e151      	b.n	80038e8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800364a:	79bb      	ldrb	r3, [r7, #6]
 800364c:	2b04      	cmp	r3, #4
 800364e:	f200 8136 	bhi.w	80038be <USER_SPI_ioctl+0x2a6>
 8003652:	a201      	add	r2, pc, #4	@ (adr r2, 8003658 <USER_SPI_ioctl+0x40>)
 8003654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003658:	0800366d 	.word	0x0800366d
 800365c:	08003681 	.word	0x08003681
 8003660:	080038bf 	.word	0x080038bf
 8003664:	0800372d 	.word	0x0800372d
 8003668:	08003823 	.word	0x08003823
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800366c:	f7ff fd0c 	bl	8003088 <spiselect>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 8127 	beq.w	80038c6 <USER_SPI_ioctl+0x2ae>
 8003678:	2300      	movs	r3, #0
 800367a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800367e:	e122      	b.n	80038c6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003680:	2100      	movs	r1, #0
 8003682:	2009      	movs	r0, #9
 8003684:	f7ff fd77 	bl	8003176 <send_cmd>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	f040 811d 	bne.w	80038ca <USER_SPI_ioctl+0x2b2>
 8003690:	f107 030c 	add.w	r3, r7, #12
 8003694:	2110      	movs	r1, #16
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff fd12 	bl	80030c0 <rcvr_datablock>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 8113 	beq.w	80038ca <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80036a4:	7b3b      	ldrb	r3, [r7, #12]
 80036a6:	099b      	lsrs	r3, r3, #6
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d111      	bne.n	80036d2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80036ae:	7d7b      	ldrb	r3, [r7, #21]
 80036b0:	461a      	mov	r2, r3
 80036b2:	7d3b      	ldrb	r3, [r7, #20]
 80036b4:	021b      	lsls	r3, r3, #8
 80036b6:	4413      	add	r3, r2
 80036b8:	461a      	mov	r2, r3
 80036ba:	7cfb      	ldrb	r3, [r7, #19]
 80036bc:	041b      	lsls	r3, r3, #16
 80036be:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80036c2:	4413      	add	r3, r2
 80036c4:	3301      	adds	r3, #1
 80036c6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	029a      	lsls	r2, r3, #10
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	e028      	b.n	8003724 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80036d2:	7c7b      	ldrb	r3, [r7, #17]
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	7dbb      	ldrb	r3, [r7, #22]
 80036dc:	09db      	lsrs	r3, r3, #7
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	4413      	add	r3, r2
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	7d7b      	ldrb	r3, [r7, #21]
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	f003 0306 	and.w	r3, r3, #6
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	4413      	add	r3, r2
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	3302      	adds	r3, #2
 80036f6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80036fa:	7d3b      	ldrb	r3, [r7, #20]
 80036fc:	099b      	lsrs	r3, r3, #6
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	461a      	mov	r2, r3
 8003702:	7cfb      	ldrb	r3, [r7, #19]
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	441a      	add	r2, r3
 8003708:	7cbb      	ldrb	r3, [r7, #18]
 800370a:	029b      	lsls	r3, r3, #10
 800370c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003710:	4413      	add	r3, r2
 8003712:	3301      	adds	r3, #1
 8003714:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8003716:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800371a:	3b09      	subs	r3, #9
 800371c:	69fa      	ldr	r2, [r7, #28]
 800371e:	409a      	lsls	r2, r3
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8003724:	2300      	movs	r3, #0
 8003726:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800372a:	e0ce      	b.n	80038ca <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800372c:	4b71      	ldr	r3, [pc, #452]	@ (80038f4 <USER_SPI_ioctl+0x2dc>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	d031      	beq.n	800379c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003738:	2100      	movs	r1, #0
 800373a:	208d      	movs	r0, #141	@ 0x8d
 800373c:	f7ff fd1b 	bl	8003176 <send_cmd>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	f040 80c3 	bne.w	80038ce <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8003748:	20ff      	movs	r0, #255	@ 0xff
 800374a:	f7ff fc23 	bl	8002f94 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800374e:	f107 030c 	add.w	r3, r7, #12
 8003752:	2110      	movs	r1, #16
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff fcb3 	bl	80030c0 <rcvr_datablock>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 80b6 	beq.w	80038ce <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8003762:	2330      	movs	r3, #48	@ 0x30
 8003764:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8003768:	e007      	b.n	800377a <USER_SPI_ioctl+0x162>
 800376a:	20ff      	movs	r0, #255	@ 0xff
 800376c:	f7ff fc12 	bl	8002f94 <xchg_spi>
 8003770:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003774:	3b01      	subs	r3, #1
 8003776:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800377a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f3      	bne.n	800376a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8003782:	7dbb      	ldrb	r3, [r7, #22]
 8003784:	091b      	lsrs	r3, r3, #4
 8003786:	b2db      	uxtb	r3, r3
 8003788:	461a      	mov	r2, r3
 800378a:	2310      	movs	r3, #16
 800378c:	fa03 f202 	lsl.w	r2, r3, r2
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800379a:	e098      	b.n	80038ce <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800379c:	2100      	movs	r1, #0
 800379e:	2009      	movs	r0, #9
 80037a0:	f7ff fce9 	bl	8003176 <send_cmd>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f040 8091 	bne.w	80038ce <USER_SPI_ioctl+0x2b6>
 80037ac:	f107 030c 	add.w	r3, r7, #12
 80037b0:	2110      	movs	r1, #16
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff fc84 	bl	80030c0 <rcvr_datablock>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 8087 	beq.w	80038ce <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80037c0:	4b4c      	ldr	r3, [pc, #304]	@ (80038f4 <USER_SPI_ioctl+0x2dc>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d012      	beq.n	80037f2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80037cc:	7dbb      	ldrb	r3, [r7, #22]
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80037d4:	7dfa      	ldrb	r2, [r7, #23]
 80037d6:	09d2      	lsrs	r2, r2, #7
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	4413      	add	r3, r2
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	7e7b      	ldrb	r3, [r7, #25]
 80037e0:	099b      	lsrs	r3, r3, #6
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	461a      	mov	r2, r3
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	e013      	b.n	800381a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80037f2:	7dbb      	ldrb	r3, [r7, #22]
 80037f4:	109b      	asrs	r3, r3, #2
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	f003 031f 	and.w	r3, r3, #31
 80037fc:	3301      	adds	r3, #1
 80037fe:	7dfa      	ldrb	r2, [r7, #23]
 8003800:	00d2      	lsls	r2, r2, #3
 8003802:	f002 0218 	and.w	r2, r2, #24
 8003806:	7df9      	ldrb	r1, [r7, #23]
 8003808:	0949      	lsrs	r1, r1, #5
 800380a:	b2c9      	uxtb	r1, r1
 800380c:	440a      	add	r2, r1
 800380e:	3201      	adds	r2, #1
 8003810:	fb02 f303 	mul.w	r3, r2, r3
 8003814:	461a      	mov	r2, r3
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8003820:	e055      	b.n	80038ce <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003822:	4b34      	ldr	r3, [pc, #208]	@ (80038f4 <USER_SPI_ioctl+0x2dc>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	f003 0306 	and.w	r3, r3, #6
 800382a:	2b00      	cmp	r3, #0
 800382c:	d051      	beq.n	80038d2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800382e:	f107 020c 	add.w	r2, r7, #12
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	210b      	movs	r1, #11
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff feee 	bl	8003618 <USER_SPI_ioctl>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d149      	bne.n	80038d6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003842:	7b3b      	ldrb	r3, [r7, #12]
 8003844:	099b      	lsrs	r3, r3, #6
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d104      	bne.n	8003856 <USER_SPI_ioctl+0x23e>
 800384c:	7dbb      	ldrb	r3, [r7, #22]
 800384e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003852:	2b00      	cmp	r3, #0
 8003854:	d041      	beq.n	80038da <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	623b      	str	r3, [r7, #32]
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8003866:	4b23      	ldr	r3, [pc, #140]	@ (80038f4 <USER_SPI_ioctl+0x2dc>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d105      	bne.n	800387e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8003872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003874:	025b      	lsls	r3, r3, #9
 8003876:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387a:	025b      	lsls	r3, r3, #9
 800387c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800387e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003880:	2020      	movs	r0, #32
 8003882:	f7ff fc78 	bl	8003176 <send_cmd>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d128      	bne.n	80038de <USER_SPI_ioctl+0x2c6>
 800388c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800388e:	2021      	movs	r0, #33	@ 0x21
 8003890:	f7ff fc71 	bl	8003176 <send_cmd>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d121      	bne.n	80038de <USER_SPI_ioctl+0x2c6>
 800389a:	2100      	movs	r1, #0
 800389c:	2026      	movs	r0, #38	@ 0x26
 800389e:	f7ff fc6a 	bl	8003176 <send_cmd>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d11a      	bne.n	80038de <USER_SPI_ioctl+0x2c6>
 80038a8:	f247 5030 	movw	r0, #30000	@ 0x7530
 80038ac:	f7ff fbb8 	bl	8003020 <wait_ready>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d013      	beq.n	80038de <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80038b6:	2300      	movs	r3, #0
 80038b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80038bc:	e00f      	b.n	80038de <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80038be:	2304      	movs	r3, #4
 80038c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80038c4:	e00c      	b.n	80038e0 <USER_SPI_ioctl+0x2c8>
		break;
 80038c6:	bf00      	nop
 80038c8:	e00a      	b.n	80038e0 <USER_SPI_ioctl+0x2c8>
		break;
 80038ca:	bf00      	nop
 80038cc:	e008      	b.n	80038e0 <USER_SPI_ioctl+0x2c8>
		break;
 80038ce:	bf00      	nop
 80038d0:	e006      	b.n	80038e0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80038d2:	bf00      	nop
 80038d4:	e004      	b.n	80038e0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80038d6:	bf00      	nop
 80038d8:	e002      	b.n	80038e0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80038da:	bf00      	nop
 80038dc:	e000      	b.n	80038e0 <USER_SPI_ioctl+0x2c8>
		break;
 80038de:	bf00      	nop
	}

	despiselect();
 80038e0:	f7ff fbc2 	bl	8003068 <despiselect>

	return res;
 80038e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3730      	adds	r7, #48	@ 0x30
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	20000020 	.word	0x20000020
 80038f4:	20000240 	.word	0x20000240

080038f8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	4a08      	ldr	r2, [pc, #32]	@ (8003928 <disk_status+0x30>)
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	79fa      	ldrb	r2, [r7, #7]
 8003910:	4905      	ldr	r1, [pc, #20]	@ (8003928 <disk_status+0x30>)
 8003912:	440a      	add	r2, r1
 8003914:	7a12      	ldrb	r2, [r2, #8]
 8003916:	4610      	mov	r0, r2
 8003918:	4798      	blx	r3
 800391a:	4603      	mov	r3, r0
 800391c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800391e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	20000274 	.word	0x20000274

0800392c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800393a:	79fb      	ldrb	r3, [r7, #7]
 800393c:	4a0e      	ldr	r2, [pc, #56]	@ (8003978 <disk_initialize+0x4c>)
 800393e:	5cd3      	ldrb	r3, [r2, r3]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d114      	bne.n	800396e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003944:	79fb      	ldrb	r3, [r7, #7]
 8003946:	4a0c      	ldr	r2, [pc, #48]	@ (8003978 <disk_initialize+0x4c>)
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	79fa      	ldrb	r2, [r7, #7]
 8003952:	4909      	ldr	r1, [pc, #36]	@ (8003978 <disk_initialize+0x4c>)
 8003954:	440a      	add	r2, r1
 8003956:	7a12      	ldrb	r2, [r2, #8]
 8003958:	4610      	mov	r0, r2
 800395a:	4798      	blx	r3
 800395c:	4603      	mov	r3, r0
 800395e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8003960:	7bfb      	ldrb	r3, [r7, #15]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d103      	bne.n	800396e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8003966:	79fb      	ldrb	r3, [r7, #7]
 8003968:	4a03      	ldr	r2, [pc, #12]	@ (8003978 <disk_initialize+0x4c>)
 800396a:	2101      	movs	r1, #1
 800396c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800396e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000274 	.word	0x20000274

0800397c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800397c:	b590      	push	{r4, r7, lr}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	607a      	str	r2, [r7, #4]
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	4603      	mov	r3, r0
 800398a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	4a0a      	ldr	r2, [pc, #40]	@ (80039b8 <disk_read+0x3c>)
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	689c      	ldr	r4, [r3, #8]
 8003998:	7bfb      	ldrb	r3, [r7, #15]
 800399a:	4a07      	ldr	r2, [pc, #28]	@ (80039b8 <disk_read+0x3c>)
 800399c:	4413      	add	r3, r2
 800399e:	7a18      	ldrb	r0, [r3, #8]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	68b9      	ldr	r1, [r7, #8]
 80039a6:	47a0      	blx	r4
 80039a8:	4603      	mov	r3, r0
 80039aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80039ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	371c      	adds	r7, #28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd90      	pop	{r4, r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000274 	.word	0x20000274

080039bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80039bc:	b590      	push	{r4, r7, lr}
 80039be:	b087      	sub	sp, #28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	4603      	mov	r3, r0
 80039ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
 80039ce:	4a0a      	ldr	r2, [pc, #40]	@ (80039f8 <disk_write+0x3c>)
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	68dc      	ldr	r4, [r3, #12]
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	4a07      	ldr	r2, [pc, #28]	@ (80039f8 <disk_write+0x3c>)
 80039dc:	4413      	add	r3, r2
 80039de:	7a18      	ldrb	r0, [r3, #8]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	47a0      	blx	r4
 80039e8:	4603      	mov	r3, r0
 80039ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80039ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd90      	pop	{r4, r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000274 	.word	0x20000274

080039fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	603a      	str	r2, [r7, #0]
 8003a06:	71fb      	strb	r3, [r7, #7]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	4a09      	ldr	r2, [pc, #36]	@ (8003a34 <disk_ioctl+0x38>)
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	79fa      	ldrb	r2, [r7, #7]
 8003a1a:	4906      	ldr	r1, [pc, #24]	@ (8003a34 <disk_ioctl+0x38>)
 8003a1c:	440a      	add	r2, r1
 8003a1e:	7a10      	ldrb	r0, [r2, #8]
 8003a20:	79b9      	ldrb	r1, [r7, #6]
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	4798      	blx	r3
 8003a26:	4603      	mov	r3, r0
 8003a28:	73fb      	strb	r3, [r7, #15]
  return res;
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20000274 	.word	0x20000274

08003a38 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3301      	adds	r3, #1
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003a48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a4c:	021b      	lsls	r3, r3, #8
 8003a4e:	b21a      	sxth	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	b21b      	sxth	r3, r3
 8003a56:	4313      	orrs	r3, r2
 8003a58:	b21b      	sxth	r3, r3
 8003a5a:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003a5c:	89fb      	ldrh	r3, [r7, #14]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b085      	sub	sp, #20
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	3303      	adds	r3, #3
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	021b      	lsls	r3, r3, #8
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	3202      	adds	r2, #2
 8003a82:	7812      	ldrb	r2, [r2, #0]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	021b      	lsls	r3, r3, #8
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	3201      	adds	r2, #1
 8003a90:	7812      	ldrb	r2, [r2, #0]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	021b      	lsls	r3, r3, #8
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	7812      	ldrb	r2, [r2, #0]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]
	return rv;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	607a      	str	r2, [r7, #4]
 8003ac2:	887a      	ldrh	r2, [r7, #2]
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	701a      	strb	r2, [r3, #0]
 8003ac8:	887b      	ldrh	r3, [r7, #2]
 8003aca:	0a1b      	lsrs	r3, r3, #8
 8003acc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	607a      	str	r2, [r7, #4]
 8003ad4:	887a      	ldrh	r2, [r7, #2]
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	701a      	strb	r2, [r3, #0]
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	607a      	str	r2, [r7, #4]
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	701a      	strb	r2, [r3, #0]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	701a      	strb	r2, [r3, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	0a1b      	lsrs	r3, r3, #8
 8003b12:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	607a      	str	r2, [r7, #4]
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	701a      	strb	r2, [r3, #0]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	0a1b      	lsrs	r3, r3, #8
 8003b24:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	701a      	strb	r2, [r3, #0]
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003b3e:	b480      	push	{r7}
 8003b40:	b087      	sub	sp, #28
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00d      	beq.n	8003b74 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	1c53      	adds	r3, r2, #1
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	1c59      	adds	r1, r3, #1
 8003b62:	6179      	str	r1, [r7, #20]
 8003b64:	7812      	ldrb	r2, [r2, #0]
 8003b66:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	607b      	str	r3, [r7, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1f1      	bne.n	8003b58 <mem_cpy+0x1a>
	}
}
 8003b74:	bf00      	nop
 8003b76:	371c      	adds	r7, #28
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	617a      	str	r2, [r7, #20]
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	607b      	str	r3, [r7, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f3      	bne.n	8003b90 <mem_set+0x10>
}
 8003ba8:	bf00      	nop
 8003baa:	bf00      	nop
 8003bac:	371c      	adds	r7, #28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003bb6:	b480      	push	{r7}
 8003bb8:	b089      	sub	sp, #36	@ 0x24
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	61fb      	str	r3, [r7, #28]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	61fa      	str	r2, [r7, #28]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	61ba      	str	r2, [r7, #24]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	1acb      	subs	r3, r1, r3
 8003be2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	607b      	str	r3, [r7, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d002      	beq.n	8003bf6 <mem_cmp+0x40>
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0eb      	beq.n	8003bce <mem_cmp+0x18>

	return r;
 8003bf6:	697b      	ldr	r3, [r7, #20]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3724      	adds	r7, #36	@ 0x24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003c0e:	e002      	b.n	8003c16 <chk_chr+0x12>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3301      	adds	r3, #1
 8003c14:	607b      	str	r3, [r7, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d005      	beq.n	8003c2a <chk_chr+0x26>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d1f2      	bne.n	8003c10 <chk_chr+0xc>
	return *str;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
	...

08003c3c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003c46:	2300      	movs	r3, #0
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	e029      	b.n	8003ca4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003c50:	4a27      	ldr	r2, [pc, #156]	@ (8003cf0 <chk_lock+0xb4>)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	4413      	add	r3, r2
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d01d      	beq.n	8003c9a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003c5e:	4a24      	ldr	r2, [pc, #144]	@ (8003cf0 <chk_lock+0xb4>)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	4413      	add	r3, r2
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d116      	bne.n	8003c9e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003c70:	4a1f      	ldr	r2, [pc, #124]	@ (8003cf0 <chk_lock+0xb4>)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	4413      	add	r3, r2
 8003c78:	3304      	adds	r3, #4
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d10c      	bne.n	8003c9e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003c84:	4a1a      	ldr	r2, [pc, #104]	@ (8003cf0 <chk_lock+0xb4>)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	4413      	add	r3, r2
 8003c8c:	3308      	adds	r3, #8
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d102      	bne.n	8003c9e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003c98:	e007      	b.n	8003caa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d9d2      	bls.n	8003c50 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d109      	bne.n	8003cc4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d102      	bne.n	8003cbc <chk_lock+0x80>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d101      	bne.n	8003cc0 <chk_lock+0x84>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	e010      	b.n	8003ce2 <chk_lock+0xa6>
 8003cc0:	2312      	movs	r3, #18
 8003cc2:	e00e      	b.n	8003ce2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d108      	bne.n	8003cdc <chk_lock+0xa0>
 8003cca:	4a09      	ldr	r2, [pc, #36]	@ (8003cf0 <chk_lock+0xb4>)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	4413      	add	r3, r2
 8003cd2:	330c      	adds	r3, #12
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cda:	d101      	bne.n	8003ce0 <chk_lock+0xa4>
 8003cdc:	2310      	movs	r3, #16
 8003cde:	e000      	b.n	8003ce2 <chk_lock+0xa6>
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	20000254 	.word	0x20000254

08003cf4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	607b      	str	r3, [r7, #4]
 8003cfe:	e002      	b.n	8003d06 <enq_lock+0x12>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3301      	adds	r3, #1
 8003d04:	607b      	str	r3, [r7, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d806      	bhi.n	8003d1a <enq_lock+0x26>
 8003d0c:	4a09      	ldr	r2, [pc, #36]	@ (8003d34 <enq_lock+0x40>)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	4413      	add	r3, r2
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f2      	bne.n	8003d00 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	bf14      	ite	ne
 8003d20:	2301      	movne	r3, #1
 8003d22:	2300      	moveq	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	20000254 	.word	0x20000254

08003d38 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003d42:	2300      	movs	r3, #0
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	e01f      	b.n	8003d88 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003d48:	4a41      	ldr	r2, [pc, #260]	@ (8003e50 <inc_lock+0x118>)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	4413      	add	r3, r2
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d113      	bne.n	8003d82 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003d5a:	4a3d      	ldr	r2, [pc, #244]	@ (8003e50 <inc_lock+0x118>)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	4413      	add	r3, r2
 8003d62:	3304      	adds	r3, #4
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d109      	bne.n	8003d82 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003d6e:	4a38      	ldr	r2, [pc, #224]	@ (8003e50 <inc_lock+0x118>)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	011b      	lsls	r3, r3, #4
 8003d74:	4413      	add	r3, r2
 8003d76:	3308      	adds	r3, #8
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d006      	beq.n	8003d90 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	3301      	adds	r3, #1
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d9dc      	bls.n	8003d48 <inc_lock+0x10>
 8003d8e:	e000      	b.n	8003d92 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003d90:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d132      	bne.n	8003dfe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	e002      	b.n	8003da4 <inc_lock+0x6c>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	3301      	adds	r3, #1
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d806      	bhi.n	8003db8 <inc_lock+0x80>
 8003daa:	4a29      	ldr	r2, [pc, #164]	@ (8003e50 <inc_lock+0x118>)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	4413      	add	r3, r2
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1f2      	bne.n	8003d9e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d101      	bne.n	8003dc2 <inc_lock+0x8a>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	e040      	b.n	8003e44 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	4922      	ldr	r1, [pc, #136]	@ (8003e50 <inc_lock+0x118>)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	440b      	add	r3, r1
 8003dce:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	491e      	ldr	r1, [pc, #120]	@ (8003e50 <inc_lock+0x118>)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	440b      	add	r3, r1
 8003ddc:	3304      	adds	r3, #4
 8003dde:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	491a      	ldr	r1, [pc, #104]	@ (8003e50 <inc_lock+0x118>)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	440b      	add	r3, r1
 8003dec:	3308      	adds	r3, #8
 8003dee:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003df0:	4a17      	ldr	r2, [pc, #92]	@ (8003e50 <inc_lock+0x118>)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	4413      	add	r3, r2
 8003df8:	330c      	adds	r3, #12
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d009      	beq.n	8003e18 <inc_lock+0xe0>
 8003e04:	4a12      	ldr	r2, [pc, #72]	@ (8003e50 <inc_lock+0x118>)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	4413      	add	r3, r2
 8003e0c:	330c      	adds	r3, #12
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <inc_lock+0xe0>
 8003e14:	2300      	movs	r3, #0
 8003e16:	e015      	b.n	8003e44 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d108      	bne.n	8003e30 <inc_lock+0xf8>
 8003e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8003e50 <inc_lock+0x118>)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	4413      	add	r3, r2
 8003e26:	330c      	adds	r3, #12
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	e001      	b.n	8003e34 <inc_lock+0xfc>
 8003e30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e34:	4906      	ldr	r1, [pc, #24]	@ (8003e50 <inc_lock+0x118>)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	440b      	add	r3, r1
 8003e3c:	330c      	adds	r3, #12
 8003e3e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	3301      	adds	r3, #1
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	20000254 	.word	0x20000254

08003e54 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	607b      	str	r3, [r7, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d825      	bhi.n	8003eb4 <dec_lock+0x60>
		n = Files[i].ctr;
 8003e68:	4a17      	ldr	r2, [pc, #92]	@ (8003ec8 <dec_lock+0x74>)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	4413      	add	r3, r2
 8003e70:	330c      	adds	r3, #12
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003e76:	89fb      	ldrh	r3, [r7, #14]
 8003e78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e7c:	d101      	bne.n	8003e82 <dec_lock+0x2e>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003e82:	89fb      	ldrh	r3, [r7, #14]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <dec_lock+0x3a>
 8003e88:	89fb      	ldrh	r3, [r7, #14]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003e8e:	4a0e      	ldr	r2, [pc, #56]	@ (8003ec8 <dec_lock+0x74>)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	4413      	add	r3, r2
 8003e96:	330c      	adds	r3, #12
 8003e98:	89fa      	ldrh	r2, [r7, #14]
 8003e9a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003e9c:	89fb      	ldrh	r3, [r7, #14]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d105      	bne.n	8003eae <dec_lock+0x5a>
 8003ea2:	4a09      	ldr	r2, [pc, #36]	@ (8003ec8 <dec_lock+0x74>)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	4413      	add	r3, r2
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	737b      	strb	r3, [r7, #13]
 8003eb2:	e001      	b.n	8003eb8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003eb8:	7b7b      	ldrb	r3, [r7, #13]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	20000254 	.word	0x20000254

08003ecc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	e010      	b.n	8003efc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003eda:	4a0d      	ldr	r2, [pc, #52]	@ (8003f10 <clear_lock+0x44>)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	4413      	add	r3, r2
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d105      	bne.n	8003ef6 <clear_lock+0x2a>
 8003eea:	4a09      	ldr	r2, [pc, #36]	@ (8003f10 <clear_lock+0x44>)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	4413      	add	r3, r2
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d9eb      	bls.n	8003eda <clear_lock+0xe>
	}
}
 8003f02:	bf00      	nop
 8003f04:	bf00      	nop
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	20000254 	.word	0x20000254

08003f14 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	78db      	ldrb	r3, [r3, #3]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d034      	beq.n	8003f92 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	7858      	ldrb	r0, [r3, #1]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003f38:	2301      	movs	r3, #1
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	f7ff fd3e 	bl	80039bc <disk_write>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <sync_window+0x38>
			res = FR_DISK_ERR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	73fb      	strb	r3, [r7, #15]
 8003f4a:	e022      	b.n	8003f92 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	1ad2      	subs	r2, r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d217      	bcs.n	8003f92 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	789b      	ldrb	r3, [r3, #2]
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	e010      	b.n	8003f8c <sync_window+0x78>
					wsect += fs->fsize;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	4413      	add	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	7858      	ldrb	r0, [r3, #1]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003f7e:	2301      	movs	r3, #1
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	f7ff fd1b 	bl	80039bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	613b      	str	r3, [r7, #16]
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d8eb      	bhi.n	8003f6a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d01b      	beq.n	8003fec <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7ff ffad 	bl	8003f14 <sync_window>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d113      	bne.n	8003fec <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	7858      	ldrb	r0, [r3, #1]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003fce:	2301      	movs	r3, #1
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	f7ff fcd3 	bl	800397c <disk_read>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d004      	beq.n	8003fe6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
	...

08003ff8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7ff ff87 	bl	8003f14 <sync_window>
 8004006:	4603      	mov	r3, r0
 8004008:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d158      	bne.n	80040c2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b03      	cmp	r3, #3
 8004016:	d148      	bne.n	80040aa <sync_fs+0xb2>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	791b      	ldrb	r3, [r3, #4]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d144      	bne.n	80040aa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3330      	adds	r3, #48	@ 0x30
 8004024:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004028:	2100      	movs	r1, #0
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff fda8 	bl	8003b80 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3330      	adds	r3, #48	@ 0x30
 8004034:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004038:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff fd37 	bl	8003ab0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	3330      	adds	r3, #48	@ 0x30
 8004046:	4921      	ldr	r1, [pc, #132]	@ (80040cc <sync_fs+0xd4>)
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff fd4c 	bl	8003ae6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3330      	adds	r3, #48	@ 0x30
 8004052:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004056:	491e      	ldr	r1, [pc, #120]	@ (80040d0 <sync_fs+0xd8>)
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff fd44 	bl	8003ae6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3330      	adds	r3, #48	@ 0x30
 8004062:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	4619      	mov	r1, r3
 800406c:	4610      	mov	r0, r2
 800406e:	f7ff fd3a 	bl	8003ae6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3330      	adds	r3, #48	@ 0x30
 8004076:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	4619      	mov	r1, r3
 8004080:	4610      	mov	r0, r2
 8004082:	f7ff fd30 	bl	8003ae6 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	7858      	ldrb	r0, [r3, #1]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800409e:	2301      	movs	r3, #1
 80040a0:	f7ff fc8c 	bl	80039bc <disk_write>
			fs->fsi_flag = 0;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	785b      	ldrb	r3, [r3, #1]
 80040ae:	2200      	movs	r2, #0
 80040b0:	2100      	movs	r1, #0
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7ff fca2 	bl	80039fc <disk_ioctl>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <sync_fs+0xca>
 80040be:	2301      	movs	r3, #1
 80040c0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	41615252 	.word	0x41615252
 80040d0:	61417272 	.word	0x61417272

080040d4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	3b02      	subs	r3, #2
 80040e2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	3b02      	subs	r3, #2
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d301      	bcc.n	80040f4 <clust2sect+0x20>
 80040f0:	2300      	movs	r3, #0
 80040f2:	e008      	b.n	8004106 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	895b      	ldrh	r3, [r3, #10]
 80040f8:	461a      	mov	r2, r3
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	fb03 f202 	mul.w	r2, r3, r2
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004104:	4413      	add	r3, r2
}
 8004106:	4618      	mov	r0, r3
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b086      	sub	sp, #24
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d904      	bls.n	8004132 <get_fat+0x20>
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	429a      	cmp	r2, r3
 8004130:	d302      	bcc.n	8004138 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004132:	2301      	movs	r3, #1
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	e08e      	b.n	8004256 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004138:	f04f 33ff 	mov.w	r3, #4294967295
 800413c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2b03      	cmp	r3, #3
 8004144:	d061      	beq.n	800420a <get_fat+0xf8>
 8004146:	2b03      	cmp	r3, #3
 8004148:	dc7b      	bgt.n	8004242 <get_fat+0x130>
 800414a:	2b01      	cmp	r3, #1
 800414c:	d002      	beq.n	8004154 <get_fat+0x42>
 800414e:	2b02      	cmp	r3, #2
 8004150:	d041      	beq.n	80041d6 <get_fat+0xc4>
 8004152:	e076      	b.n	8004242 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	085b      	lsrs	r3, r3, #1
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4413      	add	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	6a1a      	ldr	r2, [r3, #32]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	0a5b      	lsrs	r3, r3, #9
 800416a:	4413      	add	r3, r2
 800416c:	4619      	mov	r1, r3
 800416e:	6938      	ldr	r0, [r7, #16]
 8004170:	f7ff ff14 	bl	8003f9c <move_window>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d166      	bne.n	8004248 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	60fa      	str	r2, [r7, #12]
 8004180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4413      	add	r3, r2
 8004188:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800418c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	6a1a      	ldr	r2, [r3, #32]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	0a5b      	lsrs	r3, r3, #9
 8004196:	4413      	add	r3, r2
 8004198:	4619      	mov	r1, r3
 800419a:	6938      	ldr	r0, [r7, #16]
 800419c:	f7ff fefe 	bl	8003f9c <move_window>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d152      	bne.n	800424c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4413      	add	r3, r2
 80041b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80041b4:	021b      	lsls	r3, r3, #8
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <get_fat+0xba>
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	091b      	lsrs	r3, r3, #4
 80041ca:	e002      	b.n	80041d2 <get_fat+0xc0>
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d2:	617b      	str	r3, [r7, #20]
			break;
 80041d4:	e03f      	b.n	8004256 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	6a1a      	ldr	r2, [r3, #32]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	0a1b      	lsrs	r3, r3, #8
 80041de:	4413      	add	r3, r2
 80041e0:	4619      	mov	r1, r3
 80041e2:	6938      	ldr	r0, [r7, #16]
 80041e4:	f7ff feda 	bl	8003f9c <move_window>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d130      	bne.n	8004250 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80041fc:	4413      	add	r3, r2
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff fc1a 	bl	8003a38 <ld_word>
 8004204:	4603      	mov	r3, r0
 8004206:	617b      	str	r3, [r7, #20]
			break;
 8004208:	e025      	b.n	8004256 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	6a1a      	ldr	r2, [r3, #32]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	09db      	lsrs	r3, r3, #7
 8004212:	4413      	add	r3, r2
 8004214:	4619      	mov	r1, r3
 8004216:	6938      	ldr	r0, [r7, #16]
 8004218:	f7ff fec0 	bl	8003f9c <move_window>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d118      	bne.n	8004254 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004230:	4413      	add	r3, r2
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff fc19 	bl	8003a6a <ld_dword>
 8004238:	4603      	mov	r3, r0
 800423a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800423e:	617b      	str	r3, [r7, #20]
			break;
 8004240:	e009      	b.n	8004256 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004242:	2301      	movs	r3, #1
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	e006      	b.n	8004256 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004248:	bf00      	nop
 800424a:	e004      	b.n	8004256 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800424c:	bf00      	nop
 800424e:	e002      	b.n	8004256 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004250:	bf00      	nop
 8004252:	e000      	b.n	8004256 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004254:	bf00      	nop
		}
	}

	return val;
 8004256:	697b      	ldr	r3, [r7, #20]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004260:	b590      	push	{r4, r7, lr}
 8004262:	b089      	sub	sp, #36	@ 0x24
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800426c:	2302      	movs	r3, #2
 800426e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b01      	cmp	r3, #1
 8004274:	f240 80d9 	bls.w	800442a <put_fat+0x1ca>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	429a      	cmp	r2, r3
 8004280:	f080 80d3 	bcs.w	800442a <put_fat+0x1ca>
		switch (fs->fs_type) {
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b03      	cmp	r3, #3
 800428a:	f000 8096 	beq.w	80043ba <put_fat+0x15a>
 800428e:	2b03      	cmp	r3, #3
 8004290:	f300 80cb 	bgt.w	800442a <put_fat+0x1ca>
 8004294:	2b01      	cmp	r3, #1
 8004296:	d002      	beq.n	800429e <put_fat+0x3e>
 8004298:	2b02      	cmp	r3, #2
 800429a:	d06e      	beq.n	800437a <put_fat+0x11a>
 800429c:	e0c5      	b.n	800442a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	61bb      	str	r3, [r7, #24]
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	085b      	lsrs	r3, r3, #1
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	4413      	add	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a1a      	ldr	r2, [r3, #32]
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	0a5b      	lsrs	r3, r3, #9
 80042b4:	4413      	add	r3, r2
 80042b6:	4619      	mov	r1, r3
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f7ff fe6f 	bl	8003f9c <move_window>
 80042be:	4603      	mov	r3, r0
 80042c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80042c2:	7ffb      	ldrb	r3, [r7, #31]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f040 80a9 	bne.w	800441c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	1c59      	adds	r1, r3, #1
 80042d4:	61b9      	str	r1, [r7, #24]
 80042d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042da:	4413      	add	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00d      	beq.n	8004304 <put_fat+0xa4>
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	b25b      	sxtb	r3, r3
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	b25a      	sxtb	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	b25b      	sxtb	r3, r3
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	b25b      	sxtb	r3, r3
 80042fc:	4313      	orrs	r3, r2
 80042fe:	b25b      	sxtb	r3, r3
 8004300:	b2db      	uxtb	r3, r3
 8004302:	e001      	b.n	8004308 <put_fat+0xa8>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	b2db      	uxtb	r3, r3
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2201      	movs	r2, #1
 8004310:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a1a      	ldr	r2, [r3, #32]
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	0a5b      	lsrs	r3, r3, #9
 800431a:	4413      	add	r3, r2
 800431c:	4619      	mov	r1, r3
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f7ff fe3c 	bl	8003f9c <move_window>
 8004324:	4603      	mov	r3, r0
 8004326:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004328:	7ffb      	ldrb	r3, [r7, #31]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d178      	bne.n	8004420 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800433a:	4413      	add	r3, r2
 800433c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <put_fat+0xf0>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	091b      	lsrs	r3, r3, #4
 800434c:	b2db      	uxtb	r3, r3
 800434e:	e00e      	b.n	800436e <put_fat+0x10e>
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	b25b      	sxtb	r3, r3
 8004356:	f023 030f 	bic.w	r3, r3, #15
 800435a:	b25a      	sxtb	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	0a1b      	lsrs	r3, r3, #8
 8004360:	b25b      	sxtb	r3, r3
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	b25b      	sxtb	r3, r3
 8004368:	4313      	orrs	r3, r2
 800436a:	b25b      	sxtb	r3, r3
 800436c:	b2db      	uxtb	r3, r3
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2201      	movs	r2, #1
 8004376:	70da      	strb	r2, [r3, #3]
			break;
 8004378:	e057      	b.n	800442a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a1a      	ldr	r2, [r3, #32]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	0a1b      	lsrs	r3, r3, #8
 8004382:	4413      	add	r3, r2
 8004384:	4619      	mov	r1, r3
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f7ff fe08 	bl	8003f9c <move_window>
 800438c:	4603      	mov	r3, r0
 800438e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004390:	7ffb      	ldrb	r3, [r7, #31]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d146      	bne.n	8004424 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80043a4:	4413      	add	r3, r2
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	b292      	uxth	r2, r2
 80043aa:	4611      	mov	r1, r2
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff fb7f 	bl	8003ab0 <st_word>
			fs->wflag = 1;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2201      	movs	r2, #1
 80043b6:	70da      	strb	r2, [r3, #3]
			break;
 80043b8:	e037      	b.n	800442a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a1a      	ldr	r2, [r3, #32]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	09db      	lsrs	r3, r3, #7
 80043c2:	4413      	add	r3, r2
 80043c4:	4619      	mov	r1, r3
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f7ff fde8 	bl	8003f9c <move_window>
 80043cc:	4603      	mov	r3, r0
 80043ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80043d0:	7ffb      	ldrb	r3, [r7, #31]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d128      	bne.n	8004428 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80043ea:	4413      	add	r3, r2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff fb3c 	bl	8003a6a <ld_dword>
 80043f2:	4603      	mov	r3, r0
 80043f4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80043f8:	4323      	orrs	r3, r4
 80043fa:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800440a:	4413      	add	r3, r2
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff fb69 	bl	8003ae6 <st_dword>
			fs->wflag = 1;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2201      	movs	r2, #1
 8004418:	70da      	strb	r2, [r3, #3]
			break;
 800441a:	e006      	b.n	800442a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800441c:	bf00      	nop
 800441e:	e004      	b.n	800442a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004420:	bf00      	nop
 8004422:	e002      	b.n	800442a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004424:	bf00      	nop
 8004426:	e000      	b.n	800442a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004428:	bf00      	nop
		}
	}
	return res;
 800442a:	7ffb      	ldrb	r3, [r7, #31]
}
 800442c:	4618      	mov	r0, r3
 800442e:	3724      	adds	r7, #36	@ 0x24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd90      	pop	{r4, r7, pc}

08004434 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004440:	2300      	movs	r3, #0
 8004442:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d904      	bls.n	800445a <remove_chain+0x26>
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	429a      	cmp	r2, r3
 8004458:	d301      	bcc.n	800445e <remove_chain+0x2a>
 800445a:	2302      	movs	r3, #2
 800445c:	e04b      	b.n	80044f6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00c      	beq.n	800447e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004464:	f04f 32ff 	mov.w	r2, #4294967295
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	69b8      	ldr	r0, [r7, #24]
 800446c:	f7ff fef8 	bl	8004260 <put_fat>
 8004470:	4603      	mov	r3, r0
 8004472:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004474:	7ffb      	ldrb	r3, [r7, #31]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <remove_chain+0x4a>
 800447a:	7ffb      	ldrb	r3, [r7, #31]
 800447c:	e03b      	b.n	80044f6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800447e:	68b9      	ldr	r1, [r7, #8]
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f7ff fe46 	bl	8004112 <get_fat>
 8004486:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d031      	beq.n	80044f2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <remove_chain+0x64>
 8004494:	2302      	movs	r3, #2
 8004496:	e02e      	b.n	80044f6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449e:	d101      	bne.n	80044a4 <remove_chain+0x70>
 80044a0:	2301      	movs	r3, #1
 80044a2:	e028      	b.n	80044f6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80044a4:	2200      	movs	r2, #0
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	69b8      	ldr	r0, [r7, #24]
 80044aa:	f7ff fed9 	bl	8004260 <put_fat>
 80044ae:	4603      	mov	r3, r0
 80044b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80044b2:	7ffb      	ldrb	r3, [r7, #31]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <remove_chain+0x88>
 80044b8:	7ffb      	ldrb	r3, [r7, #31]
 80044ba:	e01c      	b.n	80044f6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	3b02      	subs	r3, #2
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d20b      	bcs.n	80044e2 <remove_chain+0xae>
			fs->free_clst++;
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	791b      	ldrb	r3, [r3, #4]
 80044d8:	f043 0301 	orr.w	r3, r3, #1
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d3c6      	bcc.n	800447e <remove_chain+0x4a>
 80044f0:	e000      	b.n	80044f4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80044f2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3720      	adds	r7, #32
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b088      	sub	sp, #32
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10d      	bne.n	8004530 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d004      	beq.n	800452a <create_chain+0x2c>
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	429a      	cmp	r2, r3
 8004528:	d31b      	bcc.n	8004562 <create_chain+0x64>
 800452a:	2301      	movs	r3, #1
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	e018      	b.n	8004562 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004530:	6839      	ldr	r1, [r7, #0]
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff fded 	bl	8004112 <get_fat>
 8004538:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d801      	bhi.n	8004544 <create_chain+0x46>
 8004540:	2301      	movs	r3, #1
 8004542:	e070      	b.n	8004626 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454a:	d101      	bne.n	8004550 <create_chain+0x52>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	e06a      	b.n	8004626 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	429a      	cmp	r2, r3
 8004558:	d201      	bcs.n	800455e <create_chain+0x60>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	e063      	b.n	8004626 <create_chain+0x128>
		scl = clst;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	3301      	adds	r3, #1
 800456a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	69fa      	ldr	r2, [r7, #28]
 8004572:	429a      	cmp	r2, r3
 8004574:	d307      	bcc.n	8004586 <create_chain+0x88>
				ncl = 2;
 8004576:	2302      	movs	r3, #2
 8004578:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800457a:	69fa      	ldr	r2, [r7, #28]
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	429a      	cmp	r2, r3
 8004580:	d901      	bls.n	8004586 <create_chain+0x88>
 8004582:	2300      	movs	r3, #0
 8004584:	e04f      	b.n	8004626 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004586:	69f9      	ldr	r1, [r7, #28]
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7ff fdc2 	bl	8004112 <get_fat>
 800458e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00e      	beq.n	80045b4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d003      	beq.n	80045a4 <create_chain+0xa6>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a2:	d101      	bne.n	80045a8 <create_chain+0xaa>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	e03e      	b.n	8004626 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80045a8:	69fa      	ldr	r2, [r7, #28]
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d1da      	bne.n	8004566 <create_chain+0x68>
 80045b0:	2300      	movs	r3, #0
 80045b2:	e038      	b.n	8004626 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80045b4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80045b6:	f04f 32ff 	mov.w	r2, #4294967295
 80045ba:	69f9      	ldr	r1, [r7, #28]
 80045bc:	6938      	ldr	r0, [r7, #16]
 80045be:	f7ff fe4f 	bl	8004260 <put_fat>
 80045c2:	4603      	mov	r3, r0
 80045c4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80045c6:	7dfb      	ldrb	r3, [r7, #23]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d109      	bne.n	80045e0 <create_chain+0xe2>
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d006      	beq.n	80045e0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80045d2:	69fa      	ldr	r2, [r7, #28]
 80045d4:	6839      	ldr	r1, [r7, #0]
 80045d6:	6938      	ldr	r0, [r7, #16]
 80045d8:	f7ff fe42 	bl	8004260 <put_fat>
 80045dc:	4603      	mov	r3, r0
 80045de:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80045e0:	7dfb      	ldrb	r3, [r7, #23]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d116      	bne.n	8004614 <create_chain+0x116>
		fs->last_clst = ncl;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	3b02      	subs	r3, #2
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d804      	bhi.n	8004604 <create_chain+0x106>
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	1e5a      	subs	r2, r3, #1
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	791b      	ldrb	r3, [r3, #4]
 8004608:	f043 0301 	orr.w	r3, r3, #1
 800460c:	b2da      	uxtb	r2, r3
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	711a      	strb	r2, [r3, #4]
 8004612:	e007      	b.n	8004624 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004614:	7dfb      	ldrb	r3, [r7, #23]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d102      	bne.n	8004620 <create_chain+0x122>
 800461a:	f04f 33ff 	mov.w	r3, #4294967295
 800461e:	e000      	b.n	8004622 <create_chain+0x124>
 8004620:	2301      	movs	r3, #1
 8004622:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004624:	69fb      	ldr	r3, [r7, #28]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3720      	adds	r7, #32
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800462e:	b480      	push	{r7}
 8004630:	b087      	sub	sp, #28
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004642:	3304      	adds	r3, #4
 8004644:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	0a5b      	lsrs	r3, r3, #9
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	8952      	ldrh	r2, [r2, #10]
 800464e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004652:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1d1a      	adds	r2, r3, #4
 8004658:	613a      	str	r2, [r7, #16]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <clmt_clust+0x3a>
 8004664:	2300      	movs	r3, #0
 8004666:	e010      	b.n	800468a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	429a      	cmp	r2, r3
 800466e:	d307      	bcc.n	8004680 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	3304      	adds	r3, #4
 800467c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800467e:	e7e9      	b.n	8004654 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004680:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	4413      	add	r3, r2
}
 800468a:	4618      	mov	r0, r3
 800468c:	371c      	adds	r7, #28
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b086      	sub	sp, #24
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046ac:	d204      	bcs.n	80046b8 <dir_sdi+0x22>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	f003 031f 	and.w	r3, r3, #31
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <dir_sdi+0x26>
		return FR_INT_ERR;
 80046b8:	2302      	movs	r3, #2
 80046ba:	e063      	b.n	8004784 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <dir_sdi+0x46>
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d902      	bls.n	80046dc <dir_sdi+0x46>
		clst = fs->dirbase;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046da:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10c      	bne.n	80046fc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	095b      	lsrs	r3, r3, #5
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	8912      	ldrh	r2, [r2, #8]
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d301      	bcc.n	80046f2 <dir_sdi+0x5c>
 80046ee:	2302      	movs	r3, #2
 80046f0:	e048      	b.n	8004784 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	61da      	str	r2, [r3, #28]
 80046fa:	e029      	b.n	8004750 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	895b      	ldrh	r3, [r3, #10]
 8004700:	025b      	lsls	r3, r3, #9
 8004702:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004704:	e019      	b.n	800473a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6979      	ldr	r1, [r7, #20]
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff fd01 	bl	8004112 <get_fat>
 8004710:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004718:	d101      	bne.n	800471e <dir_sdi+0x88>
 800471a:	2301      	movs	r3, #1
 800471c:	e032      	b.n	8004784 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d904      	bls.n	800472e <dir_sdi+0x98>
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	429a      	cmp	r2, r3
 800472c:	d301      	bcc.n	8004732 <dir_sdi+0x9c>
 800472e:	2302      	movs	r3, #2
 8004730:	e028      	b.n	8004784 <dir_sdi+0xee>
			ofs -= csz;
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	429a      	cmp	r2, r3
 8004740:	d2e1      	bcs.n	8004706 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8004742:	6979      	ldr	r1, [r7, #20]
 8004744:	6938      	ldr	r0, [r7, #16]
 8004746:	f7ff fcc5 	bl	80040d4 <clust2sect>
 800474a:	4602      	mov	r2, r0
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <dir_sdi+0xcc>
 800475e:	2302      	movs	r3, #2
 8004760:	e010      	b.n	8004784 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69da      	ldr	r2, [r3, #28]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	0a5b      	lsrs	r3, r3, #9
 800476a:	441a      	add	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800477c:	441a      	add	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	3320      	adds	r3, #32
 80047a2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <dir_next+0x28>
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047b2:	d301      	bcc.n	80047b8 <dir_next+0x2c>
 80047b4:	2304      	movs	r3, #4
 80047b6:	e0aa      	b.n	800490e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f040 8098 	bne.w	80048f4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10b      	bne.n	80047ee <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	095b      	lsrs	r3, r3, #5
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	8912      	ldrh	r2, [r2, #8]
 80047de:	4293      	cmp	r3, r2
 80047e0:	f0c0 8088 	bcc.w	80048f4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	61da      	str	r2, [r3, #28]
 80047ea:	2304      	movs	r3, #4
 80047ec:	e08f      	b.n	800490e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	0a5b      	lsrs	r3, r3, #9
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	8952      	ldrh	r2, [r2, #10]
 80047f6:	3a01      	subs	r2, #1
 80047f8:	4013      	ands	r3, r2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d17a      	bne.n	80048f4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	4619      	mov	r1, r3
 8004806:	4610      	mov	r0, r2
 8004808:	f7ff fc83 	bl	8004112 <get_fat>
 800480c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d801      	bhi.n	8004818 <dir_next+0x8c>
 8004814:	2302      	movs	r3, #2
 8004816:	e07a      	b.n	800490e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481e:	d101      	bne.n	8004824 <dir_next+0x98>
 8004820:	2301      	movs	r3, #1
 8004822:	e074      	b.n	800490e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	429a      	cmp	r2, r3
 800482c:	d358      	bcc.n	80048e0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d104      	bne.n	800483e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	61da      	str	r2, [r3, #28]
 800483a:	2304      	movs	r3, #4
 800483c:	e067      	b.n	800490e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	4619      	mov	r1, r3
 8004846:	4610      	mov	r0, r2
 8004848:	f7ff fe59 	bl	80044fe <create_chain>
 800484c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <dir_next+0xcc>
 8004854:	2307      	movs	r3, #7
 8004856:	e05a      	b.n	800490e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d101      	bne.n	8004862 <dir_next+0xd6>
 800485e:	2302      	movs	r3, #2
 8004860:	e055      	b.n	800490e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004868:	d101      	bne.n	800486e <dir_next+0xe2>
 800486a:	2301      	movs	r3, #1
 800486c:	e04f      	b.n	800490e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f7ff fb50 	bl	8003f14 <sync_window>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <dir_next+0xf2>
 800487a:	2301      	movs	r3, #1
 800487c:	e047      	b.n	800490e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3330      	adds	r3, #48	@ 0x30
 8004882:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004886:	2100      	movs	r1, #0
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff f979 	bl	8003b80 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800488e:	2300      	movs	r3, #0
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	6979      	ldr	r1, [r7, #20]
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f7ff fc1d 	bl	80040d4 <clust2sect>
 800489a:	4602      	mov	r2, r0
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80048a0:	e012      	b.n	80048c8 <dir_next+0x13c>
						fs->wflag = 1;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2201      	movs	r2, #1
 80048a6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f7ff fb33 	bl	8003f14 <sync_window>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <dir_next+0x12c>
 80048b4:	2301      	movs	r3, #1
 80048b6:	e02a      	b.n	800490e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	3301      	adds	r3, #1
 80048bc:	613b      	str	r3, [r7, #16]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	895b      	ldrh	r3, [r3, #10]
 80048cc:	461a      	mov	r2, r3
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d3e6      	bcc.n	80048a2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad2      	subs	r2, r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80048e6:	6979      	ldr	r1, [r7, #20]
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f7ff fbf3 	bl	80040d4 <clust2sect>
 80048ee:	4602      	mov	r2, r0
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004906:	441a      	add	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b086      	sub	sp, #24
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004926:	2100      	movs	r1, #0
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7ff feb4 	bl	8004696 <dir_sdi>
 800492e:	4603      	mov	r3, r0
 8004930:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004932:	7dfb      	ldrb	r3, [r7, #23]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d12b      	bne.n	8004990 <dir_alloc+0x7a>
		n = 0;
 8004938:	2300      	movs	r3, #0
 800493a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	4619      	mov	r1, r3
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f7ff fb2a 	bl	8003f9c <move_window>
 8004948:	4603      	mov	r3, r0
 800494a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800494c:	7dfb      	ldrb	r3, [r7, #23]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d11d      	bne.n	800498e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2be5      	cmp	r3, #229	@ 0xe5
 800495a:	d004      	beq.n	8004966 <dir_alloc+0x50>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d107      	bne.n	8004976 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	3301      	adds	r3, #1
 800496a:	613b      	str	r3, [r7, #16]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	429a      	cmp	r2, r3
 8004972:	d102      	bne.n	800497a <dir_alloc+0x64>
 8004974:	e00c      	b.n	8004990 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004976:	2300      	movs	r3, #0
 8004978:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800497a:	2101      	movs	r1, #1
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff ff05 	bl	800478c <dir_next>
 8004982:	4603      	mov	r3, r0
 8004984:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004986:	7dfb      	ldrb	r3, [r7, #23]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0d7      	beq.n	800493c <dir_alloc+0x26>
 800498c:	e000      	b.n	8004990 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800498e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004990:	7dfb      	ldrb	r3, [r7, #23]
 8004992:	2b04      	cmp	r3, #4
 8004994:	d101      	bne.n	800499a <dir_alloc+0x84>
 8004996:	2307      	movs	r3, #7
 8004998:	75fb      	strb	r3, [r7, #23]
	return res;
 800499a:	7dfb      	ldrb	r3, [r7, #23]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	331a      	adds	r3, #26
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff f840 	bl	8003a38 <ld_word>
 80049b8:	4603      	mov	r3, r0
 80049ba:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b03      	cmp	r3, #3
 80049c2:	d109      	bne.n	80049d8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	3314      	adds	r3, #20
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff f835 	bl	8003a38 <ld_word>
 80049ce:	4603      	mov	r3, r0
 80049d0:	041b      	lsls	r3, r3, #16
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80049d8:	68fb      	ldr	r3, [r7, #12]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b084      	sub	sp, #16
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	60b9      	str	r1, [r7, #8]
 80049ec:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	331a      	adds	r3, #26
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	b292      	uxth	r2, r2
 80049f6:	4611      	mov	r1, r2
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff f859 	bl	8003ab0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	2b03      	cmp	r3, #3
 8004a04:	d109      	bne.n	8004a1a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	f103 0214 	add.w	r2, r3, #20
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	0c1b      	lsrs	r3, r3, #16
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	4619      	mov	r1, r3
 8004a14:	4610      	mov	r0, r2
 8004a16:	f7ff f84b 	bl	8003ab0 <st_word>
	}
}
 8004a1a:	bf00      	nop
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b086      	sub	sp, #24
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004a30:	2100      	movs	r1, #0
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7ff fe2f 	bl	8004696 <dir_sdi>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004a3c:	7dfb      	ldrb	r3, [r7, #23]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <dir_find+0x24>
 8004a42:	7dfb      	ldrb	r3, [r7, #23]
 8004a44:	e03e      	b.n	8004ac4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	6938      	ldr	r0, [r7, #16]
 8004a4e:	f7ff faa5 	bl	8003f9c <move_window>
 8004a52:	4603      	mov	r3, r0
 8004a54:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004a56:	7dfb      	ldrb	r3, [r7, #23]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d12f      	bne.n	8004abc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d102      	bne.n	8004a70 <dir_find+0x4e>
 8004a6a:	2304      	movs	r3, #4
 8004a6c:	75fb      	strb	r3, [r7, #23]
 8004a6e:	e028      	b.n	8004ac2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	330b      	adds	r3, #11
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	330b      	adds	r3, #11
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	f003 0308 	and.w	r3, r3, #8
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10a      	bne.n	8004aa8 <dir_find+0x86>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a18      	ldr	r0, [r3, #32]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3324      	adds	r3, #36	@ 0x24
 8004a9a:	220b      	movs	r2, #11
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	f7ff f88a 	bl	8003bb6 <mem_cmp>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00b      	beq.n	8004ac0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7ff fe6e 	bl	800478c <dir_next>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004ab4:	7dfb      	ldrb	r3, [r7, #23]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0c5      	beq.n	8004a46 <dir_find+0x24>
 8004aba:	e002      	b.n	8004ac2 <dir_find+0xa0>
		if (res != FR_OK) break;
 8004abc:	bf00      	nop
 8004abe:	e000      	b.n	8004ac2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004ac0:	bf00      	nop

	return res;
 8004ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3718      	adds	r7, #24
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004ada:	2101      	movs	r1, #1
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff ff1a 	bl	8004916 <dir_alloc>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004ae6:	7bfb      	ldrb	r3, [r7, #15]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d11c      	bne.n	8004b26 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	4619      	mov	r1, r3
 8004af2:	68b8      	ldr	r0, [r7, #8]
 8004af4:	f7ff fa52 	bl	8003f9c <move_window>
 8004af8:	4603      	mov	r3, r0
 8004afa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d111      	bne.n	8004b26 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	2220      	movs	r2, #32
 8004b08:	2100      	movs	r1, #0
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7ff f838 	bl	8003b80 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a18      	ldr	r0, [r3, #32]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3324      	adds	r3, #36	@ 0x24
 8004b18:	220b      	movs	r2, #11
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	f7ff f80f 	bl	8003b3e <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2201      	movs	r2, #1
 8004b24:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3324      	adds	r3, #36	@ 0x24
 8004b44:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004b46:	220b      	movs	r2, #11
 8004b48:	2120      	movs	r1, #32
 8004b4a:	68b8      	ldr	r0, [r7, #8]
 8004b4c:	f7ff f818 	bl	8003b80 <mem_set>
	si = i = 0; ni = 8;
 8004b50:	2300      	movs	r3, #0
 8004b52:	613b      	str	r3, [r7, #16]
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	61fb      	str	r3, [r7, #28]
 8004b58:	2308      	movs	r3, #8
 8004b5a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	1c5a      	adds	r2, r3, #1
 8004b60:	61fa      	str	r2, [r7, #28]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	4413      	add	r3, r2
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004b6a:	7efb      	ldrb	r3, [r7, #27]
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d94e      	bls.n	8004c0e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004b70:	7efb      	ldrb	r3, [r7, #27]
 8004b72:	2b2f      	cmp	r3, #47	@ 0x2f
 8004b74:	d006      	beq.n	8004b84 <create_name+0x54>
 8004b76:	7efb      	ldrb	r3, [r7, #27]
 8004b78:	2b5c      	cmp	r3, #92	@ 0x5c
 8004b7a:	d110      	bne.n	8004b9e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004b7c:	e002      	b.n	8004b84 <create_name+0x54>
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	3301      	adds	r3, #1
 8004b82:	61fb      	str	r3, [r7, #28]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	4413      	add	r3, r2
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2b2f      	cmp	r3, #47	@ 0x2f
 8004b8e:	d0f6      	beq.n	8004b7e <create_name+0x4e>
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	4413      	add	r3, r2
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2b5c      	cmp	r3, #92	@ 0x5c
 8004b9a:	d0f0      	beq.n	8004b7e <create_name+0x4e>
			break;
 8004b9c:	e038      	b.n	8004c10 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004b9e:	7efb      	ldrb	r3, [r7, #27]
 8004ba0:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ba2:	d003      	beq.n	8004bac <create_name+0x7c>
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d30c      	bcc.n	8004bc6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2b0b      	cmp	r3, #11
 8004bb0:	d002      	beq.n	8004bb8 <create_name+0x88>
 8004bb2:	7efb      	ldrb	r3, [r7, #27]
 8004bb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8004bb6:	d001      	beq.n	8004bbc <create_name+0x8c>
 8004bb8:	2306      	movs	r3, #6
 8004bba:	e044      	b.n	8004c46 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004bbc:	2308      	movs	r3, #8
 8004bbe:	613b      	str	r3, [r7, #16]
 8004bc0:	230b      	movs	r3, #11
 8004bc2:	617b      	str	r3, [r7, #20]
			continue;
 8004bc4:	e022      	b.n	8004c0c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004bc6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	da04      	bge.n	8004bd8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004bce:	7efb      	ldrb	r3, [r7, #27]
 8004bd0:	3b80      	subs	r3, #128	@ 0x80
 8004bd2:	4a1f      	ldr	r2, [pc, #124]	@ (8004c50 <create_name+0x120>)
 8004bd4:	5cd3      	ldrb	r3, [r2, r3]
 8004bd6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004bd8:	7efb      	ldrb	r3, [r7, #27]
 8004bda:	4619      	mov	r1, r3
 8004bdc:	481d      	ldr	r0, [pc, #116]	@ (8004c54 <create_name+0x124>)
 8004bde:	f7ff f811 	bl	8003c04 <chk_chr>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <create_name+0xbc>
 8004be8:	2306      	movs	r3, #6
 8004bea:	e02c      	b.n	8004c46 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004bec:	7efb      	ldrb	r3, [r7, #27]
 8004bee:	2b60      	cmp	r3, #96	@ 0x60
 8004bf0:	d905      	bls.n	8004bfe <create_name+0xce>
 8004bf2:	7efb      	ldrb	r3, [r7, #27]
 8004bf4:	2b7a      	cmp	r3, #122	@ 0x7a
 8004bf6:	d802      	bhi.n	8004bfe <create_name+0xce>
 8004bf8:	7efb      	ldrb	r3, [r7, #27]
 8004bfa:	3b20      	subs	r3, #32
 8004bfc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	613a      	str	r2, [r7, #16]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	4413      	add	r3, r2
 8004c08:	7efa      	ldrb	r2, [r7, #27]
 8004c0a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004c0c:	e7a6      	b.n	8004b5c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004c0e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	441a      	add	r2, r3
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <create_name+0xf4>
 8004c20:	2306      	movs	r3, #6
 8004c22:	e010      	b.n	8004c46 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2be5      	cmp	r3, #229	@ 0xe5
 8004c2a:	d102      	bne.n	8004c32 <create_name+0x102>
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2205      	movs	r2, #5
 8004c30:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004c32:	7efb      	ldrb	r3, [r7, #27]
 8004c34:	2b20      	cmp	r3, #32
 8004c36:	d801      	bhi.n	8004c3c <create_name+0x10c>
 8004c38:	2204      	movs	r2, #4
 8004c3a:	e000      	b.n	8004c3e <create_name+0x10e>
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	330b      	adds	r3, #11
 8004c42:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004c44:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3720      	adds	r7, #32
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	08006c6c 	.word	0x08006c6c
 8004c54:	08006c10 	.word	0x08006c10

08004c58 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004c6c:	e002      	b.n	8004c74 <follow_path+0x1c>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	3301      	adds	r3, #1
 8004c72:	603b      	str	r3, [r7, #0]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	2b2f      	cmp	r3, #47	@ 0x2f
 8004c7a:	d0f8      	beq.n	8004c6e <follow_path+0x16>
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	2b5c      	cmp	r3, #92	@ 0x5c
 8004c82:	d0f4      	beq.n	8004c6e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	2200      	movs	r2, #0
 8004c88:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b1f      	cmp	r3, #31
 8004c90:	d80a      	bhi.n	8004ca8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2280      	movs	r2, #128	@ 0x80
 8004c96:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7ff fcfa 	bl	8004696 <dir_sdi>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	75fb      	strb	r3, [r7, #23]
 8004ca6:	e043      	b.n	8004d30 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004ca8:	463b      	mov	r3, r7
 8004caa:	4619      	mov	r1, r3
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7ff ff3f 	bl	8004b30 <create_name>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004cb6:	7dfb      	ldrb	r3, [r7, #23]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d134      	bne.n	8004d26 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff feb0 	bl	8004a22 <dir_find>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004ccc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004cce:	7dfb      	ldrb	r3, [r7, #23]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004cd4:	7dfb      	ldrb	r3, [r7, #23]
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d127      	bne.n	8004d2a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004cda:	7afb      	ldrb	r3, [r7, #11]
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d122      	bne.n	8004d2a <follow_path+0xd2>
 8004ce4:	2305      	movs	r3, #5
 8004ce6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004ce8:	e01f      	b.n	8004d2a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004cea:	7afb      	ldrb	r3, [r7, #11]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d11c      	bne.n	8004d2e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	799b      	ldrb	r3, [r3, #6]
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d102      	bne.n	8004d06 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004d00:	2305      	movs	r3, #5
 8004d02:	75fb      	strb	r3, [r7, #23]
 8004d04:	e014      	b.n	8004d30 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d14:	4413      	add	r3, r2
 8004d16:	4619      	mov	r1, r3
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f7ff fe43 	bl	80049a4 <ld_clust>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004d24:	e7c0      	b.n	8004ca8 <follow_path+0x50>
			if (res != FR_OK) break;
 8004d26:	bf00      	nop
 8004d28:	e002      	b.n	8004d30 <follow_path+0xd8>
				break;
 8004d2a:	bf00      	nop
 8004d2c:	e000      	b.n	8004d30 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004d2e:	bf00      	nop
			}
		}
	}

	return res;
 8004d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3718      	adds	r7, #24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b087      	sub	sp, #28
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004d42:	f04f 33ff 	mov.w	r3, #4294967295
 8004d46:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d031      	beq.n	8004db4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	617b      	str	r3, [r7, #20]
 8004d56:	e002      	b.n	8004d5e <get_ldnumber+0x24>
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	617b      	str	r3, [r7, #20]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	2b20      	cmp	r3, #32
 8004d64:	d903      	bls.n	8004d6e <get_ldnumber+0x34>
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	2b3a      	cmp	r3, #58	@ 0x3a
 8004d6c:	d1f4      	bne.n	8004d58 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2b3a      	cmp	r3, #58	@ 0x3a
 8004d74:	d11c      	bne.n	8004db0 <get_ldnumber+0x76>
			tp = *path;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	60fa      	str	r2, [r7, #12]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	3b30      	subs	r3, #48	@ 0x30
 8004d86:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2b09      	cmp	r3, #9
 8004d8c:	d80e      	bhi.n	8004dac <get_ldnumber+0x72>
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d10a      	bne.n	8004dac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d107      	bne.n	8004dac <get_ldnumber+0x72>
					vol = (int)i;
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	3301      	adds	r3, #1
 8004da4:	617b      	str	r3, [r7, #20]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	e002      	b.n	8004db6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004db0:	2300      	movs	r3, #0
 8004db2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004db4:	693b      	ldr	r3, [r7, #16]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	371c      	adds	r7, #28
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
	...

08004dc4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	70da      	strb	r2, [r3, #3]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dda:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004ddc:	6839      	ldr	r1, [r7, #0]
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7ff f8dc 	bl	8003f9c <move_window>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <check_fs+0x2a>
 8004dea:	2304      	movs	r3, #4
 8004dec:	e038      	b.n	8004e60 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	3330      	adds	r3, #48	@ 0x30
 8004df2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fe fe1e 	bl	8003a38 <ld_word>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d001      	beq.n	8004e0c <check_fs+0x48>
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e029      	b.n	8004e60 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004e12:	2be9      	cmp	r3, #233	@ 0xe9
 8004e14:	d009      	beq.n	8004e2a <check_fs+0x66>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004e1c:	2beb      	cmp	r3, #235	@ 0xeb
 8004e1e:	d11e      	bne.n	8004e5e <check_fs+0x9a>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004e26:	2b90      	cmp	r3, #144	@ 0x90
 8004e28:	d119      	bne.n	8004e5e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3330      	adds	r3, #48	@ 0x30
 8004e2e:	3336      	adds	r3, #54	@ 0x36
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7fe fe1a 	bl	8003a6a <ld_dword>
 8004e36:	4603      	mov	r3, r0
 8004e38:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8004e68 <check_fs+0xa4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d101      	bne.n	8004e46 <check_fs+0x82>
 8004e42:	2300      	movs	r3, #0
 8004e44:	e00c      	b.n	8004e60 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	3330      	adds	r3, #48	@ 0x30
 8004e4a:	3352      	adds	r3, #82	@ 0x52
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fe fe0c 	bl	8003a6a <ld_dword>
 8004e52:	4603      	mov	r3, r0
 8004e54:	4a05      	ldr	r2, [pc, #20]	@ (8004e6c <check_fs+0xa8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d101      	bne.n	8004e5e <check_fs+0x9a>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	e000      	b.n	8004e60 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004e5e:	2302      	movs	r3, #2
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	00544146 	.word	0x00544146
 8004e6c:	33544146 	.word	0x33544146

08004e70 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b096      	sub	sp, #88	@ 0x58
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f7ff ff58 	bl	8004d3a <get_ldnumber>
 8004e8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004e8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	da01      	bge.n	8004e96 <find_volume+0x26>
 8004e92:	230b      	movs	r3, #11
 8004e94:	e22d      	b.n	80052f2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004e96:	4aa1      	ldr	r2, [pc, #644]	@ (800511c <find_volume+0x2ac>)
 8004e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <find_volume+0x3a>
 8004ea6:	230c      	movs	r3, #12
 8004ea8:	e223      	b.n	80052f2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004eae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004eb0:	79fb      	ldrb	r3, [r7, #7]
 8004eb2:	f023 0301 	bic.w	r3, r3, #1
 8004eb6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d01a      	beq.n	8004ef6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec2:	785b      	ldrb	r3, [r3, #1]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fe fd17 	bl	80038f8 <disk_status>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004ed0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10c      	bne.n	8004ef6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004edc:	79fb      	ldrb	r3, [r7, #7]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d007      	beq.n	8004ef2 <find_volume+0x82>
 8004ee2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004eee:	230a      	movs	r3, #10
 8004ef0:	e1ff      	b.n	80052f2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	e1fd      	b.n	80052f2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef8:	2200      	movs	r2, #0
 8004efa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f02:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f06:	785b      	ldrb	r3, [r3, #1]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fe fd0f 	bl	800392c <disk_initialize>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004f14:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004f20:	2303      	movs	r3, #3
 8004f22:	e1e6      	b.n	80052f2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004f24:	79fb      	ldrb	r3, [r7, #7]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d007      	beq.n	8004f3a <find_volume+0xca>
 8004f2a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004f36:	230a      	movs	r3, #10
 8004f38:	e1db      	b.n	80052f2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004f3e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004f40:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004f42:	f7ff ff3f 	bl	8004dc4 <check_fs>
 8004f46:	4603      	mov	r3, r0
 8004f48:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004f4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d149      	bne.n	8004fe8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004f54:	2300      	movs	r3, #0
 8004f56:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f58:	e01e      	b.n	8004f98 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f5c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004f60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f62:	011b      	lsls	r3, r3, #4
 8004f64:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8004f68:	4413      	add	r3, r2
 8004f6a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6e:	3304      	adds	r3, #4
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d006      	beq.n	8004f84 <find_volume+0x114>
 8004f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f78:	3308      	adds	r3, #8
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7fe fd75 	bl	8003a6a <ld_dword>
 8004f80:	4602      	mov	r2, r0
 8004f82:	e000      	b.n	8004f86 <find_volume+0x116>
 8004f84:	2200      	movs	r2, #0
 8004f86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	3358      	adds	r3, #88	@ 0x58
 8004f8c:	443b      	add	r3, r7
 8004f8e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004f92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f94:	3301      	adds	r3, #1
 8004f96:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f9a:	2b03      	cmp	r3, #3
 8004f9c:	d9dd      	bls.n	8004f5a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8004fa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <find_volume+0x13e>
 8004fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004faa:	3b01      	subs	r3, #1
 8004fac:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004fae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	3358      	adds	r3, #88	@ 0x58
 8004fb4:	443b      	add	r3, r7
 8004fb6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004fba:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004fbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d005      	beq.n	8004fce <find_volume+0x15e>
 8004fc2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004fc4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004fc6:	f7ff fefd 	bl	8004dc4 <check_fs>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	e000      	b.n	8004fd0 <find_volume+0x160>
 8004fce:	2303      	movs	r3, #3
 8004fd0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004fd4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d905      	bls.n	8004fe8 <find_volume+0x178>
 8004fdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fde:	3301      	adds	r3, #1
 8004fe0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fe2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fe4:	2b03      	cmp	r3, #3
 8004fe6:	d9e2      	bls.n	8004fae <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004fe8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d101      	bne.n	8004ff4 <find_volume+0x184>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e17e      	b.n	80052f2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004ff4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d901      	bls.n	8005000 <find_volume+0x190>
 8004ffc:	230d      	movs	r3, #13
 8004ffe:	e178      	b.n	80052f2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005002:	3330      	adds	r3, #48	@ 0x30
 8005004:	330b      	adds	r3, #11
 8005006:	4618      	mov	r0, r3
 8005008:	f7fe fd16 	bl	8003a38 <ld_word>
 800500c:	4603      	mov	r3, r0
 800500e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005012:	d001      	beq.n	8005018 <find_volume+0x1a8>
 8005014:	230d      	movs	r3, #13
 8005016:	e16c      	b.n	80052f2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800501a:	3330      	adds	r3, #48	@ 0x30
 800501c:	3316      	adds	r3, #22
 800501e:	4618      	mov	r0, r3
 8005020:	f7fe fd0a 	bl	8003a38 <ld_word>
 8005024:	4603      	mov	r3, r0
 8005026:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005028:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800502a:	2b00      	cmp	r3, #0
 800502c:	d106      	bne.n	800503c <find_volume+0x1cc>
 800502e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005030:	3330      	adds	r3, #48	@ 0x30
 8005032:	3324      	adds	r3, #36	@ 0x24
 8005034:	4618      	mov	r0, r3
 8005036:	f7fe fd18 	bl	8003a6a <ld_dword>
 800503a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800503c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800503e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005040:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005044:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8005048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800504a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800504c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800504e:	789b      	ldrb	r3, [r3, #2]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d005      	beq.n	8005060 <find_volume+0x1f0>
 8005054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005056:	789b      	ldrb	r3, [r3, #2]
 8005058:	2b02      	cmp	r3, #2
 800505a:	d001      	beq.n	8005060 <find_volume+0x1f0>
 800505c:	230d      	movs	r3, #13
 800505e:	e148      	b.n	80052f2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005062:	789b      	ldrb	r3, [r3, #2]
 8005064:	461a      	mov	r2, r3
 8005066:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005068:	fb02 f303 	mul.w	r3, r2, r3
 800506c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800506e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005074:	461a      	mov	r2, r3
 8005076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005078:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800507a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800507c:	895b      	ldrh	r3, [r3, #10]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d008      	beq.n	8005094 <find_volume+0x224>
 8005082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005084:	895b      	ldrh	r3, [r3, #10]
 8005086:	461a      	mov	r2, r3
 8005088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800508a:	895b      	ldrh	r3, [r3, #10]
 800508c:	3b01      	subs	r3, #1
 800508e:	4013      	ands	r3, r2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <find_volume+0x228>
 8005094:	230d      	movs	r3, #13
 8005096:	e12c      	b.n	80052f2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509a:	3330      	adds	r3, #48	@ 0x30
 800509c:	3311      	adds	r3, #17
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fe fcca 	bl	8003a38 <ld_word>
 80050a4:	4603      	mov	r3, r0
 80050a6:	461a      	mov	r2, r3
 80050a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050aa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80050ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ae:	891b      	ldrh	r3, [r3, #8]
 80050b0:	f003 030f 	and.w	r3, r3, #15
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <find_volume+0x24e>
 80050ba:	230d      	movs	r3, #13
 80050bc:	e119      	b.n	80052f2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80050be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c0:	3330      	adds	r3, #48	@ 0x30
 80050c2:	3313      	adds	r3, #19
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7fe fcb7 	bl	8003a38 <ld_word>
 80050ca:	4603      	mov	r3, r0
 80050cc:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80050ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d106      	bne.n	80050e2 <find_volume+0x272>
 80050d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d6:	3330      	adds	r3, #48	@ 0x30
 80050d8:	3320      	adds	r3, #32
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fe fcc5 	bl	8003a6a <ld_dword>
 80050e0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80050e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e4:	3330      	adds	r3, #48	@ 0x30
 80050e6:	330e      	adds	r3, #14
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fe fca5 	bl	8003a38 <ld_word>
 80050ee:	4603      	mov	r3, r0
 80050f0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80050f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <find_volume+0x28c>
 80050f8:	230d      	movs	r3, #13
 80050fa:	e0fa      	b.n	80052f2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80050fc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80050fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005100:	4413      	add	r3, r2
 8005102:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005104:	8912      	ldrh	r2, [r2, #8]
 8005106:	0912      	lsrs	r2, r2, #4
 8005108:	b292      	uxth	r2, r2
 800510a:	4413      	add	r3, r2
 800510c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800510e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005112:	429a      	cmp	r2, r3
 8005114:	d204      	bcs.n	8005120 <find_volume+0x2b0>
 8005116:	230d      	movs	r3, #13
 8005118:	e0eb      	b.n	80052f2 <find_volume+0x482>
 800511a:	bf00      	nop
 800511c:	2000024c 	.word	0x2000024c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005120:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005128:	8952      	ldrh	r2, [r2, #10]
 800512a:	fbb3 f3f2 	udiv	r3, r3, r2
 800512e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <find_volume+0x2ca>
 8005136:	230d      	movs	r3, #13
 8005138:	e0db      	b.n	80052f2 <find_volume+0x482>
		fmt = FS_FAT32;
 800513a:	2303      	movs	r3, #3
 800513c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005142:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005146:	4293      	cmp	r3, r2
 8005148:	d802      	bhi.n	8005150 <find_volume+0x2e0>
 800514a:	2302      	movs	r3, #2
 800514c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005152:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005156:	4293      	cmp	r3, r2
 8005158:	d802      	bhi.n	8005160 <find_volume+0x2f0>
 800515a:	2301      	movs	r3, #1
 800515c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005162:	1c9a      	adds	r2, r3, #2
 8005164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005166:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800516a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800516c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800516e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005170:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005172:	441a      	add	r2, r3
 8005174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005176:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005178:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800517a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800517c:	441a      	add	r2, r3
 800517e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005180:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8005182:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005186:	2b03      	cmp	r3, #3
 8005188:	d11e      	bne.n	80051c8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800518a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800518c:	3330      	adds	r3, #48	@ 0x30
 800518e:	332a      	adds	r3, #42	@ 0x2a
 8005190:	4618      	mov	r0, r3
 8005192:	f7fe fc51 	bl	8003a38 <ld_word>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <find_volume+0x330>
 800519c:	230d      	movs	r3, #13
 800519e:	e0a8      	b.n	80052f2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80051a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051a2:	891b      	ldrh	r3, [r3, #8]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <find_volume+0x33c>
 80051a8:	230d      	movs	r3, #13
 80051aa:	e0a2      	b.n	80052f2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80051ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ae:	3330      	adds	r3, #48	@ 0x30
 80051b0:	332c      	adds	r3, #44	@ 0x2c
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fe fc59 	bl	8003a6a <ld_dword>
 80051b8:	4602      	mov	r2, r0
 80051ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051bc:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80051be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80051c6:	e01f      	b.n	8005208 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80051c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ca:	891b      	ldrh	r3, [r3, #8]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <find_volume+0x364>
 80051d0:	230d      	movs	r3, #13
 80051d2:	e08e      	b.n	80052f2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80051d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d6:	6a1a      	ldr	r2, [r3, #32]
 80051d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051da:	441a      	add	r2, r3
 80051dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051de:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80051e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d103      	bne.n	80051f0 <find_volume+0x380>
 80051e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	e00a      	b.n	8005206 <find_volume+0x396>
 80051f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f2:	695a      	ldr	r2, [r3, #20]
 80051f4:	4613      	mov	r3, r2
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	4413      	add	r3, r2
 80051fa:	085a      	lsrs	r2, r3, #1
 80051fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005206:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800520a:	699a      	ldr	r2, [r3, #24]
 800520c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800520e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8005212:	0a5b      	lsrs	r3, r3, #9
 8005214:	429a      	cmp	r2, r3
 8005216:	d201      	bcs.n	800521c <find_volume+0x3ac>
 8005218:	230d      	movs	r3, #13
 800521a:	e06a      	b.n	80052f2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800521c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800521e:	f04f 32ff 	mov.w	r2, #4294967295
 8005222:	611a      	str	r2, [r3, #16]
 8005224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005226:	691a      	ldr	r2, [r3, #16]
 8005228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800522a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800522c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800522e:	2280      	movs	r2, #128	@ 0x80
 8005230:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005232:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005236:	2b03      	cmp	r3, #3
 8005238:	d149      	bne.n	80052ce <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800523a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800523c:	3330      	adds	r3, #48	@ 0x30
 800523e:	3330      	adds	r3, #48	@ 0x30
 8005240:	4618      	mov	r0, r3
 8005242:	f7fe fbf9 	bl	8003a38 <ld_word>
 8005246:	4603      	mov	r3, r0
 8005248:	2b01      	cmp	r3, #1
 800524a:	d140      	bne.n	80052ce <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800524c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800524e:	3301      	adds	r3, #1
 8005250:	4619      	mov	r1, r3
 8005252:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005254:	f7fe fea2 	bl	8003f9c <move_window>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d137      	bne.n	80052ce <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800525e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005260:	2200      	movs	r2, #0
 8005262:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005266:	3330      	adds	r3, #48	@ 0x30
 8005268:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800526c:	4618      	mov	r0, r3
 800526e:	f7fe fbe3 	bl	8003a38 <ld_word>
 8005272:	4603      	mov	r3, r0
 8005274:	461a      	mov	r2, r3
 8005276:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800527a:	429a      	cmp	r2, r3
 800527c:	d127      	bne.n	80052ce <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800527e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005280:	3330      	adds	r3, #48	@ 0x30
 8005282:	4618      	mov	r0, r3
 8005284:	f7fe fbf1 	bl	8003a6a <ld_dword>
 8005288:	4603      	mov	r3, r0
 800528a:	4a1c      	ldr	r2, [pc, #112]	@ (80052fc <find_volume+0x48c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d11e      	bne.n	80052ce <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005292:	3330      	adds	r3, #48	@ 0x30
 8005294:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005298:	4618      	mov	r0, r3
 800529a:	f7fe fbe6 	bl	8003a6a <ld_dword>
 800529e:	4603      	mov	r3, r0
 80052a0:	4a17      	ldr	r2, [pc, #92]	@ (8005300 <find_volume+0x490>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d113      	bne.n	80052ce <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80052a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a8:	3330      	adds	r3, #48	@ 0x30
 80052aa:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fe fbdb 	bl	8003a6a <ld_dword>
 80052b4:	4602      	mov	r2, r0
 80052b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80052ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052bc:	3330      	adds	r3, #48	@ 0x30
 80052be:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fe fbd1 	bl	8003a6a <ld_dword>
 80052c8:	4602      	mov	r2, r0
 80052ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052cc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80052ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80052d4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80052d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005304 <find_volume+0x494>)
 80052d8:	881b      	ldrh	r3, [r3, #0]
 80052da:	3301      	adds	r3, #1
 80052dc:	b29a      	uxth	r2, r3
 80052de:	4b09      	ldr	r3, [pc, #36]	@ (8005304 <find_volume+0x494>)
 80052e0:	801a      	strh	r2, [r3, #0]
 80052e2:	4b08      	ldr	r3, [pc, #32]	@ (8005304 <find_volume+0x494>)
 80052e4:	881a      	ldrh	r2, [r3, #0]
 80052e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80052ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80052ec:	f7fe fdee 	bl	8003ecc <clear_lock>
#endif
	return FR_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3758      	adds	r7, #88	@ 0x58
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	41615252 	.word	0x41615252
 8005300:	61417272 	.word	0x61417272
 8005304:	20000250 	.word	0x20000250

08005308 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005312:	2309      	movs	r3, #9
 8005314:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d01c      	beq.n	8005356 <validate+0x4e>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d018      	beq.n	8005356 <validate+0x4e>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d013      	beq.n	8005356 <validate+0x4e>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	889a      	ldrh	r2, [r3, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	88db      	ldrh	r3, [r3, #6]
 8005338:	429a      	cmp	r2, r3
 800533a:	d10c      	bne.n	8005356 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	785b      	ldrb	r3, [r3, #1]
 8005342:	4618      	mov	r0, r3
 8005344:	f7fe fad8 	bl	80038f8 <disk_status>
 8005348:	4603      	mov	r3, r0
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <validate+0x4e>
			res = FR_OK;
 8005352:	2300      	movs	r3, #0
 8005354:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005356:	7bfb      	ldrb	r3, [r7, #15]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d102      	bne.n	8005362 <validate+0x5a>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	e000      	b.n	8005364 <validate+0x5c>
 8005362:	2300      	movs	r3, #0
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	6013      	str	r3, [r2, #0]
	return res;
 8005368:	7bfb      	ldrb	r3, [r7, #15]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
	...

08005374 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b088      	sub	sp, #32
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	4613      	mov	r3, r2
 8005380:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005386:	f107 0310 	add.w	r3, r7, #16
 800538a:	4618      	mov	r0, r3
 800538c:	f7ff fcd5 	bl	8004d3a <get_ldnumber>
 8005390:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	2b00      	cmp	r3, #0
 8005396:	da01      	bge.n	800539c <f_mount+0x28>
 8005398:	230b      	movs	r3, #11
 800539a:	e02b      	b.n	80053f4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800539c:	4a17      	ldr	r2, [pc, #92]	@ (80053fc <f_mount+0x88>)
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d005      	beq.n	80053b8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80053ac:	69b8      	ldr	r0, [r7, #24]
 80053ae:	f7fe fd8d 	bl	8003ecc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	2200      	movs	r2, #0
 80053b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d002      	beq.n	80053c4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	490d      	ldr	r1, [pc, #52]	@ (80053fc <f_mount+0x88>)
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d002      	beq.n	80053da <f_mount+0x66>
 80053d4:	79fb      	ldrb	r3, [r7, #7]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d001      	beq.n	80053de <f_mount+0x6a>
 80053da:	2300      	movs	r3, #0
 80053dc:	e00a      	b.n	80053f4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80053de:	f107 010c 	add.w	r1, r7, #12
 80053e2:	f107 0308 	add.w	r3, r7, #8
 80053e6:	2200      	movs	r2, #0
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff fd41 	bl	8004e70 <find_volume>
 80053ee:	4603      	mov	r3, r0
 80053f0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80053f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3720      	adds	r7, #32
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	2000024c 	.word	0x2000024c

08005400 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b098      	sub	sp, #96	@ 0x60
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	4613      	mov	r3, r2
 800540c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <f_open+0x18>
 8005414:	2309      	movs	r3, #9
 8005416:	e1a9      	b.n	800576c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800541e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005420:	79fa      	ldrb	r2, [r7, #7]
 8005422:	f107 0110 	add.w	r1, r7, #16
 8005426:	f107 0308 	add.w	r3, r7, #8
 800542a:	4618      	mov	r0, r3
 800542c:	f7ff fd20 	bl	8004e70 <find_volume>
 8005430:	4603      	mov	r3, r0
 8005432:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8005436:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800543a:	2b00      	cmp	r3, #0
 800543c:	f040 818d 	bne.w	800575a <f_open+0x35a>
		dj.obj.fs = fs;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	f107 0314 	add.w	r3, r7, #20
 800544a:	4611      	mov	r1, r2
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff fc03 	bl	8004c58 <follow_path>
 8005452:	4603      	mov	r3, r0
 8005454:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005458:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800545c:	2b00      	cmp	r3, #0
 800545e:	d118      	bne.n	8005492 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005460:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005464:	b25b      	sxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	da03      	bge.n	8005472 <f_open+0x72>
				res = FR_INVALID_NAME;
 800546a:	2306      	movs	r3, #6
 800546c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005470:	e00f      	b.n	8005492 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005472:	79fb      	ldrb	r3, [r7, #7]
 8005474:	2b01      	cmp	r3, #1
 8005476:	bf8c      	ite	hi
 8005478:	2301      	movhi	r3, #1
 800547a:	2300      	movls	r3, #0
 800547c:	b2db      	uxtb	r3, r3
 800547e:	461a      	mov	r2, r3
 8005480:	f107 0314 	add.w	r3, r7, #20
 8005484:	4611      	mov	r1, r2
 8005486:	4618      	mov	r0, r3
 8005488:	f7fe fbd8 	bl	8003c3c <chk_lock>
 800548c:	4603      	mov	r3, r0
 800548e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005492:	79fb      	ldrb	r3, [r7, #7]
 8005494:	f003 031c 	and.w	r3, r3, #28
 8005498:	2b00      	cmp	r3, #0
 800549a:	d07f      	beq.n	800559c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800549c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d017      	beq.n	80054d4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80054a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	d10e      	bne.n	80054ca <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80054ac:	f7fe fc22 	bl	8003cf4 <enq_lock>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d006      	beq.n	80054c4 <f_open+0xc4>
 80054b6:	f107 0314 	add.w	r3, r7, #20
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff fb06 	bl	8004acc <dir_register>
 80054c0:	4603      	mov	r3, r0
 80054c2:	e000      	b.n	80054c6 <f_open+0xc6>
 80054c4:	2312      	movs	r3, #18
 80054c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80054ca:	79fb      	ldrb	r3, [r7, #7]
 80054cc:	f043 0308 	orr.w	r3, r3, #8
 80054d0:	71fb      	strb	r3, [r7, #7]
 80054d2:	e010      	b.n	80054f6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80054d4:	7ebb      	ldrb	r3, [r7, #26]
 80054d6:	f003 0311 	and.w	r3, r3, #17
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <f_open+0xe6>
					res = FR_DENIED;
 80054de:	2307      	movs	r3, #7
 80054e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80054e4:	e007      	b.n	80054f6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80054e6:	79fb      	ldrb	r3, [r7, #7]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d002      	beq.n	80054f6 <f_open+0xf6>
 80054f0:	2308      	movs	r3, #8
 80054f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80054f6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d168      	bne.n	80055d0 <f_open+0x1d0>
 80054fe:	79fb      	ldrb	r3, [r7, #7]
 8005500:	f003 0308 	and.w	r3, r3, #8
 8005504:	2b00      	cmp	r3, #0
 8005506:	d063      	beq.n	80055d0 <f_open+0x1d0>
				dw = GET_FATTIME();
 8005508:	f7fd fcbc 	bl	8002e84 <get_fattime>
 800550c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800550e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005510:	330e      	adds	r3, #14
 8005512:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005514:	4618      	mov	r0, r3
 8005516:	f7fe fae6 	bl	8003ae6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800551a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800551c:	3316      	adds	r3, #22
 800551e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005520:	4618      	mov	r0, r3
 8005522:	f7fe fae0 	bl	8003ae6 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005528:	330b      	adds	r3, #11
 800552a:	2220      	movs	r2, #32
 800552c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005532:	4611      	mov	r1, r2
 8005534:	4618      	mov	r0, r3
 8005536:	f7ff fa35 	bl	80049a4 <ld_clust>
 800553a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005540:	2200      	movs	r2, #0
 8005542:	4618      	mov	r0, r3
 8005544:	f7ff fa4d 	bl	80049e2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800554a:	331c      	adds	r3, #28
 800554c:	2100      	movs	r1, #0
 800554e:	4618      	mov	r0, r3
 8005550:	f7fe fac9 	bl	8003ae6 <st_dword>
					fs->wflag = 1;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	2201      	movs	r2, #1
 8005558:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800555a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d037      	beq.n	80055d0 <f_open+0x1d0>
						dw = fs->winsect;
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005564:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005566:	f107 0314 	add.w	r3, r7, #20
 800556a:	2200      	movs	r2, #0
 800556c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800556e:	4618      	mov	r0, r3
 8005570:	f7fe ff60 	bl	8004434 <remove_chain>
 8005574:	4603      	mov	r3, r0
 8005576:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800557a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800557e:	2b00      	cmp	r3, #0
 8005580:	d126      	bne.n	80055d0 <f_open+0x1d0>
							res = move_window(fs, dw);
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005586:	4618      	mov	r0, r3
 8005588:	f7fe fd08 	bl	8003f9c <move_window>
 800558c:	4603      	mov	r3, r0
 800558e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005596:	3a01      	subs	r2, #1
 8005598:	60da      	str	r2, [r3, #12]
 800559a:	e019      	b.n	80055d0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800559c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d115      	bne.n	80055d0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80055a4:	7ebb      	ldrb	r3, [r7, #26]
 80055a6:	f003 0310 	and.w	r3, r3, #16
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <f_open+0x1b6>
					res = FR_NO_FILE;
 80055ae:	2304      	movs	r3, #4
 80055b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80055b4:	e00c      	b.n	80055d0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80055b6:	79fb      	ldrb	r3, [r7, #7]
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d007      	beq.n	80055d0 <f_open+0x1d0>
 80055c0:	7ebb      	ldrb	r3, [r7, #26]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d002      	beq.n	80055d0 <f_open+0x1d0>
						res = FR_DENIED;
 80055ca:	2307      	movs	r3, #7
 80055cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80055d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d126      	bne.n	8005626 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80055d8:	79fb      	ldrb	r3, [r7, #7]
 80055da:	f003 0308 	and.w	r3, r3, #8
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80055e2:	79fb      	ldrb	r3, [r7, #7]
 80055e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055e8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80055f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80055f8:	79fb      	ldrb	r3, [r7, #7]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	bf8c      	ite	hi
 80055fe:	2301      	movhi	r3, #1
 8005600:	2300      	movls	r3, #0
 8005602:	b2db      	uxtb	r3, r3
 8005604:	461a      	mov	r2, r3
 8005606:	f107 0314 	add.w	r3, r7, #20
 800560a:	4611      	mov	r1, r2
 800560c:	4618      	mov	r0, r3
 800560e:	f7fe fb93 	bl	8003d38 <inc_lock>
 8005612:	4602      	mov	r2, r0
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d102      	bne.n	8005626 <f_open+0x226>
 8005620:	2302      	movs	r3, #2
 8005622:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005626:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800562a:	2b00      	cmp	r3, #0
 800562c:	f040 8095 	bne.w	800575a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005634:	4611      	mov	r1, r2
 8005636:	4618      	mov	r0, r3
 8005638:	f7ff f9b4 	bl	80049a4 <ld_clust>
 800563c:	4602      	mov	r2, r0
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005644:	331c      	adds	r3, #28
 8005646:	4618      	mov	r0, r3
 8005648:	f7fe fa0f 	bl	8003a6a <ld_dword>
 800564c:	4602      	mov	r2, r0
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	88da      	ldrh	r2, [r3, #6]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	79fa      	ldrb	r2, [r7, #7]
 800566a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	3330      	adds	r3, #48	@ 0x30
 8005682:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005686:	2100      	movs	r1, #0
 8005688:	4618      	mov	r0, r3
 800568a:	f7fe fa79 	bl	8003b80 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800568e:	79fb      	ldrb	r3, [r7, #7]
 8005690:	f003 0320 	and.w	r3, r3, #32
 8005694:	2b00      	cmp	r3, #0
 8005696:	d060      	beq.n	800575a <f_open+0x35a>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d05c      	beq.n	800575a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	895b      	ldrh	r3, [r3, #10]
 80056ac:	025b      	lsls	r3, r3, #9
 80056ae:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80056bc:	e016      	b.n	80056ec <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fe fd25 	bl	8004112 <get_fat>
 80056c8:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80056ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d802      	bhi.n	80056d6 <f_open+0x2d6>
 80056d0:	2302      	movs	r3, #2
 80056d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80056d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056dc:	d102      	bne.n	80056e4 <f_open+0x2e4>
 80056de:	2301      	movs	r3, #1
 80056e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80056e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80056e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80056ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d103      	bne.n	80056fc <f_open+0x2fc>
 80056f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80056f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d8e0      	bhi.n	80056be <f_open+0x2be>
				}
				fp->clust = clst;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005700:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005702:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005706:	2b00      	cmp	r3, #0
 8005708:	d127      	bne.n	800575a <f_open+0x35a>
 800570a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800570c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005710:	2b00      	cmp	r3, #0
 8005712:	d022      	beq.n	800575a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005718:	4618      	mov	r0, r3
 800571a:	f7fe fcdb 	bl	80040d4 <clust2sect>
 800571e:	6478      	str	r0, [r7, #68]	@ 0x44
 8005720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005722:	2b00      	cmp	r3, #0
 8005724:	d103      	bne.n	800572e <f_open+0x32e>
						res = FR_INT_ERR;
 8005726:	2302      	movs	r3, #2
 8005728:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800572c:	e015      	b.n	800575a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800572e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005730:	0a5a      	lsrs	r2, r3, #9
 8005732:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005734:	441a      	add	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	7858      	ldrb	r0, [r3, #1]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6a1a      	ldr	r2, [r3, #32]
 8005748:	2301      	movs	r3, #1
 800574a:	f7fe f917 	bl	800397c <disk_read>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <f_open+0x35a>
 8005754:	2301      	movs	r3, #1
 8005756:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800575a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <f_open+0x368>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005768:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800576c:	4618      	mov	r0, r3
 800576e:	3760      	adds	r7, #96	@ 0x60
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b08e      	sub	sp, #56	@ 0x38
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
 8005780:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f107 0214 	add.w	r2, r7, #20
 8005792:	4611      	mov	r1, r2
 8005794:	4618      	mov	r0, r3
 8005796:	f7ff fdb7 	bl	8005308 <validate>
 800579a:	4603      	mov	r3, r0
 800579c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80057a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d107      	bne.n	80057b8 <f_read+0x44>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	7d5b      	ldrb	r3, [r3, #21]
 80057ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80057b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <f_read+0x4a>
 80057b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80057bc:	e115      	b.n	80059ea <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	7d1b      	ldrb	r3, [r3, #20]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <f_read+0x5a>
 80057ca:	2307      	movs	r3, #7
 80057cc:	e10d      	b.n	80059ea <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	429a      	cmp	r2, r3
 80057e0:	f240 80fe 	bls.w	80059e0 <f_read+0x26c>
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80057e8:	e0fa      	b.n	80059e0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f040 80c6 	bne.w	8005984 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	0a5b      	lsrs	r3, r3, #9
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	8952      	ldrh	r2, [r2, #10]
 8005802:	3a01      	subs	r2, #1
 8005804:	4013      	ands	r3, r2
 8005806:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d12f      	bne.n	800586e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d103      	bne.n	800581e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	633b      	str	r3, [r7, #48]	@ 0x30
 800581c:	e013      	b.n	8005846 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005822:	2b00      	cmp	r3, #0
 8005824:	d007      	beq.n	8005836 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	4619      	mov	r1, r3
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f7fe fefe 	bl	800462e <clmt_clust>
 8005832:	6338      	str	r0, [r7, #48]	@ 0x30
 8005834:	e007      	b.n	8005846 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	69db      	ldr	r3, [r3, #28]
 800583c:	4619      	mov	r1, r3
 800583e:	4610      	mov	r0, r2
 8005840:	f7fe fc67 	bl	8004112 <get_fat>
 8005844:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005848:	2b01      	cmp	r3, #1
 800584a:	d804      	bhi.n	8005856 <f_read+0xe2>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2202      	movs	r2, #2
 8005850:	755a      	strb	r2, [r3, #21]
 8005852:	2302      	movs	r3, #2
 8005854:	e0c9      	b.n	80059ea <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585c:	d104      	bne.n	8005868 <f_read+0xf4>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2201      	movs	r2, #1
 8005862:	755a      	strb	r2, [r3, #21]
 8005864:	2301      	movs	r3, #1
 8005866:	e0c0      	b.n	80059ea <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800586c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	69db      	ldr	r3, [r3, #28]
 8005874:	4619      	mov	r1, r3
 8005876:	4610      	mov	r0, r2
 8005878:	f7fe fc2c 	bl	80040d4 <clust2sect>
 800587c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d104      	bne.n	800588e <f_read+0x11a>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2202      	movs	r2, #2
 8005888:	755a      	strb	r2, [r3, #21]
 800588a:	2302      	movs	r3, #2
 800588c:	e0ad      	b.n	80059ea <f_read+0x276>
			sect += csect;
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	4413      	add	r3, r2
 8005894:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	0a5b      	lsrs	r3, r3, #9
 800589a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800589c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d039      	beq.n	8005916 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80058a2:	69fa      	ldr	r2, [r7, #28]
 80058a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a6:	4413      	add	r3, r2
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	8952      	ldrh	r2, [r2, #10]
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d905      	bls.n	80058bc <f_read+0x148>
					cc = fs->csize - csect;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	895b      	ldrh	r3, [r3, #10]
 80058b4:	461a      	mov	r2, r3
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	7858      	ldrb	r0, [r3, #1]
 80058c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058c6:	f7fe f859 	bl	800397c <disk_read>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d004      	beq.n	80058da <f_read+0x166>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2201      	movs	r2, #1
 80058d4:	755a      	strb	r2, [r3, #21]
 80058d6:	2301      	movs	r3, #1
 80058d8:	e087      	b.n	80059ea <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	7d1b      	ldrb	r3, [r3, #20]
 80058de:	b25b      	sxtb	r3, r3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	da14      	bge.n	800590e <f_read+0x19a>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a1a      	ldr	r2, [r3, #32]
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d90d      	bls.n	800590e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a1a      	ldr	r2, [r3, #32]
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	025b      	lsls	r3, r3, #9
 80058fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058fe:	18d0      	adds	r0, r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	3330      	adds	r3, #48	@ 0x30
 8005904:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005908:	4619      	mov	r1, r3
 800590a:	f7fe f918 	bl	8003b3e <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800590e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005910:	025b      	lsls	r3, r3, #9
 8005912:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8005914:	e050      	b.n	80059b8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	429a      	cmp	r2, r3
 800591e:	d02e      	beq.n	800597e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	7d1b      	ldrb	r3, [r3, #20]
 8005924:	b25b      	sxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	da18      	bge.n	800595c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	7858      	ldrb	r0, [r3, #1]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a1a      	ldr	r2, [r3, #32]
 8005938:	2301      	movs	r3, #1
 800593a:	f7fe f83f 	bl	80039bc <disk_write>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d004      	beq.n	800594e <f_read+0x1da>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2201      	movs	r2, #1
 8005948:	755a      	strb	r2, [r3, #21]
 800594a:	2301      	movs	r3, #1
 800594c:	e04d      	b.n	80059ea <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	7d1b      	ldrb	r3, [r3, #20]
 8005952:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005956:	b2da      	uxtb	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	7858      	ldrb	r0, [r3, #1]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005966:	2301      	movs	r3, #1
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	f7fe f807 	bl	800397c <disk_read>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d004      	beq.n	800597e <f_read+0x20a>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2201      	movs	r2, #1
 8005978:	755a      	strb	r2, [r3, #21]
 800597a:	2301      	movs	r3, #1
 800597c:	e035      	b.n	80059ea <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800598c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8005990:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005992:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	429a      	cmp	r2, r3
 8005998:	d901      	bls.n	800599e <f_read+0x22a>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ac:	4413      	add	r3, r2
 80059ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059b0:	4619      	mov	r1, r3
 80059b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80059b4:	f7fe f8c3 	bl	8003b3e <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80059b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059bc:	4413      	add	r3, r2
 80059be:	627b      	str	r3, [r7, #36]	@ 0x24
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	699a      	ldr	r2, [r3, #24]
 80059c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c6:	441a      	add	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	619a      	str	r2, [r3, #24]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d2:	441a      	add	r2, r3
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f47f af01 	bne.w	80057ea <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3738      	adds	r7, #56	@ 0x38
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b08c      	sub	sp, #48	@ 0x30
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	60f8      	str	r0, [r7, #12]
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	607a      	str	r2, [r7, #4]
 80059fe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	2200      	movs	r2, #0
 8005a08:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f107 0210 	add.w	r2, r7, #16
 8005a10:	4611      	mov	r1, r2
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7ff fc78 	bl	8005308 <validate>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005a1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d107      	bne.n	8005a36 <f_write+0x44>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	7d5b      	ldrb	r3, [r3, #21]
 8005a2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005a2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d002      	beq.n	8005a3c <f_write+0x4a>
 8005a36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a3a:	e14b      	b.n	8005cd4 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	7d1b      	ldrb	r3, [r3, #20]
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <f_write+0x5a>
 8005a48:	2307      	movs	r3, #7
 8005a4a:	e143      	b.n	8005cd4 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	699a      	ldr	r2, [r3, #24]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	441a      	add	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	f080 812d 	bcs.w	8005cb8 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	43db      	mvns	r3, r3
 8005a64:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005a66:	e127      	b.n	8005cb8 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f040 80e3 	bne.w	8005c3c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	0a5b      	lsrs	r3, r3, #9
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	8952      	ldrh	r2, [r2, #10]
 8005a80:	3a01      	subs	r2, #1
 8005a82:	4013      	ands	r3, r2
 8005a84:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d143      	bne.n	8005b14 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10c      	bne.n	8005aae <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d11a      	bne.n	8005ad6 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7fe fd2a 	bl	80044fe <create_chain>
 8005aaa:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005aac:	e013      	b.n	8005ad6 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d007      	beq.n	8005ac6 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	4619      	mov	r1, r3
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f7fe fdb6 	bl	800462e <clmt_clust>
 8005ac2:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005ac4:	e007      	b.n	8005ad6 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	4619      	mov	r1, r3
 8005ace:	4610      	mov	r0, r2
 8005ad0:	f7fe fd15 	bl	80044fe <create_chain>
 8005ad4:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 80f2 	beq.w	8005cc2 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d104      	bne.n	8005aee <f_write+0xfc>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	755a      	strb	r2, [r3, #21]
 8005aea:	2302      	movs	r3, #2
 8005aec:	e0f2      	b.n	8005cd4 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af4:	d104      	bne.n	8005b00 <f_write+0x10e>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2201      	movs	r2, #1
 8005afa:	755a      	strb	r2, [r3, #21]
 8005afc:	2301      	movs	r3, #1
 8005afe:	e0e9      	b.n	8005cd4 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b04:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d102      	bne.n	8005b14 <f_write+0x122>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b12:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	7d1b      	ldrb	r3, [r3, #20]
 8005b18:	b25b      	sxtb	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	da18      	bge.n	8005b50 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	7858      	ldrb	r0, [r3, #1]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6a1a      	ldr	r2, [r3, #32]
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	f7fd ff45 	bl	80039bc <disk_write>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d004      	beq.n	8005b42 <f_write+0x150>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	755a      	strb	r2, [r3, #21]
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e0c8      	b.n	8005cd4 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	7d1b      	ldrb	r3, [r3, #20]
 8005b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	4619      	mov	r1, r3
 8005b58:	4610      	mov	r0, r2
 8005b5a:	f7fe fabb 	bl	80040d4 <clust2sect>
 8005b5e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d104      	bne.n	8005b70 <f_write+0x17e>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2202      	movs	r2, #2
 8005b6a:	755a      	strb	r2, [r3, #21]
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e0b1      	b.n	8005cd4 <f_write+0x2e2>
			sect += csect;
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	4413      	add	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	0a5b      	lsrs	r3, r3, #9
 8005b7c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d03c      	beq.n	8005bfe <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	4413      	add	r3, r2
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	8952      	ldrh	r2, [r2, #10]
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d905      	bls.n	8005b9e <f_write+0x1ac>
					cc = fs->csize - csect;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	895b      	ldrh	r3, [r3, #10]
 8005b96:	461a      	mov	r2, r3
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	7858      	ldrb	r0, [r3, #1]
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	69f9      	ldr	r1, [r7, #28]
 8005ba8:	f7fd ff08 	bl	80039bc <disk_write>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d004      	beq.n	8005bbc <f_write+0x1ca>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	755a      	strb	r2, [r3, #21]
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e08b      	b.n	8005cd4 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6a1a      	ldr	r2, [r3, #32]
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	6a3a      	ldr	r2, [r7, #32]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d915      	bls.n	8005bf6 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6a1a      	ldr	r2, [r3, #32]
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	025b      	lsls	r3, r3, #9
 8005bda:	69fa      	ldr	r2, [r7, #28]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005be2:	4619      	mov	r1, r3
 8005be4:	f7fd ffab 	bl	8003b3e <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	7d1b      	ldrb	r3, [r3, #20]
 8005bec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005bf6:	6a3b      	ldr	r3, [r7, #32]
 8005bf8:	025b      	lsls	r3, r3, #9
 8005bfa:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8005bfc:	e03f      	b.n	8005c7e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d016      	beq.n	8005c36 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	699a      	ldr	r2, [r3, #24]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d210      	bcs.n	8005c36 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	7858      	ldrb	r0, [r3, #1]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005c1e:	2301      	movs	r3, #1
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	f7fd feab 	bl	800397c <disk_read>
 8005c26:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d004      	beq.n	8005c36 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	755a      	strb	r2, [r3, #21]
 8005c32:	2301      	movs	r3, #1
 8005c34:	e04e      	b.n	8005cd4 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c44:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8005c48:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d901      	bls.n	8005c56 <f_write+0x264>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c64:	4413      	add	r3, r2
 8005c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c68:	69f9      	ldr	r1, [r7, #28]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fd ff67 	bl	8003b3e <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	7d1b      	ldrb	r3, [r3, #20]
 8005c74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005c7e:	69fa      	ldr	r2, [r7, #28]
 8005c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c82:	4413      	add	r3, r2
 8005c84:	61fb      	str	r3, [r7, #28]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	699a      	ldr	r2, [r3, #24]
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8c:	441a      	add	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	619a      	str	r2, [r3, #24]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	bf38      	it	cc
 8005c9e:	461a      	movcc	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	60da      	str	r2, [r3, #12]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005caa:	441a      	add	r2, r3
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	601a      	str	r2, [r3, #0]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f47f aed4 	bne.w	8005a68 <f_write+0x76>
 8005cc0:	e000      	b.n	8005cc4 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005cc2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	7d1b      	ldrb	r3, [r3, #20]
 8005cc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3730      	adds	r7, #48	@ 0x30
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f107 0208 	add.w	r2, r7, #8
 8005cea:	4611      	mov	r1, r2
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7ff fb0b 	bl	8005308 <validate>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005cf6:	7dfb      	ldrb	r3, [r7, #23]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d168      	bne.n	8005dce <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	7d1b      	ldrb	r3, [r3, #20]
 8005d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d062      	beq.n	8005dce <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	7d1b      	ldrb	r3, [r3, #20]
 8005d0c:	b25b      	sxtb	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	da15      	bge.n	8005d3e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	7858      	ldrb	r0, [r3, #1]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a1a      	ldr	r2, [r3, #32]
 8005d20:	2301      	movs	r3, #1
 8005d22:	f7fd fe4b 	bl	80039bc <disk_write>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <f_sync+0x54>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e04f      	b.n	8005dd0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	7d1b      	ldrb	r3, [r3, #20]
 8005d34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005d3e:	f7fd f8a1 	bl	8002e84 <get_fattime>
 8005d42:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	f7fe f925 	bl	8003f9c <move_window>
 8005d52:	4603      	mov	r3, r0
 8005d54:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005d56:	7dfb      	ldrb	r3, [r7, #23]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d138      	bne.n	8005dce <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d60:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	330b      	adds	r3, #11
 8005d66:	781a      	ldrb	r2, [r3, #0]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	330b      	adds	r3, #11
 8005d6c:	f042 0220 	orr.w	r2, r2, #32
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6818      	ldr	r0, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	68f9      	ldr	r1, [r7, #12]
 8005d80:	f7fe fe2f 	bl	80049e2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f103 021c 	add.w	r2, r3, #28
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	4619      	mov	r1, r3
 8005d90:	4610      	mov	r0, r2
 8005d92:	f7fd fea8 	bl	8003ae6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	3316      	adds	r3, #22
 8005d9a:	6939      	ldr	r1, [r7, #16]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7fd fea2 	bl	8003ae6 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	3312      	adds	r3, #18
 8005da6:	2100      	movs	r1, #0
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fd fe81 	bl	8003ab0 <st_word>
					fs->wflag = 1;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2201      	movs	r2, #1
 8005db2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fe f91e 	bl	8003ff8 <sync_fs>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	7d1b      	ldrb	r3, [r3, #20]
 8005dc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dc8:	b2da      	uxtb	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3718      	adds	r7, #24
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7ff ff7b 	bl	8005cdc <f_sync>
 8005de6:	4603      	mov	r3, r0
 8005de8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d118      	bne.n	8005e22 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f107 0208 	add.w	r2, r7, #8
 8005df6:	4611      	mov	r1, r2
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7ff fa85 	bl	8005308 <validate>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10c      	bne.n	8005e22 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7fe f821 	bl	8003e54 <dec_lock>
 8005e12:	4603      	mov	r3, r0
 8005e14:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005e16:	7bfb      	ldrb	r3, [r7, #15]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d102      	bne.n	8005e22 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b092      	sub	sp, #72	@ 0x48
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8005e38:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8005e3c:	f107 030c 	add.w	r3, r7, #12
 8005e40:	2200      	movs	r2, #0
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7ff f814 	bl	8004e70 <find_volume>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8005e4e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f040 8099 	bne.w	8005f8a <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8005e58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8005e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e60:	691a      	ldr	r2, [r3, #16]
 8005e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	3b02      	subs	r3, #2
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d804      	bhi.n	8005e76 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8005e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e6e:	691a      	ldr	r2, [r3, #16]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	e089      	b.n	8005f8a <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8005e76:	2300      	movs	r3, #0
 8005e78:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8005e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d128      	bne.n	8005ed4 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8005e82:	2302      	movs	r3, #2
 8005e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e88:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8005e8a:	f107 0314 	add.w	r3, r7, #20
 8005e8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7fe f93e 	bl	8004112 <get_fat>
 8005e96:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8005e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9e:	d103      	bne.n	8005ea8 <f_getfree+0x7c>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005ea6:	e063      	b.n	8005f70 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8005ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d103      	bne.n	8005eb6 <f_getfree+0x8a>
 8005eae:	2302      	movs	r3, #2
 8005eb0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005eb4:	e05c      	b.n	8005f70 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8005eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d102      	bne.n	8005ec2 <f_getfree+0x96>
 8005ebc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8005ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d3db      	bcc.n	8005e8a <f_getfree+0x5e>
 8005ed2:	e04d      	b.n	8005f70 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8005ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8005ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d113      	bne.n	8005f16 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8005eee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	f7fe f850 	bl	8003f9c <move_window>
 8005efc:	4603      	mov	r3, r0
 8005efe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8005f02:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d131      	bne.n	8005f6e <f_getfree+0x142>
							p = fs->win;
 8005f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f0c:	3330      	adds	r3, #48	@ 0x30
 8005f0e:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8005f10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f14:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8005f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d10f      	bne.n	8005f3e <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8005f1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f20:	f7fd fd8a 	bl	8003a38 <ld_word>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d102      	bne.n	8005f30 <f_getfree+0x104>
 8005f2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8005f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f32:	3302      	adds	r3, #2
 8005f34:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f38:	3b02      	subs	r3, #2
 8005f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f3c:	e010      	b.n	8005f60 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8005f3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f40:	f7fd fd93 	bl	8003a6a <ld_dword>
 8005f44:	4603      	mov	r3, r0
 8005f46:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d102      	bne.n	8005f54 <f_getfree+0x128>
 8005f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f50:	3301      	adds	r3, #1
 8005f52:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8005f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f56:	3304      	adds	r3, #4
 8005f58:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f5c:	3b04      	subs	r3, #4
 8005f5e:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8005f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f62:	3b01      	subs	r3, #1
 8005f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1bd      	bne.n	8005ee8 <f_getfree+0xbc>
 8005f6c:	e000      	b.n	8005f70 <f_getfree+0x144>
							if (res != FR_OK) break;
 8005f6e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f74:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8005f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f7a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8005f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7e:	791a      	ldrb	r2, [r3, #4]
 8005f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f82:	f042 0201 	orr.w	r2, r2, #1
 8005f86:	b2d2      	uxtb	r2, r2
 8005f88:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8005f8a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3748      	adds	r7, #72	@ 0x48
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b088      	sub	sp, #32
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	60b9      	str	r1, [r7, #8]
 8005fa0:	607a      	str	r2, [r7, #4]
	int n = 0;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005faa:	e01c      	b.n	8005fe6 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8005fac:	f107 0310 	add.w	r3, r7, #16
 8005fb0:	f107 0114 	add.w	r1, r7, #20
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff fbdc 	bl	8005774 <f_read>
		if (rc != 1) break;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d117      	bne.n	8005ff2 <f_gets+0x5c>
		c = s[0];
 8005fc2:	7d3b      	ldrb	r3, [r7, #20]
 8005fc4:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005fc6:	7dfb      	ldrb	r3, [r7, #23]
 8005fc8:	2b0d      	cmp	r3, #13
 8005fca:	d00b      	beq.n	8005fe4 <f_gets+0x4e>
		*p++ = c;
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	1c5a      	adds	r2, r3, #1
 8005fd0:	61ba      	str	r2, [r7, #24]
 8005fd2:	7dfa      	ldrb	r2, [r7, #23]
 8005fd4:	701a      	strb	r2, [r3, #0]
		n++;
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8005fdc:	7dfb      	ldrb	r3, [r7, #23]
 8005fde:	2b0a      	cmp	r3, #10
 8005fe0:	d009      	beq.n	8005ff6 <f_gets+0x60>
 8005fe2:	e000      	b.n	8005fe6 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005fe4:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	69fa      	ldr	r2, [r7, #28]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	dbdd      	blt.n	8005fac <f_gets+0x16>
 8005ff0:	e002      	b.n	8005ff8 <f_gets+0x62>
		if (rc != 1) break;
 8005ff2:	bf00      	nop
 8005ff4:	e000      	b.n	8005ff8 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8005ff6:	bf00      	nop
	}
	*p = 0;
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <f_gets+0x72>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	e000      	b.n	800600a <f_gets+0x74>
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3720      	adds	r7, #32
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
	...

08006014 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006014:	b480      	push	{r7}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	4613      	mov	r3, r2
 8006020:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006022:	2301      	movs	r3, #1
 8006024:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006026:	2300      	movs	r3, #0
 8006028:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800602a:	4b1f      	ldr	r3, [pc, #124]	@ (80060a8 <FATFS_LinkDriverEx+0x94>)
 800602c:	7a5b      	ldrb	r3, [r3, #9]
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d131      	bne.n	8006098 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006034:	4b1c      	ldr	r3, [pc, #112]	@ (80060a8 <FATFS_LinkDriverEx+0x94>)
 8006036:	7a5b      	ldrb	r3, [r3, #9]
 8006038:	b2db      	uxtb	r3, r3
 800603a:	461a      	mov	r2, r3
 800603c:	4b1a      	ldr	r3, [pc, #104]	@ (80060a8 <FATFS_LinkDriverEx+0x94>)
 800603e:	2100      	movs	r1, #0
 8006040:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006042:	4b19      	ldr	r3, [pc, #100]	@ (80060a8 <FATFS_LinkDriverEx+0x94>)
 8006044:	7a5b      	ldrb	r3, [r3, #9]
 8006046:	b2db      	uxtb	r3, r3
 8006048:	4a17      	ldr	r2, [pc, #92]	@ (80060a8 <FATFS_LinkDriverEx+0x94>)
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006052:	4b15      	ldr	r3, [pc, #84]	@ (80060a8 <FATFS_LinkDriverEx+0x94>)
 8006054:	7a5b      	ldrb	r3, [r3, #9]
 8006056:	b2db      	uxtb	r3, r3
 8006058:	461a      	mov	r2, r3
 800605a:	4b13      	ldr	r3, [pc, #76]	@ (80060a8 <FATFS_LinkDriverEx+0x94>)
 800605c:	4413      	add	r3, r2
 800605e:	79fa      	ldrb	r2, [r7, #7]
 8006060:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006062:	4b11      	ldr	r3, [pc, #68]	@ (80060a8 <FATFS_LinkDriverEx+0x94>)
 8006064:	7a5b      	ldrb	r3, [r3, #9]
 8006066:	b2db      	uxtb	r3, r3
 8006068:	1c5a      	adds	r2, r3, #1
 800606a:	b2d1      	uxtb	r1, r2
 800606c:	4a0e      	ldr	r2, [pc, #56]	@ (80060a8 <FATFS_LinkDriverEx+0x94>)
 800606e:	7251      	strb	r1, [r2, #9]
 8006070:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006072:	7dbb      	ldrb	r3, [r7, #22]
 8006074:	3330      	adds	r3, #48	@ 0x30
 8006076:	b2da      	uxtb	r2, r3
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	3301      	adds	r3, #1
 8006080:	223a      	movs	r2, #58	@ 0x3a
 8006082:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	3302      	adds	r3, #2
 8006088:	222f      	movs	r2, #47	@ 0x2f
 800608a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	3303      	adds	r3, #3
 8006090:	2200      	movs	r2, #0
 8006092:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006094:	2300      	movs	r3, #0
 8006096:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006098:	7dfb      	ldrb	r3, [r7, #23]
}
 800609a:	4618      	mov	r0, r3
 800609c:	371c      	adds	r7, #28
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	20000274 	.word	0x20000274

080060ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80060b6:	2200      	movs	r2, #0
 80060b8:	6839      	ldr	r1, [r7, #0]
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7ff ffaa 	bl	8006014 <FATFS_LinkDriverEx>
 80060c0:	4603      	mov	r3, r0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <_vsniprintf_r>:
 80060ca:	b530      	push	{r4, r5, lr}
 80060cc:	4614      	mov	r4, r2
 80060ce:	2c00      	cmp	r4, #0
 80060d0:	b09b      	sub	sp, #108	@ 0x6c
 80060d2:	4605      	mov	r5, r0
 80060d4:	461a      	mov	r2, r3
 80060d6:	da05      	bge.n	80060e4 <_vsniprintf_r+0x1a>
 80060d8:	238b      	movs	r3, #139	@ 0x8b
 80060da:	6003      	str	r3, [r0, #0]
 80060dc:	f04f 30ff 	mov.w	r0, #4294967295
 80060e0:	b01b      	add	sp, #108	@ 0x6c
 80060e2:	bd30      	pop	{r4, r5, pc}
 80060e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80060e8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80060ec:	f04f 0300 	mov.w	r3, #0
 80060f0:	9319      	str	r3, [sp, #100]	@ 0x64
 80060f2:	bf14      	ite	ne
 80060f4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80060f8:	4623      	moveq	r3, r4
 80060fa:	9302      	str	r3, [sp, #8]
 80060fc:	9305      	str	r3, [sp, #20]
 80060fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006102:	9100      	str	r1, [sp, #0]
 8006104:	9104      	str	r1, [sp, #16]
 8006106:	f8ad 300e 	strh.w	r3, [sp, #14]
 800610a:	4669      	mov	r1, sp
 800610c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800610e:	f000 f9a1 	bl	8006454 <_svfiprintf_r>
 8006112:	1c43      	adds	r3, r0, #1
 8006114:	bfbc      	itt	lt
 8006116:	238b      	movlt	r3, #139	@ 0x8b
 8006118:	602b      	strlt	r3, [r5, #0]
 800611a:	2c00      	cmp	r4, #0
 800611c:	d0e0      	beq.n	80060e0 <_vsniprintf_r+0x16>
 800611e:	9b00      	ldr	r3, [sp, #0]
 8006120:	2200      	movs	r2, #0
 8006122:	701a      	strb	r2, [r3, #0]
 8006124:	e7dc      	b.n	80060e0 <_vsniprintf_r+0x16>
	...

08006128 <vsniprintf>:
 8006128:	b507      	push	{r0, r1, r2, lr}
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	4613      	mov	r3, r2
 800612e:	460a      	mov	r2, r1
 8006130:	4601      	mov	r1, r0
 8006132:	4803      	ldr	r0, [pc, #12]	@ (8006140 <vsniprintf+0x18>)
 8006134:	6800      	ldr	r0, [r0, #0]
 8006136:	f7ff ffc8 	bl	80060ca <_vsniprintf_r>
 800613a:	b003      	add	sp, #12
 800613c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006140:	20000024 	.word	0x20000024

08006144 <memset>:
 8006144:	4402      	add	r2, r0
 8006146:	4603      	mov	r3, r0
 8006148:	4293      	cmp	r3, r2
 800614a:	d100      	bne.n	800614e <memset+0xa>
 800614c:	4770      	bx	lr
 800614e:	f803 1b01 	strb.w	r1, [r3], #1
 8006152:	e7f9      	b.n	8006148 <memset+0x4>

08006154 <__errno>:
 8006154:	4b01      	ldr	r3, [pc, #4]	@ (800615c <__errno+0x8>)
 8006156:	6818      	ldr	r0, [r3, #0]
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	20000024 	.word	0x20000024

08006160 <__libc_init_array>:
 8006160:	b570      	push	{r4, r5, r6, lr}
 8006162:	4d0d      	ldr	r5, [pc, #52]	@ (8006198 <__libc_init_array+0x38>)
 8006164:	4c0d      	ldr	r4, [pc, #52]	@ (800619c <__libc_init_array+0x3c>)
 8006166:	1b64      	subs	r4, r4, r5
 8006168:	10a4      	asrs	r4, r4, #2
 800616a:	2600      	movs	r6, #0
 800616c:	42a6      	cmp	r6, r4
 800616e:	d109      	bne.n	8006184 <__libc_init_array+0x24>
 8006170:	4d0b      	ldr	r5, [pc, #44]	@ (80061a0 <__libc_init_array+0x40>)
 8006172:	4c0c      	ldr	r4, [pc, #48]	@ (80061a4 <__libc_init_array+0x44>)
 8006174:	f000 fc64 	bl	8006a40 <_init>
 8006178:	1b64      	subs	r4, r4, r5
 800617a:	10a4      	asrs	r4, r4, #2
 800617c:	2600      	movs	r6, #0
 800617e:	42a6      	cmp	r6, r4
 8006180:	d105      	bne.n	800618e <__libc_init_array+0x2e>
 8006182:	bd70      	pop	{r4, r5, r6, pc}
 8006184:	f855 3b04 	ldr.w	r3, [r5], #4
 8006188:	4798      	blx	r3
 800618a:	3601      	adds	r6, #1
 800618c:	e7ee      	b.n	800616c <__libc_init_array+0xc>
 800618e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006192:	4798      	blx	r3
 8006194:	3601      	adds	r6, #1
 8006196:	e7f2      	b.n	800617e <__libc_init_array+0x1e>
 8006198:	08006d28 	.word	0x08006d28
 800619c:	08006d28 	.word	0x08006d28
 80061a0:	08006d28 	.word	0x08006d28
 80061a4:	08006d2c 	.word	0x08006d2c

080061a8 <__retarget_lock_acquire_recursive>:
 80061a8:	4770      	bx	lr

080061aa <__retarget_lock_release_recursive>:
 80061aa:	4770      	bx	lr

080061ac <_free_r>:
 80061ac:	b538      	push	{r3, r4, r5, lr}
 80061ae:	4605      	mov	r5, r0
 80061b0:	2900      	cmp	r1, #0
 80061b2:	d041      	beq.n	8006238 <_free_r+0x8c>
 80061b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061b8:	1f0c      	subs	r4, r1, #4
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	bfb8      	it	lt
 80061be:	18e4      	addlt	r4, r4, r3
 80061c0:	f000 f8e0 	bl	8006384 <__malloc_lock>
 80061c4:	4a1d      	ldr	r2, [pc, #116]	@ (800623c <_free_r+0x90>)
 80061c6:	6813      	ldr	r3, [r2, #0]
 80061c8:	b933      	cbnz	r3, 80061d8 <_free_r+0x2c>
 80061ca:	6063      	str	r3, [r4, #4]
 80061cc:	6014      	str	r4, [r2, #0]
 80061ce:	4628      	mov	r0, r5
 80061d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061d4:	f000 b8dc 	b.w	8006390 <__malloc_unlock>
 80061d8:	42a3      	cmp	r3, r4
 80061da:	d908      	bls.n	80061ee <_free_r+0x42>
 80061dc:	6820      	ldr	r0, [r4, #0]
 80061de:	1821      	adds	r1, r4, r0
 80061e0:	428b      	cmp	r3, r1
 80061e2:	bf01      	itttt	eq
 80061e4:	6819      	ldreq	r1, [r3, #0]
 80061e6:	685b      	ldreq	r3, [r3, #4]
 80061e8:	1809      	addeq	r1, r1, r0
 80061ea:	6021      	streq	r1, [r4, #0]
 80061ec:	e7ed      	b.n	80061ca <_free_r+0x1e>
 80061ee:	461a      	mov	r2, r3
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	b10b      	cbz	r3, 80061f8 <_free_r+0x4c>
 80061f4:	42a3      	cmp	r3, r4
 80061f6:	d9fa      	bls.n	80061ee <_free_r+0x42>
 80061f8:	6811      	ldr	r1, [r2, #0]
 80061fa:	1850      	adds	r0, r2, r1
 80061fc:	42a0      	cmp	r0, r4
 80061fe:	d10b      	bne.n	8006218 <_free_r+0x6c>
 8006200:	6820      	ldr	r0, [r4, #0]
 8006202:	4401      	add	r1, r0
 8006204:	1850      	adds	r0, r2, r1
 8006206:	4283      	cmp	r3, r0
 8006208:	6011      	str	r1, [r2, #0]
 800620a:	d1e0      	bne.n	80061ce <_free_r+0x22>
 800620c:	6818      	ldr	r0, [r3, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	6053      	str	r3, [r2, #4]
 8006212:	4408      	add	r0, r1
 8006214:	6010      	str	r0, [r2, #0]
 8006216:	e7da      	b.n	80061ce <_free_r+0x22>
 8006218:	d902      	bls.n	8006220 <_free_r+0x74>
 800621a:	230c      	movs	r3, #12
 800621c:	602b      	str	r3, [r5, #0]
 800621e:	e7d6      	b.n	80061ce <_free_r+0x22>
 8006220:	6820      	ldr	r0, [r4, #0]
 8006222:	1821      	adds	r1, r4, r0
 8006224:	428b      	cmp	r3, r1
 8006226:	bf04      	itt	eq
 8006228:	6819      	ldreq	r1, [r3, #0]
 800622a:	685b      	ldreq	r3, [r3, #4]
 800622c:	6063      	str	r3, [r4, #4]
 800622e:	bf04      	itt	eq
 8006230:	1809      	addeq	r1, r1, r0
 8006232:	6021      	streq	r1, [r4, #0]
 8006234:	6054      	str	r4, [r2, #4]
 8006236:	e7ca      	b.n	80061ce <_free_r+0x22>
 8006238:	bd38      	pop	{r3, r4, r5, pc}
 800623a:	bf00      	nop
 800623c:	200003c4 	.word	0x200003c4

08006240 <sbrk_aligned>:
 8006240:	b570      	push	{r4, r5, r6, lr}
 8006242:	4e0f      	ldr	r6, [pc, #60]	@ (8006280 <sbrk_aligned+0x40>)
 8006244:	460c      	mov	r4, r1
 8006246:	6831      	ldr	r1, [r6, #0]
 8006248:	4605      	mov	r5, r0
 800624a:	b911      	cbnz	r1, 8006252 <sbrk_aligned+0x12>
 800624c:	f000 fba4 	bl	8006998 <_sbrk_r>
 8006250:	6030      	str	r0, [r6, #0]
 8006252:	4621      	mov	r1, r4
 8006254:	4628      	mov	r0, r5
 8006256:	f000 fb9f 	bl	8006998 <_sbrk_r>
 800625a:	1c43      	adds	r3, r0, #1
 800625c:	d103      	bne.n	8006266 <sbrk_aligned+0x26>
 800625e:	f04f 34ff 	mov.w	r4, #4294967295
 8006262:	4620      	mov	r0, r4
 8006264:	bd70      	pop	{r4, r5, r6, pc}
 8006266:	1cc4      	adds	r4, r0, #3
 8006268:	f024 0403 	bic.w	r4, r4, #3
 800626c:	42a0      	cmp	r0, r4
 800626e:	d0f8      	beq.n	8006262 <sbrk_aligned+0x22>
 8006270:	1a21      	subs	r1, r4, r0
 8006272:	4628      	mov	r0, r5
 8006274:	f000 fb90 	bl	8006998 <_sbrk_r>
 8006278:	3001      	adds	r0, #1
 800627a:	d1f2      	bne.n	8006262 <sbrk_aligned+0x22>
 800627c:	e7ef      	b.n	800625e <sbrk_aligned+0x1e>
 800627e:	bf00      	nop
 8006280:	200003c0 	.word	0x200003c0

08006284 <_malloc_r>:
 8006284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006288:	1ccd      	adds	r5, r1, #3
 800628a:	f025 0503 	bic.w	r5, r5, #3
 800628e:	3508      	adds	r5, #8
 8006290:	2d0c      	cmp	r5, #12
 8006292:	bf38      	it	cc
 8006294:	250c      	movcc	r5, #12
 8006296:	2d00      	cmp	r5, #0
 8006298:	4606      	mov	r6, r0
 800629a:	db01      	blt.n	80062a0 <_malloc_r+0x1c>
 800629c:	42a9      	cmp	r1, r5
 800629e:	d904      	bls.n	80062aa <_malloc_r+0x26>
 80062a0:	230c      	movs	r3, #12
 80062a2:	6033      	str	r3, [r6, #0]
 80062a4:	2000      	movs	r0, #0
 80062a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006380 <_malloc_r+0xfc>
 80062ae:	f000 f869 	bl	8006384 <__malloc_lock>
 80062b2:	f8d8 3000 	ldr.w	r3, [r8]
 80062b6:	461c      	mov	r4, r3
 80062b8:	bb44      	cbnz	r4, 800630c <_malloc_r+0x88>
 80062ba:	4629      	mov	r1, r5
 80062bc:	4630      	mov	r0, r6
 80062be:	f7ff ffbf 	bl	8006240 <sbrk_aligned>
 80062c2:	1c43      	adds	r3, r0, #1
 80062c4:	4604      	mov	r4, r0
 80062c6:	d158      	bne.n	800637a <_malloc_r+0xf6>
 80062c8:	f8d8 4000 	ldr.w	r4, [r8]
 80062cc:	4627      	mov	r7, r4
 80062ce:	2f00      	cmp	r7, #0
 80062d0:	d143      	bne.n	800635a <_malloc_r+0xd6>
 80062d2:	2c00      	cmp	r4, #0
 80062d4:	d04b      	beq.n	800636e <_malloc_r+0xea>
 80062d6:	6823      	ldr	r3, [r4, #0]
 80062d8:	4639      	mov	r1, r7
 80062da:	4630      	mov	r0, r6
 80062dc:	eb04 0903 	add.w	r9, r4, r3
 80062e0:	f000 fb5a 	bl	8006998 <_sbrk_r>
 80062e4:	4581      	cmp	r9, r0
 80062e6:	d142      	bne.n	800636e <_malloc_r+0xea>
 80062e8:	6821      	ldr	r1, [r4, #0]
 80062ea:	1a6d      	subs	r5, r5, r1
 80062ec:	4629      	mov	r1, r5
 80062ee:	4630      	mov	r0, r6
 80062f0:	f7ff ffa6 	bl	8006240 <sbrk_aligned>
 80062f4:	3001      	adds	r0, #1
 80062f6:	d03a      	beq.n	800636e <_malloc_r+0xea>
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	442b      	add	r3, r5
 80062fc:	6023      	str	r3, [r4, #0]
 80062fe:	f8d8 3000 	ldr.w	r3, [r8]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	bb62      	cbnz	r2, 8006360 <_malloc_r+0xdc>
 8006306:	f8c8 7000 	str.w	r7, [r8]
 800630a:	e00f      	b.n	800632c <_malloc_r+0xa8>
 800630c:	6822      	ldr	r2, [r4, #0]
 800630e:	1b52      	subs	r2, r2, r5
 8006310:	d420      	bmi.n	8006354 <_malloc_r+0xd0>
 8006312:	2a0b      	cmp	r2, #11
 8006314:	d917      	bls.n	8006346 <_malloc_r+0xc2>
 8006316:	1961      	adds	r1, r4, r5
 8006318:	42a3      	cmp	r3, r4
 800631a:	6025      	str	r5, [r4, #0]
 800631c:	bf18      	it	ne
 800631e:	6059      	strne	r1, [r3, #4]
 8006320:	6863      	ldr	r3, [r4, #4]
 8006322:	bf08      	it	eq
 8006324:	f8c8 1000 	streq.w	r1, [r8]
 8006328:	5162      	str	r2, [r4, r5]
 800632a:	604b      	str	r3, [r1, #4]
 800632c:	4630      	mov	r0, r6
 800632e:	f000 f82f 	bl	8006390 <__malloc_unlock>
 8006332:	f104 000b 	add.w	r0, r4, #11
 8006336:	1d23      	adds	r3, r4, #4
 8006338:	f020 0007 	bic.w	r0, r0, #7
 800633c:	1ac2      	subs	r2, r0, r3
 800633e:	bf1c      	itt	ne
 8006340:	1a1b      	subne	r3, r3, r0
 8006342:	50a3      	strne	r3, [r4, r2]
 8006344:	e7af      	b.n	80062a6 <_malloc_r+0x22>
 8006346:	6862      	ldr	r2, [r4, #4]
 8006348:	42a3      	cmp	r3, r4
 800634a:	bf0c      	ite	eq
 800634c:	f8c8 2000 	streq.w	r2, [r8]
 8006350:	605a      	strne	r2, [r3, #4]
 8006352:	e7eb      	b.n	800632c <_malloc_r+0xa8>
 8006354:	4623      	mov	r3, r4
 8006356:	6864      	ldr	r4, [r4, #4]
 8006358:	e7ae      	b.n	80062b8 <_malloc_r+0x34>
 800635a:	463c      	mov	r4, r7
 800635c:	687f      	ldr	r7, [r7, #4]
 800635e:	e7b6      	b.n	80062ce <_malloc_r+0x4a>
 8006360:	461a      	mov	r2, r3
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	42a3      	cmp	r3, r4
 8006366:	d1fb      	bne.n	8006360 <_malloc_r+0xdc>
 8006368:	2300      	movs	r3, #0
 800636a:	6053      	str	r3, [r2, #4]
 800636c:	e7de      	b.n	800632c <_malloc_r+0xa8>
 800636e:	230c      	movs	r3, #12
 8006370:	6033      	str	r3, [r6, #0]
 8006372:	4630      	mov	r0, r6
 8006374:	f000 f80c 	bl	8006390 <__malloc_unlock>
 8006378:	e794      	b.n	80062a4 <_malloc_r+0x20>
 800637a:	6005      	str	r5, [r0, #0]
 800637c:	e7d6      	b.n	800632c <_malloc_r+0xa8>
 800637e:	bf00      	nop
 8006380:	200003c4 	.word	0x200003c4

08006384 <__malloc_lock>:
 8006384:	4801      	ldr	r0, [pc, #4]	@ (800638c <__malloc_lock+0x8>)
 8006386:	f7ff bf0f 	b.w	80061a8 <__retarget_lock_acquire_recursive>
 800638a:	bf00      	nop
 800638c:	200003bc 	.word	0x200003bc

08006390 <__malloc_unlock>:
 8006390:	4801      	ldr	r0, [pc, #4]	@ (8006398 <__malloc_unlock+0x8>)
 8006392:	f7ff bf0a 	b.w	80061aa <__retarget_lock_release_recursive>
 8006396:	bf00      	nop
 8006398:	200003bc 	.word	0x200003bc

0800639c <__ssputs_r>:
 800639c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063a0:	688e      	ldr	r6, [r1, #8]
 80063a2:	461f      	mov	r7, r3
 80063a4:	42be      	cmp	r6, r7
 80063a6:	680b      	ldr	r3, [r1, #0]
 80063a8:	4682      	mov	sl, r0
 80063aa:	460c      	mov	r4, r1
 80063ac:	4690      	mov	r8, r2
 80063ae:	d82d      	bhi.n	800640c <__ssputs_r+0x70>
 80063b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80063b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80063b8:	d026      	beq.n	8006408 <__ssputs_r+0x6c>
 80063ba:	6965      	ldr	r5, [r4, #20]
 80063bc:	6909      	ldr	r1, [r1, #16]
 80063be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063c2:	eba3 0901 	sub.w	r9, r3, r1
 80063c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063ca:	1c7b      	adds	r3, r7, #1
 80063cc:	444b      	add	r3, r9
 80063ce:	106d      	asrs	r5, r5, #1
 80063d0:	429d      	cmp	r5, r3
 80063d2:	bf38      	it	cc
 80063d4:	461d      	movcc	r5, r3
 80063d6:	0553      	lsls	r3, r2, #21
 80063d8:	d527      	bpl.n	800642a <__ssputs_r+0x8e>
 80063da:	4629      	mov	r1, r5
 80063dc:	f7ff ff52 	bl	8006284 <_malloc_r>
 80063e0:	4606      	mov	r6, r0
 80063e2:	b360      	cbz	r0, 800643e <__ssputs_r+0xa2>
 80063e4:	6921      	ldr	r1, [r4, #16]
 80063e6:	464a      	mov	r2, r9
 80063e8:	f000 fae6 	bl	80069b8 <memcpy>
 80063ec:	89a3      	ldrh	r3, [r4, #12]
 80063ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80063f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063f6:	81a3      	strh	r3, [r4, #12]
 80063f8:	6126      	str	r6, [r4, #16]
 80063fa:	6165      	str	r5, [r4, #20]
 80063fc:	444e      	add	r6, r9
 80063fe:	eba5 0509 	sub.w	r5, r5, r9
 8006402:	6026      	str	r6, [r4, #0]
 8006404:	60a5      	str	r5, [r4, #8]
 8006406:	463e      	mov	r6, r7
 8006408:	42be      	cmp	r6, r7
 800640a:	d900      	bls.n	800640e <__ssputs_r+0x72>
 800640c:	463e      	mov	r6, r7
 800640e:	6820      	ldr	r0, [r4, #0]
 8006410:	4632      	mov	r2, r6
 8006412:	4641      	mov	r1, r8
 8006414:	f000 faa6 	bl	8006964 <memmove>
 8006418:	68a3      	ldr	r3, [r4, #8]
 800641a:	1b9b      	subs	r3, r3, r6
 800641c:	60a3      	str	r3, [r4, #8]
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	4433      	add	r3, r6
 8006422:	6023      	str	r3, [r4, #0]
 8006424:	2000      	movs	r0, #0
 8006426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800642a:	462a      	mov	r2, r5
 800642c:	f000 fad2 	bl	80069d4 <_realloc_r>
 8006430:	4606      	mov	r6, r0
 8006432:	2800      	cmp	r0, #0
 8006434:	d1e0      	bne.n	80063f8 <__ssputs_r+0x5c>
 8006436:	6921      	ldr	r1, [r4, #16]
 8006438:	4650      	mov	r0, sl
 800643a:	f7ff feb7 	bl	80061ac <_free_r>
 800643e:	230c      	movs	r3, #12
 8006440:	f8ca 3000 	str.w	r3, [sl]
 8006444:	89a3      	ldrh	r3, [r4, #12]
 8006446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800644a:	81a3      	strh	r3, [r4, #12]
 800644c:	f04f 30ff 	mov.w	r0, #4294967295
 8006450:	e7e9      	b.n	8006426 <__ssputs_r+0x8a>
	...

08006454 <_svfiprintf_r>:
 8006454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006458:	4698      	mov	r8, r3
 800645a:	898b      	ldrh	r3, [r1, #12]
 800645c:	061b      	lsls	r3, r3, #24
 800645e:	b09d      	sub	sp, #116	@ 0x74
 8006460:	4607      	mov	r7, r0
 8006462:	460d      	mov	r5, r1
 8006464:	4614      	mov	r4, r2
 8006466:	d510      	bpl.n	800648a <_svfiprintf_r+0x36>
 8006468:	690b      	ldr	r3, [r1, #16]
 800646a:	b973      	cbnz	r3, 800648a <_svfiprintf_r+0x36>
 800646c:	2140      	movs	r1, #64	@ 0x40
 800646e:	f7ff ff09 	bl	8006284 <_malloc_r>
 8006472:	6028      	str	r0, [r5, #0]
 8006474:	6128      	str	r0, [r5, #16]
 8006476:	b930      	cbnz	r0, 8006486 <_svfiprintf_r+0x32>
 8006478:	230c      	movs	r3, #12
 800647a:	603b      	str	r3, [r7, #0]
 800647c:	f04f 30ff 	mov.w	r0, #4294967295
 8006480:	b01d      	add	sp, #116	@ 0x74
 8006482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006486:	2340      	movs	r3, #64	@ 0x40
 8006488:	616b      	str	r3, [r5, #20]
 800648a:	2300      	movs	r3, #0
 800648c:	9309      	str	r3, [sp, #36]	@ 0x24
 800648e:	2320      	movs	r3, #32
 8006490:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006494:	f8cd 800c 	str.w	r8, [sp, #12]
 8006498:	2330      	movs	r3, #48	@ 0x30
 800649a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006638 <_svfiprintf_r+0x1e4>
 800649e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80064a2:	f04f 0901 	mov.w	r9, #1
 80064a6:	4623      	mov	r3, r4
 80064a8:	469a      	mov	sl, r3
 80064aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064ae:	b10a      	cbz	r2, 80064b4 <_svfiprintf_r+0x60>
 80064b0:	2a25      	cmp	r2, #37	@ 0x25
 80064b2:	d1f9      	bne.n	80064a8 <_svfiprintf_r+0x54>
 80064b4:	ebba 0b04 	subs.w	fp, sl, r4
 80064b8:	d00b      	beq.n	80064d2 <_svfiprintf_r+0x7e>
 80064ba:	465b      	mov	r3, fp
 80064bc:	4622      	mov	r2, r4
 80064be:	4629      	mov	r1, r5
 80064c0:	4638      	mov	r0, r7
 80064c2:	f7ff ff6b 	bl	800639c <__ssputs_r>
 80064c6:	3001      	adds	r0, #1
 80064c8:	f000 80a7 	beq.w	800661a <_svfiprintf_r+0x1c6>
 80064cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064ce:	445a      	add	r2, fp
 80064d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80064d2:	f89a 3000 	ldrb.w	r3, [sl]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f000 809f 	beq.w	800661a <_svfiprintf_r+0x1c6>
 80064dc:	2300      	movs	r3, #0
 80064de:	f04f 32ff 	mov.w	r2, #4294967295
 80064e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064e6:	f10a 0a01 	add.w	sl, sl, #1
 80064ea:	9304      	str	r3, [sp, #16]
 80064ec:	9307      	str	r3, [sp, #28]
 80064ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80064f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80064f4:	4654      	mov	r4, sl
 80064f6:	2205      	movs	r2, #5
 80064f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064fc:	484e      	ldr	r0, [pc, #312]	@ (8006638 <_svfiprintf_r+0x1e4>)
 80064fe:	f7f9 fe7f 	bl	8000200 <memchr>
 8006502:	9a04      	ldr	r2, [sp, #16]
 8006504:	b9d8      	cbnz	r0, 800653e <_svfiprintf_r+0xea>
 8006506:	06d0      	lsls	r0, r2, #27
 8006508:	bf44      	itt	mi
 800650a:	2320      	movmi	r3, #32
 800650c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006510:	0711      	lsls	r1, r2, #28
 8006512:	bf44      	itt	mi
 8006514:	232b      	movmi	r3, #43	@ 0x2b
 8006516:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800651a:	f89a 3000 	ldrb.w	r3, [sl]
 800651e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006520:	d015      	beq.n	800654e <_svfiprintf_r+0xfa>
 8006522:	9a07      	ldr	r2, [sp, #28]
 8006524:	4654      	mov	r4, sl
 8006526:	2000      	movs	r0, #0
 8006528:	f04f 0c0a 	mov.w	ip, #10
 800652c:	4621      	mov	r1, r4
 800652e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006532:	3b30      	subs	r3, #48	@ 0x30
 8006534:	2b09      	cmp	r3, #9
 8006536:	d94b      	bls.n	80065d0 <_svfiprintf_r+0x17c>
 8006538:	b1b0      	cbz	r0, 8006568 <_svfiprintf_r+0x114>
 800653a:	9207      	str	r2, [sp, #28]
 800653c:	e014      	b.n	8006568 <_svfiprintf_r+0x114>
 800653e:	eba0 0308 	sub.w	r3, r0, r8
 8006542:	fa09 f303 	lsl.w	r3, r9, r3
 8006546:	4313      	orrs	r3, r2
 8006548:	9304      	str	r3, [sp, #16]
 800654a:	46a2      	mov	sl, r4
 800654c:	e7d2      	b.n	80064f4 <_svfiprintf_r+0xa0>
 800654e:	9b03      	ldr	r3, [sp, #12]
 8006550:	1d19      	adds	r1, r3, #4
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	9103      	str	r1, [sp, #12]
 8006556:	2b00      	cmp	r3, #0
 8006558:	bfbb      	ittet	lt
 800655a:	425b      	neglt	r3, r3
 800655c:	f042 0202 	orrlt.w	r2, r2, #2
 8006560:	9307      	strge	r3, [sp, #28]
 8006562:	9307      	strlt	r3, [sp, #28]
 8006564:	bfb8      	it	lt
 8006566:	9204      	strlt	r2, [sp, #16]
 8006568:	7823      	ldrb	r3, [r4, #0]
 800656a:	2b2e      	cmp	r3, #46	@ 0x2e
 800656c:	d10a      	bne.n	8006584 <_svfiprintf_r+0x130>
 800656e:	7863      	ldrb	r3, [r4, #1]
 8006570:	2b2a      	cmp	r3, #42	@ 0x2a
 8006572:	d132      	bne.n	80065da <_svfiprintf_r+0x186>
 8006574:	9b03      	ldr	r3, [sp, #12]
 8006576:	1d1a      	adds	r2, r3, #4
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	9203      	str	r2, [sp, #12]
 800657c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006580:	3402      	adds	r4, #2
 8006582:	9305      	str	r3, [sp, #20]
 8006584:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006648 <_svfiprintf_r+0x1f4>
 8006588:	7821      	ldrb	r1, [r4, #0]
 800658a:	2203      	movs	r2, #3
 800658c:	4650      	mov	r0, sl
 800658e:	f7f9 fe37 	bl	8000200 <memchr>
 8006592:	b138      	cbz	r0, 80065a4 <_svfiprintf_r+0x150>
 8006594:	9b04      	ldr	r3, [sp, #16]
 8006596:	eba0 000a 	sub.w	r0, r0, sl
 800659a:	2240      	movs	r2, #64	@ 0x40
 800659c:	4082      	lsls	r2, r0
 800659e:	4313      	orrs	r3, r2
 80065a0:	3401      	adds	r4, #1
 80065a2:	9304      	str	r3, [sp, #16]
 80065a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065a8:	4824      	ldr	r0, [pc, #144]	@ (800663c <_svfiprintf_r+0x1e8>)
 80065aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80065ae:	2206      	movs	r2, #6
 80065b0:	f7f9 fe26 	bl	8000200 <memchr>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	d036      	beq.n	8006626 <_svfiprintf_r+0x1d2>
 80065b8:	4b21      	ldr	r3, [pc, #132]	@ (8006640 <_svfiprintf_r+0x1ec>)
 80065ba:	bb1b      	cbnz	r3, 8006604 <_svfiprintf_r+0x1b0>
 80065bc:	9b03      	ldr	r3, [sp, #12]
 80065be:	3307      	adds	r3, #7
 80065c0:	f023 0307 	bic.w	r3, r3, #7
 80065c4:	3308      	adds	r3, #8
 80065c6:	9303      	str	r3, [sp, #12]
 80065c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065ca:	4433      	add	r3, r6
 80065cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80065ce:	e76a      	b.n	80064a6 <_svfiprintf_r+0x52>
 80065d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80065d4:	460c      	mov	r4, r1
 80065d6:	2001      	movs	r0, #1
 80065d8:	e7a8      	b.n	800652c <_svfiprintf_r+0xd8>
 80065da:	2300      	movs	r3, #0
 80065dc:	3401      	adds	r4, #1
 80065de:	9305      	str	r3, [sp, #20]
 80065e0:	4619      	mov	r1, r3
 80065e2:	f04f 0c0a 	mov.w	ip, #10
 80065e6:	4620      	mov	r0, r4
 80065e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065ec:	3a30      	subs	r2, #48	@ 0x30
 80065ee:	2a09      	cmp	r2, #9
 80065f0:	d903      	bls.n	80065fa <_svfiprintf_r+0x1a6>
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d0c6      	beq.n	8006584 <_svfiprintf_r+0x130>
 80065f6:	9105      	str	r1, [sp, #20]
 80065f8:	e7c4      	b.n	8006584 <_svfiprintf_r+0x130>
 80065fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80065fe:	4604      	mov	r4, r0
 8006600:	2301      	movs	r3, #1
 8006602:	e7f0      	b.n	80065e6 <_svfiprintf_r+0x192>
 8006604:	ab03      	add	r3, sp, #12
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	462a      	mov	r2, r5
 800660a:	4b0e      	ldr	r3, [pc, #56]	@ (8006644 <_svfiprintf_r+0x1f0>)
 800660c:	a904      	add	r1, sp, #16
 800660e:	4638      	mov	r0, r7
 8006610:	f3af 8000 	nop.w
 8006614:	1c42      	adds	r2, r0, #1
 8006616:	4606      	mov	r6, r0
 8006618:	d1d6      	bne.n	80065c8 <_svfiprintf_r+0x174>
 800661a:	89ab      	ldrh	r3, [r5, #12]
 800661c:	065b      	lsls	r3, r3, #25
 800661e:	f53f af2d 	bmi.w	800647c <_svfiprintf_r+0x28>
 8006622:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006624:	e72c      	b.n	8006480 <_svfiprintf_r+0x2c>
 8006626:	ab03      	add	r3, sp, #12
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	462a      	mov	r2, r5
 800662c:	4b05      	ldr	r3, [pc, #20]	@ (8006644 <_svfiprintf_r+0x1f0>)
 800662e:	a904      	add	r1, sp, #16
 8006630:	4638      	mov	r0, r7
 8006632:	f000 f879 	bl	8006728 <_printf_i>
 8006636:	e7ed      	b.n	8006614 <_svfiprintf_r+0x1c0>
 8006638:	08006cec 	.word	0x08006cec
 800663c:	08006cf6 	.word	0x08006cf6
 8006640:	00000000 	.word	0x00000000
 8006644:	0800639d 	.word	0x0800639d
 8006648:	08006cf2 	.word	0x08006cf2

0800664c <_printf_common>:
 800664c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006650:	4616      	mov	r6, r2
 8006652:	4698      	mov	r8, r3
 8006654:	688a      	ldr	r2, [r1, #8]
 8006656:	690b      	ldr	r3, [r1, #16]
 8006658:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800665c:	4293      	cmp	r3, r2
 800665e:	bfb8      	it	lt
 8006660:	4613      	movlt	r3, r2
 8006662:	6033      	str	r3, [r6, #0]
 8006664:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006668:	4607      	mov	r7, r0
 800666a:	460c      	mov	r4, r1
 800666c:	b10a      	cbz	r2, 8006672 <_printf_common+0x26>
 800666e:	3301      	adds	r3, #1
 8006670:	6033      	str	r3, [r6, #0]
 8006672:	6823      	ldr	r3, [r4, #0]
 8006674:	0699      	lsls	r1, r3, #26
 8006676:	bf42      	ittt	mi
 8006678:	6833      	ldrmi	r3, [r6, #0]
 800667a:	3302      	addmi	r3, #2
 800667c:	6033      	strmi	r3, [r6, #0]
 800667e:	6825      	ldr	r5, [r4, #0]
 8006680:	f015 0506 	ands.w	r5, r5, #6
 8006684:	d106      	bne.n	8006694 <_printf_common+0x48>
 8006686:	f104 0a19 	add.w	sl, r4, #25
 800668a:	68e3      	ldr	r3, [r4, #12]
 800668c:	6832      	ldr	r2, [r6, #0]
 800668e:	1a9b      	subs	r3, r3, r2
 8006690:	42ab      	cmp	r3, r5
 8006692:	dc26      	bgt.n	80066e2 <_printf_common+0x96>
 8006694:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006698:	6822      	ldr	r2, [r4, #0]
 800669a:	3b00      	subs	r3, #0
 800669c:	bf18      	it	ne
 800669e:	2301      	movne	r3, #1
 80066a0:	0692      	lsls	r2, r2, #26
 80066a2:	d42b      	bmi.n	80066fc <_printf_common+0xb0>
 80066a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80066a8:	4641      	mov	r1, r8
 80066aa:	4638      	mov	r0, r7
 80066ac:	47c8      	blx	r9
 80066ae:	3001      	adds	r0, #1
 80066b0:	d01e      	beq.n	80066f0 <_printf_common+0xa4>
 80066b2:	6823      	ldr	r3, [r4, #0]
 80066b4:	6922      	ldr	r2, [r4, #16]
 80066b6:	f003 0306 	and.w	r3, r3, #6
 80066ba:	2b04      	cmp	r3, #4
 80066bc:	bf02      	ittt	eq
 80066be:	68e5      	ldreq	r5, [r4, #12]
 80066c0:	6833      	ldreq	r3, [r6, #0]
 80066c2:	1aed      	subeq	r5, r5, r3
 80066c4:	68a3      	ldr	r3, [r4, #8]
 80066c6:	bf0c      	ite	eq
 80066c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066cc:	2500      	movne	r5, #0
 80066ce:	4293      	cmp	r3, r2
 80066d0:	bfc4      	itt	gt
 80066d2:	1a9b      	subgt	r3, r3, r2
 80066d4:	18ed      	addgt	r5, r5, r3
 80066d6:	2600      	movs	r6, #0
 80066d8:	341a      	adds	r4, #26
 80066da:	42b5      	cmp	r5, r6
 80066dc:	d11a      	bne.n	8006714 <_printf_common+0xc8>
 80066de:	2000      	movs	r0, #0
 80066e0:	e008      	b.n	80066f4 <_printf_common+0xa8>
 80066e2:	2301      	movs	r3, #1
 80066e4:	4652      	mov	r2, sl
 80066e6:	4641      	mov	r1, r8
 80066e8:	4638      	mov	r0, r7
 80066ea:	47c8      	blx	r9
 80066ec:	3001      	adds	r0, #1
 80066ee:	d103      	bne.n	80066f8 <_printf_common+0xac>
 80066f0:	f04f 30ff 	mov.w	r0, #4294967295
 80066f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066f8:	3501      	adds	r5, #1
 80066fa:	e7c6      	b.n	800668a <_printf_common+0x3e>
 80066fc:	18e1      	adds	r1, r4, r3
 80066fe:	1c5a      	adds	r2, r3, #1
 8006700:	2030      	movs	r0, #48	@ 0x30
 8006702:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006706:	4422      	add	r2, r4
 8006708:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800670c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006710:	3302      	adds	r3, #2
 8006712:	e7c7      	b.n	80066a4 <_printf_common+0x58>
 8006714:	2301      	movs	r3, #1
 8006716:	4622      	mov	r2, r4
 8006718:	4641      	mov	r1, r8
 800671a:	4638      	mov	r0, r7
 800671c:	47c8      	blx	r9
 800671e:	3001      	adds	r0, #1
 8006720:	d0e6      	beq.n	80066f0 <_printf_common+0xa4>
 8006722:	3601      	adds	r6, #1
 8006724:	e7d9      	b.n	80066da <_printf_common+0x8e>
	...

08006728 <_printf_i>:
 8006728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800672c:	7e0f      	ldrb	r7, [r1, #24]
 800672e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006730:	2f78      	cmp	r7, #120	@ 0x78
 8006732:	4691      	mov	r9, r2
 8006734:	4680      	mov	r8, r0
 8006736:	460c      	mov	r4, r1
 8006738:	469a      	mov	sl, r3
 800673a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800673e:	d807      	bhi.n	8006750 <_printf_i+0x28>
 8006740:	2f62      	cmp	r7, #98	@ 0x62
 8006742:	d80a      	bhi.n	800675a <_printf_i+0x32>
 8006744:	2f00      	cmp	r7, #0
 8006746:	f000 80d1 	beq.w	80068ec <_printf_i+0x1c4>
 800674a:	2f58      	cmp	r7, #88	@ 0x58
 800674c:	f000 80b8 	beq.w	80068c0 <_printf_i+0x198>
 8006750:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006754:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006758:	e03a      	b.n	80067d0 <_printf_i+0xa8>
 800675a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800675e:	2b15      	cmp	r3, #21
 8006760:	d8f6      	bhi.n	8006750 <_printf_i+0x28>
 8006762:	a101      	add	r1, pc, #4	@ (adr r1, 8006768 <_printf_i+0x40>)
 8006764:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006768:	080067c1 	.word	0x080067c1
 800676c:	080067d5 	.word	0x080067d5
 8006770:	08006751 	.word	0x08006751
 8006774:	08006751 	.word	0x08006751
 8006778:	08006751 	.word	0x08006751
 800677c:	08006751 	.word	0x08006751
 8006780:	080067d5 	.word	0x080067d5
 8006784:	08006751 	.word	0x08006751
 8006788:	08006751 	.word	0x08006751
 800678c:	08006751 	.word	0x08006751
 8006790:	08006751 	.word	0x08006751
 8006794:	080068d3 	.word	0x080068d3
 8006798:	080067ff 	.word	0x080067ff
 800679c:	0800688d 	.word	0x0800688d
 80067a0:	08006751 	.word	0x08006751
 80067a4:	08006751 	.word	0x08006751
 80067a8:	080068f5 	.word	0x080068f5
 80067ac:	08006751 	.word	0x08006751
 80067b0:	080067ff 	.word	0x080067ff
 80067b4:	08006751 	.word	0x08006751
 80067b8:	08006751 	.word	0x08006751
 80067bc:	08006895 	.word	0x08006895
 80067c0:	6833      	ldr	r3, [r6, #0]
 80067c2:	1d1a      	adds	r2, r3, #4
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6032      	str	r2, [r6, #0]
 80067c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80067d0:	2301      	movs	r3, #1
 80067d2:	e09c      	b.n	800690e <_printf_i+0x1e6>
 80067d4:	6833      	ldr	r3, [r6, #0]
 80067d6:	6820      	ldr	r0, [r4, #0]
 80067d8:	1d19      	adds	r1, r3, #4
 80067da:	6031      	str	r1, [r6, #0]
 80067dc:	0606      	lsls	r6, r0, #24
 80067de:	d501      	bpl.n	80067e4 <_printf_i+0xbc>
 80067e0:	681d      	ldr	r5, [r3, #0]
 80067e2:	e003      	b.n	80067ec <_printf_i+0xc4>
 80067e4:	0645      	lsls	r5, r0, #25
 80067e6:	d5fb      	bpl.n	80067e0 <_printf_i+0xb8>
 80067e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80067ec:	2d00      	cmp	r5, #0
 80067ee:	da03      	bge.n	80067f8 <_printf_i+0xd0>
 80067f0:	232d      	movs	r3, #45	@ 0x2d
 80067f2:	426d      	negs	r5, r5
 80067f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067f8:	4858      	ldr	r0, [pc, #352]	@ (800695c <_printf_i+0x234>)
 80067fa:	230a      	movs	r3, #10
 80067fc:	e011      	b.n	8006822 <_printf_i+0xfa>
 80067fe:	6821      	ldr	r1, [r4, #0]
 8006800:	6833      	ldr	r3, [r6, #0]
 8006802:	0608      	lsls	r0, r1, #24
 8006804:	f853 5b04 	ldr.w	r5, [r3], #4
 8006808:	d402      	bmi.n	8006810 <_printf_i+0xe8>
 800680a:	0649      	lsls	r1, r1, #25
 800680c:	bf48      	it	mi
 800680e:	b2ad      	uxthmi	r5, r5
 8006810:	2f6f      	cmp	r7, #111	@ 0x6f
 8006812:	4852      	ldr	r0, [pc, #328]	@ (800695c <_printf_i+0x234>)
 8006814:	6033      	str	r3, [r6, #0]
 8006816:	bf14      	ite	ne
 8006818:	230a      	movne	r3, #10
 800681a:	2308      	moveq	r3, #8
 800681c:	2100      	movs	r1, #0
 800681e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006822:	6866      	ldr	r6, [r4, #4]
 8006824:	60a6      	str	r6, [r4, #8]
 8006826:	2e00      	cmp	r6, #0
 8006828:	db05      	blt.n	8006836 <_printf_i+0x10e>
 800682a:	6821      	ldr	r1, [r4, #0]
 800682c:	432e      	orrs	r6, r5
 800682e:	f021 0104 	bic.w	r1, r1, #4
 8006832:	6021      	str	r1, [r4, #0]
 8006834:	d04b      	beq.n	80068ce <_printf_i+0x1a6>
 8006836:	4616      	mov	r6, r2
 8006838:	fbb5 f1f3 	udiv	r1, r5, r3
 800683c:	fb03 5711 	mls	r7, r3, r1, r5
 8006840:	5dc7      	ldrb	r7, [r0, r7]
 8006842:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006846:	462f      	mov	r7, r5
 8006848:	42bb      	cmp	r3, r7
 800684a:	460d      	mov	r5, r1
 800684c:	d9f4      	bls.n	8006838 <_printf_i+0x110>
 800684e:	2b08      	cmp	r3, #8
 8006850:	d10b      	bne.n	800686a <_printf_i+0x142>
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	07df      	lsls	r7, r3, #31
 8006856:	d508      	bpl.n	800686a <_printf_i+0x142>
 8006858:	6923      	ldr	r3, [r4, #16]
 800685a:	6861      	ldr	r1, [r4, #4]
 800685c:	4299      	cmp	r1, r3
 800685e:	bfde      	ittt	le
 8006860:	2330      	movle	r3, #48	@ 0x30
 8006862:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006866:	f106 36ff 	addle.w	r6, r6, #4294967295
 800686a:	1b92      	subs	r2, r2, r6
 800686c:	6122      	str	r2, [r4, #16]
 800686e:	f8cd a000 	str.w	sl, [sp]
 8006872:	464b      	mov	r3, r9
 8006874:	aa03      	add	r2, sp, #12
 8006876:	4621      	mov	r1, r4
 8006878:	4640      	mov	r0, r8
 800687a:	f7ff fee7 	bl	800664c <_printf_common>
 800687e:	3001      	adds	r0, #1
 8006880:	d14a      	bne.n	8006918 <_printf_i+0x1f0>
 8006882:	f04f 30ff 	mov.w	r0, #4294967295
 8006886:	b004      	add	sp, #16
 8006888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	f043 0320 	orr.w	r3, r3, #32
 8006892:	6023      	str	r3, [r4, #0]
 8006894:	4832      	ldr	r0, [pc, #200]	@ (8006960 <_printf_i+0x238>)
 8006896:	2778      	movs	r7, #120	@ 0x78
 8006898:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800689c:	6823      	ldr	r3, [r4, #0]
 800689e:	6831      	ldr	r1, [r6, #0]
 80068a0:	061f      	lsls	r7, r3, #24
 80068a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80068a6:	d402      	bmi.n	80068ae <_printf_i+0x186>
 80068a8:	065f      	lsls	r7, r3, #25
 80068aa:	bf48      	it	mi
 80068ac:	b2ad      	uxthmi	r5, r5
 80068ae:	6031      	str	r1, [r6, #0]
 80068b0:	07d9      	lsls	r1, r3, #31
 80068b2:	bf44      	itt	mi
 80068b4:	f043 0320 	orrmi.w	r3, r3, #32
 80068b8:	6023      	strmi	r3, [r4, #0]
 80068ba:	b11d      	cbz	r5, 80068c4 <_printf_i+0x19c>
 80068bc:	2310      	movs	r3, #16
 80068be:	e7ad      	b.n	800681c <_printf_i+0xf4>
 80068c0:	4826      	ldr	r0, [pc, #152]	@ (800695c <_printf_i+0x234>)
 80068c2:	e7e9      	b.n	8006898 <_printf_i+0x170>
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	f023 0320 	bic.w	r3, r3, #32
 80068ca:	6023      	str	r3, [r4, #0]
 80068cc:	e7f6      	b.n	80068bc <_printf_i+0x194>
 80068ce:	4616      	mov	r6, r2
 80068d0:	e7bd      	b.n	800684e <_printf_i+0x126>
 80068d2:	6833      	ldr	r3, [r6, #0]
 80068d4:	6825      	ldr	r5, [r4, #0]
 80068d6:	6961      	ldr	r1, [r4, #20]
 80068d8:	1d18      	adds	r0, r3, #4
 80068da:	6030      	str	r0, [r6, #0]
 80068dc:	062e      	lsls	r6, r5, #24
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	d501      	bpl.n	80068e6 <_printf_i+0x1be>
 80068e2:	6019      	str	r1, [r3, #0]
 80068e4:	e002      	b.n	80068ec <_printf_i+0x1c4>
 80068e6:	0668      	lsls	r0, r5, #25
 80068e8:	d5fb      	bpl.n	80068e2 <_printf_i+0x1ba>
 80068ea:	8019      	strh	r1, [r3, #0]
 80068ec:	2300      	movs	r3, #0
 80068ee:	6123      	str	r3, [r4, #16]
 80068f0:	4616      	mov	r6, r2
 80068f2:	e7bc      	b.n	800686e <_printf_i+0x146>
 80068f4:	6833      	ldr	r3, [r6, #0]
 80068f6:	1d1a      	adds	r2, r3, #4
 80068f8:	6032      	str	r2, [r6, #0]
 80068fa:	681e      	ldr	r6, [r3, #0]
 80068fc:	6862      	ldr	r2, [r4, #4]
 80068fe:	2100      	movs	r1, #0
 8006900:	4630      	mov	r0, r6
 8006902:	f7f9 fc7d 	bl	8000200 <memchr>
 8006906:	b108      	cbz	r0, 800690c <_printf_i+0x1e4>
 8006908:	1b80      	subs	r0, r0, r6
 800690a:	6060      	str	r0, [r4, #4]
 800690c:	6863      	ldr	r3, [r4, #4]
 800690e:	6123      	str	r3, [r4, #16]
 8006910:	2300      	movs	r3, #0
 8006912:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006916:	e7aa      	b.n	800686e <_printf_i+0x146>
 8006918:	6923      	ldr	r3, [r4, #16]
 800691a:	4632      	mov	r2, r6
 800691c:	4649      	mov	r1, r9
 800691e:	4640      	mov	r0, r8
 8006920:	47d0      	blx	sl
 8006922:	3001      	adds	r0, #1
 8006924:	d0ad      	beq.n	8006882 <_printf_i+0x15a>
 8006926:	6823      	ldr	r3, [r4, #0]
 8006928:	079b      	lsls	r3, r3, #30
 800692a:	d413      	bmi.n	8006954 <_printf_i+0x22c>
 800692c:	68e0      	ldr	r0, [r4, #12]
 800692e:	9b03      	ldr	r3, [sp, #12]
 8006930:	4298      	cmp	r0, r3
 8006932:	bfb8      	it	lt
 8006934:	4618      	movlt	r0, r3
 8006936:	e7a6      	b.n	8006886 <_printf_i+0x15e>
 8006938:	2301      	movs	r3, #1
 800693a:	4632      	mov	r2, r6
 800693c:	4649      	mov	r1, r9
 800693e:	4640      	mov	r0, r8
 8006940:	47d0      	blx	sl
 8006942:	3001      	adds	r0, #1
 8006944:	d09d      	beq.n	8006882 <_printf_i+0x15a>
 8006946:	3501      	adds	r5, #1
 8006948:	68e3      	ldr	r3, [r4, #12]
 800694a:	9903      	ldr	r1, [sp, #12]
 800694c:	1a5b      	subs	r3, r3, r1
 800694e:	42ab      	cmp	r3, r5
 8006950:	dcf2      	bgt.n	8006938 <_printf_i+0x210>
 8006952:	e7eb      	b.n	800692c <_printf_i+0x204>
 8006954:	2500      	movs	r5, #0
 8006956:	f104 0619 	add.w	r6, r4, #25
 800695a:	e7f5      	b.n	8006948 <_printf_i+0x220>
 800695c:	08006cfd 	.word	0x08006cfd
 8006960:	08006d0e 	.word	0x08006d0e

08006964 <memmove>:
 8006964:	4288      	cmp	r0, r1
 8006966:	b510      	push	{r4, lr}
 8006968:	eb01 0402 	add.w	r4, r1, r2
 800696c:	d902      	bls.n	8006974 <memmove+0x10>
 800696e:	4284      	cmp	r4, r0
 8006970:	4623      	mov	r3, r4
 8006972:	d807      	bhi.n	8006984 <memmove+0x20>
 8006974:	1e43      	subs	r3, r0, #1
 8006976:	42a1      	cmp	r1, r4
 8006978:	d008      	beq.n	800698c <memmove+0x28>
 800697a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800697e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006982:	e7f8      	b.n	8006976 <memmove+0x12>
 8006984:	4402      	add	r2, r0
 8006986:	4601      	mov	r1, r0
 8006988:	428a      	cmp	r2, r1
 800698a:	d100      	bne.n	800698e <memmove+0x2a>
 800698c:	bd10      	pop	{r4, pc}
 800698e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006992:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006996:	e7f7      	b.n	8006988 <memmove+0x24>

08006998 <_sbrk_r>:
 8006998:	b538      	push	{r3, r4, r5, lr}
 800699a:	4d06      	ldr	r5, [pc, #24]	@ (80069b4 <_sbrk_r+0x1c>)
 800699c:	2300      	movs	r3, #0
 800699e:	4604      	mov	r4, r0
 80069a0:	4608      	mov	r0, r1
 80069a2:	602b      	str	r3, [r5, #0]
 80069a4:	f7fa f962 	bl	8000c6c <_sbrk>
 80069a8:	1c43      	adds	r3, r0, #1
 80069aa:	d102      	bne.n	80069b2 <_sbrk_r+0x1a>
 80069ac:	682b      	ldr	r3, [r5, #0]
 80069ae:	b103      	cbz	r3, 80069b2 <_sbrk_r+0x1a>
 80069b0:	6023      	str	r3, [r4, #0]
 80069b2:	bd38      	pop	{r3, r4, r5, pc}
 80069b4:	200003b8 	.word	0x200003b8

080069b8 <memcpy>:
 80069b8:	440a      	add	r2, r1
 80069ba:	4291      	cmp	r1, r2
 80069bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80069c0:	d100      	bne.n	80069c4 <memcpy+0xc>
 80069c2:	4770      	bx	lr
 80069c4:	b510      	push	{r4, lr}
 80069c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069ce:	4291      	cmp	r1, r2
 80069d0:	d1f9      	bne.n	80069c6 <memcpy+0xe>
 80069d2:	bd10      	pop	{r4, pc}

080069d4 <_realloc_r>:
 80069d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069d8:	4607      	mov	r7, r0
 80069da:	4614      	mov	r4, r2
 80069dc:	460d      	mov	r5, r1
 80069de:	b921      	cbnz	r1, 80069ea <_realloc_r+0x16>
 80069e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069e4:	4611      	mov	r1, r2
 80069e6:	f7ff bc4d 	b.w	8006284 <_malloc_r>
 80069ea:	b92a      	cbnz	r2, 80069f8 <_realloc_r+0x24>
 80069ec:	f7ff fbde 	bl	80061ac <_free_r>
 80069f0:	4625      	mov	r5, r4
 80069f2:	4628      	mov	r0, r5
 80069f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069f8:	f000 f81a 	bl	8006a30 <_malloc_usable_size_r>
 80069fc:	4284      	cmp	r4, r0
 80069fe:	4606      	mov	r6, r0
 8006a00:	d802      	bhi.n	8006a08 <_realloc_r+0x34>
 8006a02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a06:	d8f4      	bhi.n	80069f2 <_realloc_r+0x1e>
 8006a08:	4621      	mov	r1, r4
 8006a0a:	4638      	mov	r0, r7
 8006a0c:	f7ff fc3a 	bl	8006284 <_malloc_r>
 8006a10:	4680      	mov	r8, r0
 8006a12:	b908      	cbnz	r0, 8006a18 <_realloc_r+0x44>
 8006a14:	4645      	mov	r5, r8
 8006a16:	e7ec      	b.n	80069f2 <_realloc_r+0x1e>
 8006a18:	42b4      	cmp	r4, r6
 8006a1a:	4622      	mov	r2, r4
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	bf28      	it	cs
 8006a20:	4632      	movcs	r2, r6
 8006a22:	f7ff ffc9 	bl	80069b8 <memcpy>
 8006a26:	4629      	mov	r1, r5
 8006a28:	4638      	mov	r0, r7
 8006a2a:	f7ff fbbf 	bl	80061ac <_free_r>
 8006a2e:	e7f1      	b.n	8006a14 <_realloc_r+0x40>

08006a30 <_malloc_usable_size_r>:
 8006a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a34:	1f18      	subs	r0, r3, #4
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	bfbc      	itt	lt
 8006a3a:	580b      	ldrlt	r3, [r1, r0]
 8006a3c:	18c0      	addlt	r0, r0, r3
 8006a3e:	4770      	bx	lr

08006a40 <_init>:
 8006a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a42:	bf00      	nop
 8006a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a46:	bc08      	pop	{r3}
 8006a48:	469e      	mov	lr, r3
 8006a4a:	4770      	bx	lr

08006a4c <_fini>:
 8006a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4e:	bf00      	nop
 8006a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a52:	bc08      	pop	{r3}
 8006a54:	469e      	mov	lr, r3
 8006a56:	4770      	bx	lr
