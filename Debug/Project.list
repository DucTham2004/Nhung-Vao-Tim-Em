
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d888  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  0800da38  0800da38  0000ea38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dde0  0800dde0  0000f164  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800dde0  0800dde0  0000ede0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dde8  0800dde8  0000f164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dde8  0800dde8  0000ede8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ddec  0800ddec  0000edec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000164  20000000  0800ddf0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f164  2**0
                  CONTENTS
 10 .bss          00000fc0  20000164  20000164  0000f164  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001124  20001124  0000f164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f164  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019a9b  00000000  00000000  0000f194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004617  00000000  00000000  00028c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e8  00000000  00000000  0002d248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd2  00000000  00000000  0002e730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028b2f  00000000  00000000  0002f702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ec72  00000000  00000000  00058231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da72b  00000000  00000000  00076ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001515ce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000059f0  00000000  00000000  00151614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  00157004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000164 	.word	0x20000164
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800da20 	.word	0x0800da20

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000168 	.word	0x20000168
 80001ec:	0800da20 	.word	0x0800da20

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 80005cc:	b40f      	push	{r0, r1, r2, r3}
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b082      	sub	sp, #8
 80005d2:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	693a      	ldr	r2, [r7, #16]
 80005de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005e2:	480b      	ldr	r0, [pc, #44]	@ (8000610 <myprintf+0x44>)
 80005e4:	f00c fd90 	bl	800d108 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80005e8:	4809      	ldr	r0, [pc, #36]	@ (8000610 <myprintf+0x44>)
 80005ea:	f7ff fe01 	bl	80001f0 <strlen>
 80005ee:	4603      	mov	r3, r0
 80005f0:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, len, -1);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	4905      	ldr	r1, [pc, #20]	@ (8000610 <myprintf+0x44>)
 80005fc:	4805      	ldr	r0, [pc, #20]	@ (8000614 <myprintf+0x48>)
 80005fe:	f003 fc33 	bl	8003e68 <HAL_UART_Transmit>

}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800060c:	b004      	add	sp, #16
 800060e:	4770      	bx	lr
 8000610:	20000220 	.word	0x20000220
 8000614:	200001d8 	.word	0x200001d8

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b5b0      	push	{r4, r5, r7, lr}
 800061a:	f5ad 6d94 	sub.w	sp, sp, #1184	@ 0x4a0
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fbbc 	bl	8000d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f914 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f9dc 	bl	80009e4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800062c:	f000 f97a 	bl	8000924 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000630:	f005 fb24 	bl	8005c7c <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8000634:	f000 f9ac 	bl	8000990 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init(); //????
 8000638:	f00c f802 	bl	800c640 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 800063c:	4875      	ldr	r0, [pc, #468]	@ (8000814 <main+0x1fc>)
 800063e:	f7ff ffc5 	bl	80005cc <myprintf>

    HAL_Delay(1000);
 8000642:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000646:	f000 fc1b 	bl	8000e80 <HAL_Delay>
      FATFS FatFs; 	//Fatfs handle
      FIL fil; 		//File handle
      FRESULT fres; //Result after operations

      //Open the file system
      fres = f_mount(&FatFs, "", 1); //1=mount now
 800064a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800064e:	2201      	movs	r2, #1
 8000650:	4971      	ldr	r1, [pc, #452]	@ (8000818 <main+0x200>)
 8000652:	4618      	mov	r0, r3
 8000654:	f00b f948 	bl	800b8e8 <f_mount>
 8000658:	4603      	mov	r3, r0
 800065a:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
      while (fres != FR_OK) {
 800065e:	e009      	b.n	8000674 <main+0x5c>
    	myprintf("f_mount error (%i)\r\n", fres);
 8000660:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 8000664:	4619      	mov	r1, r3
 8000666:	486d      	ldr	r0, [pc, #436]	@ (800081c <main+0x204>)
 8000668:	f7ff ffb0 	bl	80005cc <myprintf>
    	HAL_Delay(1000);
 800066c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000670:	f000 fc06 	bl	8000e80 <HAL_Delay>
      while (fres != FR_OK) {
 8000674:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1f1      	bne.n	8000660 <main+0x48>
      //Let's get some statistics from the SD card
      DWORD free_clusters, free_sectors, total_sectors;

      FATFS* getFreeFs;

      fres = f_getfree("", &free_clusters, &getFreeFs);
 800067c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000680:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000684:	4619      	mov	r1, r3
 8000686:	4864      	ldr	r0, [pc, #400]	@ (8000818 <main+0x200>)
 8000688:	f00b fe8a 	bl	800c3a0 <f_getfree>
 800068c:	4603      	mov	r3, r0
 800068e:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
      while (fres != FR_OK) {
 8000692:	e009      	b.n	80006a8 <main+0x90>
    	myprintf("f_getfree error (%i)\r\n", fres);
 8000694:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 8000698:	4619      	mov	r1, r3
 800069a:	4861      	ldr	r0, [pc, #388]	@ (8000820 <main+0x208>)
 800069c:	f7ff ff96 	bl	80005cc <myprintf>
    	HAL_Delay(1000);
 80006a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006a4:	f000 fbec 	bl	8000e80 <HAL_Delay>
      while (fres != FR_OK) {
 80006a8:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d1f1      	bne.n	8000694 <main+0x7c>
      }

      //Formula comes from ChaN's documentation
      total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80006b0:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80006b4:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	3b02      	subs	r3, #2
 80006be:	f507 6294 	add.w	r2, r7, #1184	@ 0x4a0
 80006c2:	f5a2 628f 	sub.w	r2, r2, #1144	@ 0x478
 80006c6:	6812      	ldr	r2, [r2, #0]
 80006c8:	8952      	ldrh	r2, [r2, #10]
 80006ca:	fb02 f303 	mul.w	r3, r2, r3
 80006ce:	f8c7 3498 	str.w	r3, [r7, #1176]	@ 0x498
      free_sectors = free_clusters * getFreeFs->csize;
 80006d2:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80006d6:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	895b      	ldrh	r3, [r3, #10]
 80006de:	461a      	mov	r2, r3
 80006e0:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80006e4:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	fb02 f303 	mul.w	r3, r2, r3
 80006ee:	f8c7 3494 	str.w	r3, [r7, #1172]	@ 0x494

      myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 80006f2:	f8d7 3498 	ldr.w	r3, [r7, #1176]	@ 0x498
 80006f6:	0859      	lsrs	r1, r3, #1
 80006f8:	f8d7 3494 	ldr.w	r3, [r7, #1172]	@ 0x494
 80006fc:	085b      	lsrs	r3, r3, #1
 80006fe:	461a      	mov	r2, r3
 8000700:	4848      	ldr	r0, [pc, #288]	@ (8000824 <main+0x20c>)
 8000702:	f7ff ff63 	bl	80005cc <myprintf>

      //Now let's try to open file "test.txt"
      fres = f_open(&fil, "test.txt", FA_READ);
 8000706:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800070a:	2201      	movs	r2, #1
 800070c:	4946      	ldr	r1, [pc, #280]	@ (8000828 <main+0x210>)
 800070e:	4618      	mov	r0, r3
 8000710:	f00b f930 	bl	800b974 <f_open>
 8000714:	4603      	mov	r3, r0
 8000716:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
      while (fres != FR_OK) {
 800071a:	e006      	b.n	800072a <main+0x112>
    	myprintf("f_open error (%i)\r\n");
 800071c:	4843      	ldr	r0, [pc, #268]	@ (800082c <main+0x214>)
 800071e:	f7ff ff55 	bl	80005cc <myprintf>
    	HAL_Delay(1000);
 8000722:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000726:	f000 fbab 	bl	8000e80 <HAL_Delay>
      while (fres != FR_OK) {
 800072a:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1f4      	bne.n	800071c <main+0x104>
      }
      myprintf("I was able to open 'test.txt' for reading!\r\n");
 8000732:	483f      	ldr	r0, [pc, #252]	@ (8000830 <main+0x218>)
 8000734:	f7ff ff4a 	bl	80005cc <myprintf>
      //Read 30 bytes from "test.txt" on the SD card
      BYTE readBuf[30];

      //We can either use f_read OR f_gets to get data out of files
      //f_gets is a wrapper on f_read that does some string formatting for us
      TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8000738:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	211e      	movs	r1, #30
 8000742:	4618      	mov	r0, r3
 8000744:	f00b fee1 	bl	800c50a <f_gets>
 8000748:	f8c7 0490 	str.w	r0, [r7, #1168]	@ 0x490
      if(rres != 0) {
 800074c:	f8d7 3490 	ldr.w	r3, [r7, #1168]	@ 0x490
 8000750:	2b00      	cmp	r3, #0
 8000752:	d006      	beq.n	8000762 <main+0x14a>
    	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	4619      	mov	r1, r3
 800075a:	4836      	ldr	r0, [pc, #216]	@ (8000834 <main+0x21c>)
 800075c:	f7ff ff36 	bl	80005cc <myprintf>
 8000760:	e005      	b.n	800076e <main+0x156>
      } else {
    	myprintf("f_gets error (%i)\r\n", fres);
 8000762:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 8000766:	4619      	mov	r1, r3
 8000768:	4833      	ldr	r0, [pc, #204]	@ (8000838 <main+0x220>)
 800076a:	f7ff ff2f 	bl	80005cc <myprintf>
      }

      //Be a tidy kiwi - don't forget to close your file!
      f_close(&fil);
 800076e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000772:	4618      	mov	r0, r3
 8000774:	f00b fdea 	bl	800c34c <f_close>

      //Now let's try and write a file "write.txt"
      fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000778:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800077c:	221a      	movs	r2, #26
 800077e:	492f      	ldr	r1, [pc, #188]	@ (800083c <main+0x224>)
 8000780:	4618      	mov	r0, r3
 8000782:	f00b f8f7 	bl	800b974 <f_open>
 8000786:	4603      	mov	r3, r0
 8000788:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
      if(fres == FR_OK) {
 800078c:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 8000790:	2b00      	cmp	r3, #0
 8000792:	d103      	bne.n	800079c <main+0x184>
    	myprintf("I was able to open 'write.txt' for writing\r\n");
 8000794:	482a      	ldr	r0, [pc, #168]	@ (8000840 <main+0x228>)
 8000796:	f7ff ff19 	bl	80005cc <myprintf>
 800079a:	e005      	b.n	80007a8 <main+0x190>
      } else {
    	myprintf("f_open error (%i)\r\n", fres);
 800079c:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 80007a0:	4619      	mov	r1, r3
 80007a2:	4822      	ldr	r0, [pc, #136]	@ (800082c <main+0x214>)
 80007a4:	f7ff ff12 	bl	80005cc <myprintf>
      }

      //Copy in a string
      strncpy((char*)readBuf, "a new file is made!", 19);
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	4a25      	ldr	r2, [pc, #148]	@ (8000844 <main+0x22c>)
 80007ae:	461c      	mov	r4, r3
 80007b0:	4615      	mov	r5, r2
 80007b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b6:	682b      	ldr	r3, [r5, #0]
 80007b8:	461a      	mov	r2, r3
 80007ba:	8022      	strh	r2, [r4, #0]
 80007bc:	3402      	adds	r4, #2
 80007be:	0c1b      	lsrs	r3, r3, #16
 80007c0:	7023      	strb	r3, [r4, #0]
      UINT bytesWrote;
      fres = f_write(&fil, readBuf, 19, &bytesWrote);
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	f107 0108 	add.w	r1, r7, #8
 80007c8:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80007cc:	2213      	movs	r2, #19
 80007ce:	f00b fbca 	bl	800bf66 <f_write>
 80007d2:	4603      	mov	r3, r0
 80007d4:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
      if(fres == FR_OK) {
 80007d8:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d109      	bne.n	80007f4 <main+0x1dc>
    	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 80007e0:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80007e4:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4619      	mov	r1, r3
 80007ec:	4816      	ldr	r0, [pc, #88]	@ (8000848 <main+0x230>)
 80007ee:	f7ff feed 	bl	80005cc <myprintf>
 80007f2:	e002      	b.n	80007fa <main+0x1e2>
      } else {
    	myprintf("f_write error (%i)\r\n");
 80007f4:	4815      	ldr	r0, [pc, #84]	@ (800084c <main+0x234>)
 80007f6:	f7ff fee9 	bl	80005cc <myprintf>
      }

      //Be a tidy kiwi - don't forget to close your file!
      f_close(&fil);
 80007fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007fe:	4618      	mov	r0, r3
 8000800:	f00b fda4 	bl	800c34c <f_close>

      //We're done, so de-mount the drive
      f_mount(NULL, "", 0);
 8000804:	2200      	movs	r2, #0
 8000806:	4904      	ldr	r1, [pc, #16]	@ (8000818 <main+0x200>)
 8000808:	2000      	movs	r0, #0
 800080a:	f00b f86d 	bl	800b8e8 <f_mount>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800080e:	bf00      	nop
 8000810:	e7fd      	b.n	800080e <main+0x1f6>
 8000812:	bf00      	nop
 8000814:	0800da38 	.word	0x0800da38
 8000818:	0800da58 	.word	0x0800da58
 800081c:	0800da5c 	.word	0x0800da5c
 8000820:	0800da74 	.word	0x0800da74
 8000824:	0800da8c 	.word	0x0800da8c
 8000828:	0800dad4 	.word	0x0800dad4
 800082c:	0800dae0 	.word	0x0800dae0
 8000830:	0800daf4 	.word	0x0800daf4
 8000834:	0800db24 	.word	0x0800db24
 8000838:	0800db50 	.word	0x0800db50
 800083c:	0800db64 	.word	0x0800db64
 8000840:	0800db70 	.word	0x0800db70
 8000844:	0800dba0 	.word	0x0800dba0
 8000848:	0800dbb4 	.word	0x0800dbb4
 800084c:	0800dbd8 	.word	0x0800dbd8

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b094      	sub	sp, #80	@ 0x50
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 0320 	add.w	r3, r7, #32
 800085a:	2230      	movs	r2, #48	@ 0x30
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f00c fc60 	bl	800d124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	4b28      	ldr	r3, [pc, #160]	@ (800091c <SystemClock_Config+0xcc>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087c:	4a27      	ldr	r2, [pc, #156]	@ (800091c <SystemClock_Config+0xcc>)
 800087e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000882:	6413      	str	r3, [r2, #64]	@ 0x40
 8000884:	4b25      	ldr	r3, [pc, #148]	@ (800091c <SystemClock_Config+0xcc>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <SystemClock_Config+0xd0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800089c:	4a20      	ldr	r2, [pc, #128]	@ (8000920 <SystemClock_Config+0xd0>)
 800089e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a2:	6013      	str	r3, [r2, #0]
 80008a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000920 <SystemClock_Config+0xd0>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b0:	2301      	movs	r3, #1
 80008b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ba:	2302      	movs	r3, #2
 80008bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008c4:	2304      	movs	r3, #4
 80008c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80008c8:	2348      	movs	r3, #72	@ 0x48
 80008ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80008d0:	2303      	movs	r3, #3
 80008d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d4:	f107 0320 	add.w	r3, r7, #32
 80008d8:	4618      	mov	r0, r3
 80008da:	f002 f86d 	bl	80029b8 <HAL_RCC_OscConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008e4:	f000 f8de 	bl	8000aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e8:	230f      	movs	r3, #15
 80008ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ec:	2302      	movs	r3, #2
 80008ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	2102      	movs	r1, #2
 8000904:	4618      	mov	r0, r3
 8000906:	f002 facf 	bl	8002ea8 <HAL_RCC_ClockConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000910:	f000 f8c8 	bl	8000aa4 <Error_Handler>
  }
}
 8000914:	bf00      	nop
 8000916:	3750      	adds	r7, #80	@ 0x50
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800
 8000920:	40007000 	.word	0x40007000

08000924 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000928:	4b17      	ldr	r3, [pc, #92]	@ (8000988 <MX_SPI1_Init+0x64>)
 800092a:	4a18      	ldr	r2, [pc, #96]	@ (800098c <MX_SPI1_Init+0x68>)
 800092c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800092e:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <MX_SPI1_Init+0x64>)
 8000930:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000934:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000936:	4b14      	ldr	r3, [pc, #80]	@ (8000988 <MX_SPI1_Init+0x64>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800093c:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <MX_SPI1_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000942:	4b11      	ldr	r3, [pc, #68]	@ (8000988 <MX_SPI1_Init+0x64>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000948:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <MX_SPI1_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800094e:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <MX_SPI1_Init+0x64>)
 8000950:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000954:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000956:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <MX_SPI1_Init+0x64>)
 8000958:	2230      	movs	r2, #48	@ 0x30
 800095a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800095c:	4b0a      	ldr	r3, [pc, #40]	@ (8000988 <MX_SPI1_Init+0x64>)
 800095e:	2200      	movs	r2, #0
 8000960:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000962:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <MX_SPI1_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000968:	4b07      	ldr	r3, [pc, #28]	@ (8000988 <MX_SPI1_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800096e:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <MX_SPI1_Init+0x64>)
 8000970:	220a      	movs	r2, #10
 8000972:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000974:	4804      	ldr	r0, [pc, #16]	@ (8000988 <MX_SPI1_Init+0x64>)
 8000976:	f002 fcb7 	bl	80032e8 <HAL_SPI_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000980:	f000 f890 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000180 	.word	0x20000180
 800098c:	40013000 	.word	0x40013000

08000990 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000994:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <MX_USART1_UART_Init+0x4c>)
 8000996:	4a12      	ldr	r2, [pc, #72]	@ (80009e0 <MX_USART1_UART_Init+0x50>)
 8000998:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800099a:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <MX_USART1_UART_Init+0x4c>)
 800099c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <MX_USART1_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <MX_USART1_UART_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <MX_USART1_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <MX_USART1_UART_Init+0x4c>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <MX_USART1_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <MX_USART1_UART_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	@ (80009dc <MX_USART1_UART_Init+0x4c>)
 80009c8:	f003 f9fe 	bl	8003dc8 <HAL_UART_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009d2:	f000 f867 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200001d8 	.word	0x200001d8
 80009e0:	40011000 	.word	0x40011000

080009e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	@ 0x28
 80009e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b27      	ldr	r3, [pc, #156]	@ (8000a9c <MX_GPIO_Init+0xb8>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	4a26      	ldr	r2, [pc, #152]	@ (8000a9c <MX_GPIO_Init+0xb8>)
 8000a04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0a:	4b24      	ldr	r3, [pc, #144]	@ (8000a9c <MX_GPIO_Init+0xb8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b20      	ldr	r3, [pc, #128]	@ (8000a9c <MX_GPIO_Init+0xb8>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8000a9c <MX_GPIO_Init+0xb8>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b1d      	ldr	r3, [pc, #116]	@ (8000a9c <MX_GPIO_Init+0xb8>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	4b19      	ldr	r3, [pc, #100]	@ (8000a9c <MX_GPIO_Init+0xb8>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	4a18      	ldr	r2, [pc, #96]	@ (8000a9c <MX_GPIO_Init+0xb8>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a42:	4b16      	ldr	r3, [pc, #88]	@ (8000a9c <MX_GPIO_Init+0xb8>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <MX_GPIO_Init+0xb8>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	4a11      	ldr	r2, [pc, #68]	@ (8000a9c <MX_GPIO_Init+0xb8>)
 8000a58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <MX_GPIO_Init+0xb8>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a70:	480b      	ldr	r0, [pc, #44]	@ (8000aa0 <MX_GPIO_Init+0xbc>)
 8000a72:	f000 fd09 	bl	8001488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000a76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4804      	ldr	r0, [pc, #16]	@ (8000aa0 <MX_GPIO_Init+0xbc>)
 8000a90:	f000 fb4e 	bl	8001130 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a94:	bf00      	nop
 8000a96:	3728      	adds	r7, #40	@ 0x28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40021800 	.word	0x40021800

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <Error_Handler+0x8>

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000abe:	4a0f      	ldr	r2, [pc, #60]	@ (8000afc <HAL_MspInit+0x4c>)
 8000ac0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ac4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ada:	4a08      	ldr	r2, [pc, #32]	@ (8000afc <HAL_MspInit+0x4c>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	@ 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8000b94 <HAL_SPI_MspInit+0x94>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d133      	bne.n	8000b8a <HAL_SPI_MspInit+0x8a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b1c      	ldr	r3, [pc, #112]	@ (8000b98 <HAL_SPI_MspInit+0x98>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2a:	4a1b      	ldr	r2, [pc, #108]	@ (8000b98 <HAL_SPI_MspInit+0x98>)
 8000b2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b32:	4b19      	ldr	r3, [pc, #100]	@ (8000b98 <HAL_SPI_MspInit+0x98>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <HAL_SPI_MspInit+0x98>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a14      	ldr	r2, [pc, #80]	@ (8000b98 <HAL_SPI_MspInit+0x98>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <HAL_SPI_MspInit+0x98>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b5a:	23e0      	movs	r3, #224	@ 0xe0
 8000b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4809      	ldr	r0, [pc, #36]	@ (8000b9c <HAL_SPI_MspInit+0x9c>)
 8000b76:	f000 fadb 	bl	8001130 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2023      	movs	r0, #35	@ 0x23
 8000b80:	f000 fa7d 	bl	800107e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000b84:	2023      	movs	r0, #35	@ 0x23
 8000b86:	f000 fa96 	bl	80010b6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b8a:	bf00      	nop
 8000b8c:	3728      	adds	r7, #40	@ 0x28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40013000 	.word	0x40013000
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020000 	.word	0x40020000

08000ba0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	@ 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a19      	ldr	r2, [pc, #100]	@ (8000c24 <HAL_UART_MspInit+0x84>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d12c      	bne.n	8000c1c <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b18      	ldr	r3, [pc, #96]	@ (8000c28 <HAL_UART_MspInit+0x88>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bca:	4a17      	ldr	r2, [pc, #92]	@ (8000c28 <HAL_UART_MspInit+0x88>)
 8000bcc:	f043 0310 	orr.w	r3, r3, #16
 8000bd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bd2:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <HAL_UART_MspInit+0x88>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd6:	f003 0310 	and.w	r3, r3, #16
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <HAL_UART_MspInit+0x88>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a10      	ldr	r2, [pc, #64]	@ (8000c28 <HAL_UART_MspInit+0x88>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <HAL_UART_MspInit+0x88>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bfa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c0c:	2307      	movs	r3, #7
 8000c0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	4805      	ldr	r0, [pc, #20]	@ (8000c2c <HAL_UART_MspInit+0x8c>)
 8000c18:	f000 fa8a 	bl	8001130 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000c1c:	bf00      	nop
 8000c1e:	3728      	adds	r7, #40	@ 0x28
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40011000 	.word	0x40011000
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020000 	.word	0x40020000

08000c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <NMI_Handler+0x4>

08000c38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <HardFault_Handler+0x4>

08000c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <MemManage_Handler+0x4>

08000c48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <BusFault_Handler+0x4>

08000c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <UsageFault_Handler+0x4>

08000c58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c86:	f000 f8db 	bl	8000e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000c94:	4802      	ldr	r0, [pc, #8]	@ (8000ca0 <SPI1_IRQHandler+0x10>)
 8000c96:	f002 fe9d 	bl	80039d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000180 	.word	0x20000180

08000ca4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000ca8:	4802      	ldr	r0, [pc, #8]	@ (8000cb4 <OTG_HS_IRQHandler+0x10>)
 8000caa:	f000 fd4a 	bl	8001742 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000870 	.word	0x20000870

08000cb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cc0:	4a14      	ldr	r2, [pc, #80]	@ (8000d14 <_sbrk+0x5c>)
 8000cc2:	4b15      	ldr	r3, [pc, #84]	@ (8000d18 <_sbrk+0x60>)
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ccc:	4b13      	ldr	r3, [pc, #76]	@ (8000d1c <_sbrk+0x64>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d102      	bne.n	8000cda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd4:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <_sbrk+0x64>)
 8000cd6:	4a12      	ldr	r2, [pc, #72]	@ (8000d20 <_sbrk+0x68>)
 8000cd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cda:	4b10      	ldr	r3, [pc, #64]	@ (8000d1c <_sbrk+0x64>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d207      	bcs.n	8000cf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce8:	f00c fa24 	bl	800d134 <__errno>
 8000cec:	4603      	mov	r3, r0
 8000cee:	220c      	movs	r2, #12
 8000cf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf6:	e009      	b.n	8000d0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf8:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <_sbrk+0x64>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cfe:	4b07      	ldr	r3, [pc, #28]	@ (8000d1c <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	4a05      	ldr	r2, [pc, #20]	@ (8000d1c <_sbrk+0x64>)
 8000d08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20030000 	.word	0x20030000
 8000d18:	00000400 	.word	0x00000400
 8000d1c:	20000320 	.word	0x20000320
 8000d20:	20001128 	.word	0x20001128

08000d24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d28:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <SystemInit+0x20>)
 8000d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d2e:	4a05      	ldr	r2, [pc, #20]	@ (8000d44 <SystemInit+0x20>)
 8000d30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d4c:	f7ff ffea 	bl	8000d24 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d50:	480c      	ldr	r0, [pc, #48]	@ (8000d84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d52:	490d      	ldr	r1, [pc, #52]	@ (8000d88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d54:	4a0d      	ldr	r2, [pc, #52]	@ (8000d8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d58:	e002      	b.n	8000d60 <LoopCopyDataInit>

08000d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5e:	3304      	adds	r3, #4

08000d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d64:	d3f9      	bcc.n	8000d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d66:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d68:	4c0a      	ldr	r4, [pc, #40]	@ (8000d94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d6c:	e001      	b.n	8000d72 <LoopFillZerobss>

08000d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d70:	3204      	adds	r2, #4

08000d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d74:	d3fb      	bcc.n	8000d6e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d76:	f00c f9e3 	bl	800d140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d7a:	f7ff fc4d 	bl	8000618 <main>
  bx  lr    
 8000d7e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d80:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d88:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000d8c:	0800ddf0 	.word	0x0800ddf0
  ldr r2, =_sbss
 8000d90:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000d94:	20001124 	.word	0x20001124

08000d98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC_IRQHandler>
	...

08000d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000da0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ddc <HAL_Init+0x40>)
 8000da6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dac:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ddc <HAL_Init+0x40>)
 8000db2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db8:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a07      	ldr	r2, [pc, #28]	@ (8000ddc <HAL_Init+0x40>)
 8000dbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc4:	2003      	movs	r0, #3
 8000dc6:	f000 f94f 	bl	8001068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dca:	200f      	movs	r0, #15
 8000dcc:	f000 f808 	bl	8000de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd0:	f7ff fe6e 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40023c00 	.word	0x40023c00

08000de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de8:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <HAL_InitTick+0x54>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b12      	ldr	r3, [pc, #72]	@ (8000e38 <HAL_InitTick+0x58>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4619      	mov	r1, r3
 8000df2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f967 	bl	80010d2 <HAL_SYSTICK_Config>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00e      	b.n	8000e2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b0f      	cmp	r3, #15
 8000e12:	d80a      	bhi.n	8000e2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e14:	2200      	movs	r2, #0
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f000 f92f 	bl	800107e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e20:	4a06      	ldr	r2, [pc, #24]	@ (8000e3c <HAL_InitTick+0x5c>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	e000      	b.n	8000e2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000000 	.word	0x20000000
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	20000004 	.word	0x20000004

08000e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e44:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_IncTick+0x20>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <HAL_IncTick+0x24>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a04      	ldr	r2, [pc, #16]	@ (8000e64 <HAL_IncTick+0x24>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000008 	.word	0x20000008
 8000e64:	20000324 	.word	0x20000324

08000e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	@ (8000e7c <HAL_GetTick+0x14>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000324 	.word	0x20000324

08000e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e88:	f7ff ffee 	bl	8000e68 <HAL_GetTick>
 8000e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e98:	d005      	beq.n	8000ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <HAL_Delay+0x44>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ea6:	bf00      	nop
 8000ea8:	f7ff ffde 	bl	8000e68 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d8f7      	bhi.n	8000ea8 <HAL_Delay+0x28>
  {
  }
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008

08000ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efa:	4a04      	ldr	r2, [pc, #16]	@ (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	60d3      	str	r3, [r2, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f14:	4b04      	ldr	r3, [pc, #16]	@ (8000f28 <__NVIC_GetPriorityGrouping+0x18>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	f003 0307 	and.w	r3, r3, #7
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	db0b      	blt.n	8000f56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f003 021f 	and.w	r2, r3, #31
 8000f44:	4907      	ldr	r1, [pc, #28]	@ (8000f64 <__NVIC_EnableIRQ+0x38>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	095b      	lsrs	r3, r3, #5
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000e100 	.word	0xe000e100

08000f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	db0a      	blt.n	8000f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	490c      	ldr	r1, [pc, #48]	@ (8000fb4 <__NVIC_SetPriority+0x4c>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	0112      	lsls	r2, r2, #4
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f90:	e00a      	b.n	8000fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4908      	ldr	r1, [pc, #32]	@ (8000fb8 <__NVIC_SetPriority+0x50>)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	3b04      	subs	r3, #4
 8000fa0:	0112      	lsls	r2, r2, #4
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	761a      	strb	r2, [r3, #24]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	@ 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f1c3 0307 	rsb	r3, r3, #7
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	bf28      	it	cs
 8000fda:	2304      	movcs	r3, #4
 8000fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	2b06      	cmp	r3, #6
 8000fe4:	d902      	bls.n	8000fec <NVIC_EncodePriority+0x30>
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3b03      	subs	r3, #3
 8000fea:	e000      	b.n	8000fee <NVIC_EncodePriority+0x32>
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001004:	f04f 31ff 	mov.w	r1, #4294967295
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43d9      	mvns	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	4313      	orrs	r3, r2
         );
}
 8001016:	4618      	mov	r0, r3
 8001018:	3724      	adds	r7, #36	@ 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001034:	d301      	bcc.n	800103a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001036:	2301      	movs	r3, #1
 8001038:	e00f      	b.n	800105a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103a:	4a0a      	ldr	r2, [pc, #40]	@ (8001064 <SysTick_Config+0x40>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001042:	210f      	movs	r1, #15
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f7ff ff8e 	bl	8000f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800104c:	4b05      	ldr	r3, [pc, #20]	@ (8001064 <SysTick_Config+0x40>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001052:	4b04      	ldr	r3, [pc, #16]	@ (8001064 <SysTick_Config+0x40>)
 8001054:	2207      	movs	r2, #7
 8001056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	e000e010 	.word	0xe000e010

08001068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff29 	bl	8000ec8 <__NVIC_SetPriorityGrouping>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001090:	f7ff ff3e 	bl	8000f10 <__NVIC_GetPriorityGrouping>
 8001094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	6978      	ldr	r0, [r7, #20]
 800109c:	f7ff ff8e 	bl	8000fbc <NVIC_EncodePriority>
 80010a0:	4602      	mov	r2, r0
 80010a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff5d 	bl	8000f68 <__NVIC_SetPriority>
}
 80010ae:	bf00      	nop
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff31 	bl	8000f2c <__NVIC_EnableIRQ>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ffa2 	bl	8001024 <SysTick_Config>
 80010e0:	4603      	mov	r3, r0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d004      	beq.n	8001108 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2280      	movs	r2, #128	@ 0x80
 8001102:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e00c      	b.n	8001122 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2205      	movs	r2, #5
 800110c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f022 0201 	bic.w	r2, r2, #1
 800111e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	@ 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001142:	2300      	movs	r3, #0
 8001144:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
 800114a:	e177      	b.n	800143c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800114c:	2201      	movs	r2, #1
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	429a      	cmp	r2, r3
 8001166:	f040 8166 	bne.w	8001436 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	2b01      	cmp	r3, #1
 8001174:	d005      	beq.n	8001182 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800117e:	2b02      	cmp	r3, #2
 8001180:	d130      	bne.n	80011e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	2203      	movs	r2, #3
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	68da      	ldr	r2, [r3, #12]
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b8:	2201      	movs	r2, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	091b      	lsrs	r3, r3, #4
 80011ce:	f003 0201 	and.w	r2, r3, #1
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	d017      	beq.n	8001220 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2203      	movs	r2, #3
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d123      	bne.n	8001274 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	08da      	lsrs	r2, r3, #3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3208      	adds	r2, #8
 8001234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	220f      	movs	r2, #15
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	691a      	ldr	r2, [r3, #16]
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	08da      	lsrs	r2, r3, #3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3208      	adds	r2, #8
 800126e:	69b9      	ldr	r1, [r7, #24]
 8001270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0203 	and.w	r2, r3, #3
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 80c0 	beq.w	8001436 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b66      	ldr	r3, [pc, #408]	@ (8001454 <HAL_GPIO_Init+0x324>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012be:	4a65      	ldr	r2, [pc, #404]	@ (8001454 <HAL_GPIO_Init+0x324>)
 80012c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012c6:	4b63      	ldr	r3, [pc, #396]	@ (8001454 <HAL_GPIO_Init+0x324>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012d2:	4a61      	ldr	r2, [pc, #388]	@ (8001458 <HAL_GPIO_Init+0x328>)
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	089b      	lsrs	r3, r3, #2
 80012d8:	3302      	adds	r3, #2
 80012da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	220f      	movs	r2, #15
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a58      	ldr	r2, [pc, #352]	@ (800145c <HAL_GPIO_Init+0x32c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d037      	beq.n	800136e <HAL_GPIO_Init+0x23e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a57      	ldr	r2, [pc, #348]	@ (8001460 <HAL_GPIO_Init+0x330>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d031      	beq.n	800136a <HAL_GPIO_Init+0x23a>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a56      	ldr	r2, [pc, #344]	@ (8001464 <HAL_GPIO_Init+0x334>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d02b      	beq.n	8001366 <HAL_GPIO_Init+0x236>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a55      	ldr	r2, [pc, #340]	@ (8001468 <HAL_GPIO_Init+0x338>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d025      	beq.n	8001362 <HAL_GPIO_Init+0x232>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a54      	ldr	r2, [pc, #336]	@ (800146c <HAL_GPIO_Init+0x33c>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d01f      	beq.n	800135e <HAL_GPIO_Init+0x22e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a53      	ldr	r2, [pc, #332]	@ (8001470 <HAL_GPIO_Init+0x340>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d019      	beq.n	800135a <HAL_GPIO_Init+0x22a>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a52      	ldr	r2, [pc, #328]	@ (8001474 <HAL_GPIO_Init+0x344>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d013      	beq.n	8001356 <HAL_GPIO_Init+0x226>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a51      	ldr	r2, [pc, #324]	@ (8001478 <HAL_GPIO_Init+0x348>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d00d      	beq.n	8001352 <HAL_GPIO_Init+0x222>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a50      	ldr	r2, [pc, #320]	@ (800147c <HAL_GPIO_Init+0x34c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d007      	beq.n	800134e <HAL_GPIO_Init+0x21e>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4f      	ldr	r2, [pc, #316]	@ (8001480 <HAL_GPIO_Init+0x350>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d101      	bne.n	800134a <HAL_GPIO_Init+0x21a>
 8001346:	2309      	movs	r3, #9
 8001348:	e012      	b.n	8001370 <HAL_GPIO_Init+0x240>
 800134a:	230a      	movs	r3, #10
 800134c:	e010      	b.n	8001370 <HAL_GPIO_Init+0x240>
 800134e:	2308      	movs	r3, #8
 8001350:	e00e      	b.n	8001370 <HAL_GPIO_Init+0x240>
 8001352:	2307      	movs	r3, #7
 8001354:	e00c      	b.n	8001370 <HAL_GPIO_Init+0x240>
 8001356:	2306      	movs	r3, #6
 8001358:	e00a      	b.n	8001370 <HAL_GPIO_Init+0x240>
 800135a:	2305      	movs	r3, #5
 800135c:	e008      	b.n	8001370 <HAL_GPIO_Init+0x240>
 800135e:	2304      	movs	r3, #4
 8001360:	e006      	b.n	8001370 <HAL_GPIO_Init+0x240>
 8001362:	2303      	movs	r3, #3
 8001364:	e004      	b.n	8001370 <HAL_GPIO_Init+0x240>
 8001366:	2302      	movs	r3, #2
 8001368:	e002      	b.n	8001370 <HAL_GPIO_Init+0x240>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <HAL_GPIO_Init+0x240>
 800136e:	2300      	movs	r3, #0
 8001370:	69fa      	ldr	r2, [r7, #28]
 8001372:	f002 0203 	and.w	r2, r2, #3
 8001376:	0092      	lsls	r2, r2, #2
 8001378:	4093      	lsls	r3, r2
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001380:	4935      	ldr	r1, [pc, #212]	@ (8001458 <HAL_GPIO_Init+0x328>)
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	3302      	adds	r3, #2
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800138e:	4b3d      	ldr	r3, [pc, #244]	@ (8001484 <HAL_GPIO_Init+0x354>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013b2:	4a34      	ldr	r2, [pc, #208]	@ (8001484 <HAL_GPIO_Init+0x354>)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013b8:	4b32      	ldr	r3, [pc, #200]	@ (8001484 <HAL_GPIO_Init+0x354>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013dc:	4a29      	ldr	r2, [pc, #164]	@ (8001484 <HAL_GPIO_Init+0x354>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013e2:	4b28      	ldr	r3, [pc, #160]	@ (8001484 <HAL_GPIO_Init+0x354>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001406:	4a1f      	ldr	r2, [pc, #124]	@ (8001484 <HAL_GPIO_Init+0x354>)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800140c:	4b1d      	ldr	r3, [pc, #116]	@ (8001484 <HAL_GPIO_Init+0x354>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001430:	4a14      	ldr	r2, [pc, #80]	@ (8001484 <HAL_GPIO_Init+0x354>)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3301      	adds	r3, #1
 800143a:	61fb      	str	r3, [r7, #28]
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	2b0f      	cmp	r3, #15
 8001440:	f67f ae84 	bls.w	800114c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop
 8001448:	3724      	adds	r7, #36	@ 0x24
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800
 8001458:	40013800 	.word	0x40013800
 800145c:	40020000 	.word	0x40020000
 8001460:	40020400 	.word	0x40020400
 8001464:	40020800 	.word	0x40020800
 8001468:	40020c00 	.word	0x40020c00
 800146c:	40021000 	.word	0x40021000
 8001470:	40021400 	.word	0x40021400
 8001474:	40021800 	.word	0x40021800
 8001478:	40021c00 	.word	0x40021c00
 800147c:	40022000 	.word	0x40022000
 8001480:	40022400 	.word	0x40022400
 8001484:	40013c00 	.word	0x40013c00

08001488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]
 8001494:	4613      	mov	r3, r2
 8001496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001498:	787b      	ldrb	r3, [r7, #1]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014a4:	e003      	b.n	80014ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	041a      	lsls	r2, r3, #16
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	619a      	str	r2, [r3, #24]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af02      	add	r7, sp, #8
 80014c0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e101      	b.n	80016d0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d106      	bne.n	80014ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f00b fa9c 	bl	800ca24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2203      	movs	r2, #3
 80014f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014fa:	d102      	bne.n	8001502 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f003 f981 	bl	800480e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6818      	ldr	r0, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7c1a      	ldrb	r2, [r3, #16]
 8001514:	f88d 2000 	strb.w	r2, [sp]
 8001518:	3304      	adds	r3, #4
 800151a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800151c:	f003 f860 	bl	80045e0 <USB_CoreInit>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d005      	beq.n	8001532 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2202      	movs	r2, #2
 800152a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e0ce      	b.n	80016d0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f003 f979 	bl	8004830 <USB_SetCurrentMode>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2202      	movs	r2, #2
 8001548:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e0bf      	b.n	80016d0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e04a      	b.n	80015ec <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001556:	7bfa      	ldrb	r2, [r7, #15]
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	440b      	add	r3, r1
 8001564:	3315      	adds	r3, #21
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800156a:	7bfa      	ldrb	r2, [r7, #15]
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	4613      	mov	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	4413      	add	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	440b      	add	r3, r1
 8001578:	3314      	adds	r3, #20
 800157a:	7bfa      	ldrb	r2, [r7, #15]
 800157c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800157e:	7bfa      	ldrb	r2, [r7, #15]
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	b298      	uxth	r0, r3
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	4413      	add	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	332e      	adds	r3, #46	@ 0x2e
 8001592:	4602      	mov	r2, r0
 8001594:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001596:	7bfa      	ldrb	r2, [r7, #15]
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	4413      	add	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	440b      	add	r3, r1
 80015a4:	3318      	adds	r3, #24
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015aa:	7bfa      	ldrb	r2, [r7, #15]
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	4613      	mov	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	4413      	add	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	331c      	adds	r3, #28
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015be:	7bfa      	ldrb	r2, [r7, #15]
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4413      	add	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	3320      	adds	r3, #32
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015d2:	7bfa      	ldrb	r2, [r7, #15]
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	4613      	mov	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	4413      	add	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	440b      	add	r3, r1
 80015e0:	3324      	adds	r3, #36	@ 0x24
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	3301      	adds	r3, #1
 80015ea:	73fb      	strb	r3, [r7, #15]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	791b      	ldrb	r3, [r3, #4]
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d3af      	bcc.n	8001556 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	73fb      	strb	r3, [r7, #15]
 80015fa:	e044      	b.n	8001686 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015fc:	7bfa      	ldrb	r2, [r7, #15]
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	4413      	add	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001612:	7bfa      	ldrb	r2, [r7, #15]
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4413      	add	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	440b      	add	r3, r1
 8001620:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001624:	7bfa      	ldrb	r2, [r7, #15]
 8001626:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001628:	7bfa      	ldrb	r2, [r7, #15]
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	4413      	add	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800163e:	7bfa      	ldrb	r2, [r7, #15]
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	4413      	add	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	440b      	add	r3, r1
 800164c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001654:	7bfa      	ldrb	r2, [r7, #15]
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	4413      	add	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800166a:	7bfa      	ldrb	r2, [r7, #15]
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	4613      	mov	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4413      	add	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	3301      	adds	r3, #1
 8001684:	73fb      	strb	r3, [r7, #15]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	791b      	ldrb	r3, [r3, #4]
 800168a:	7bfa      	ldrb	r2, [r7, #15]
 800168c:	429a      	cmp	r2, r3
 800168e:	d3b5      	bcc.n	80015fc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	7c1a      	ldrb	r2, [r3, #16]
 8001698:	f88d 2000 	strb.w	r2, [sp]
 800169c:	3304      	adds	r3, #4
 800169e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016a0:	f003 f912 	bl	80048c8 <USB_DevInit>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d005      	beq.n	80016b6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2202      	movs	r2, #2
 80016ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00c      	b.n	80016d0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f004 f95c 	bl	8005986 <USB_DevDisconnect>

  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d101      	bne.n	80016f4 <HAL_PCD_Start+0x1c>
 80016f0:	2302      	movs	r3, #2
 80016f2:	e022      	b.n	800173a <HAL_PCD_Start+0x62>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001704:	2b00      	cmp	r3, #0
 8001706:	d009      	beq.n	800171c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800170c:	2b01      	cmp	r3, #1
 800170e:	d105      	bne.n	800171c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001714:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f003 f863 	bl	80047ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f004 f90a 	bl	8005944 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001742:	b590      	push	{r4, r7, lr}
 8001744:	b08d      	sub	sp, #52	@ 0x34
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f004 f9c8 	bl	8005aee <USB_GetMode>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	f040 848c 	bne.w	800207e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f004 f92c 	bl	80059c8 <USB_ReadInterrupts>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 8482 	beq.w	800207c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f004 f919 	bl	80059c8 <USB_ReadInterrupts>
 8001796:	4603      	mov	r3, r0
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b02      	cmp	r3, #2
 800179e:	d107      	bne.n	80017b0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	695a      	ldr	r2, [r3, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f002 0202 	and.w	r2, r2, #2
 80017ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f004 f907 	bl	80059c8 <USB_ReadInterrupts>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f003 0310 	and.w	r3, r3, #16
 80017c0:	2b10      	cmp	r3, #16
 80017c2:	d161      	bne.n	8001888 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	699a      	ldr	r2, [r3, #24]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0210 	bic.w	r2, r2, #16
 80017d2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	f003 020f 	and.w	r2, r3, #15
 80017e0:	4613      	mov	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4413      	add	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	4413      	add	r3, r2
 80017f0:	3304      	adds	r3, #4
 80017f2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80017fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80017fe:	d124      	bne.n	800184a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d035      	beq.n	8001878 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	091b      	lsrs	r3, r3, #4
 8001814:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001816:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800181a:	b29b      	uxth	r3, r3
 800181c:	461a      	mov	r2, r3
 800181e:	6a38      	ldr	r0, [r7, #32]
 8001820:	f003 ff3e 	bl	80056a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	091b      	lsrs	r3, r3, #4
 800182c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001830:	441a      	add	r2, r3
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	695a      	ldr	r2, [r3, #20]
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	091b      	lsrs	r3, r3, #4
 800183e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001842:	441a      	add	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	615a      	str	r2, [r3, #20]
 8001848:	e016      	b.n	8001878 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001850:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001854:	d110      	bne.n	8001878 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800185c:	2208      	movs	r2, #8
 800185e:	4619      	mov	r1, r3
 8001860:	6a38      	ldr	r0, [r7, #32]
 8001862:	f003 ff1d 	bl	80056a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	695a      	ldr	r2, [r3, #20]
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	091b      	lsrs	r3, r3, #4
 800186e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001872:	441a      	add	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	699a      	ldr	r2, [r3, #24]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 0210 	orr.w	r2, r2, #16
 8001886:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f004 f89b 	bl	80059c8 <USB_ReadInterrupts>
 8001892:	4603      	mov	r3, r0
 8001894:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001898:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800189c:	f040 80a7 	bne.w	80019ee <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f004 f8a0 	bl	80059ee <USB_ReadDevAllOutEpInterrupt>
 80018ae:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80018b0:	e099      	b.n	80019e6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80018b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 808e 	beq.w	80019da <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f004 f8c4 	bl	8005a56 <USB_ReadDevOutEPInterrupt>
 80018ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00c      	beq.n	80018f4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80018da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018dc:	015a      	lsls	r2, r3, #5
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	4413      	add	r3, r2
 80018e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018e6:	461a      	mov	r2, r3
 80018e8:	2301      	movs	r3, #1
 80018ea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80018ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 fed0 	bl	8002694 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00c      	beq.n	8001918 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80018fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001900:	015a      	lsls	r2, r3, #5
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	4413      	add	r3, r2
 8001906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800190a:	461a      	mov	r2, r3
 800190c:	2308      	movs	r3, #8
 800190e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001910:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 ffa6 	bl	8002864 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	f003 0310 	and.w	r3, r3, #16
 800191e:	2b00      	cmp	r3, #0
 8001920:	d008      	beq.n	8001934 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001924:	015a      	lsls	r2, r3, #5
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	4413      	add	r3, r2
 800192a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800192e:	461a      	mov	r2, r3
 8001930:	2310      	movs	r3, #16
 8001932:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d030      	beq.n	80019a0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001946:	2b80      	cmp	r3, #128	@ 0x80
 8001948:	d109      	bne.n	800195e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001958:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800195c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800195e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001960:	4613      	mov	r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	4413      	add	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	4413      	add	r3, r2
 8001970:	3304      	adds	r3, #4
 8001972:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	78db      	ldrb	r3, [r3, #3]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d108      	bne.n	800198e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	2200      	movs	r2, #0
 8001980:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001984:	b2db      	uxtb	r3, r3
 8001986:	4619      	mov	r1, r3
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f00b f95b 	bl	800cc44 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800198e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001990:	015a      	lsls	r2, r3, #5
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	4413      	add	r3, r2
 8001996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800199a:	461a      	mov	r2, r3
 800199c:	2302      	movs	r3, #2
 800199e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	f003 0320 	and.w	r3, r3, #32
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d008      	beq.n	80019bc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80019aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ac:	015a      	lsls	r2, r3, #5
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	4413      	add	r3, r2
 80019b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019b6:	461a      	mov	r2, r3
 80019b8:	2320      	movs	r3, #32
 80019ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d009      	beq.n	80019da <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80019c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c8:	015a      	lsls	r2, r3, #5
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	4413      	add	r3, r2
 80019ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019d2:	461a      	mov	r2, r3
 80019d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019d8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80019da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019dc:	3301      	adds	r3, #1
 80019de:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80019e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e2:	085b      	lsrs	r3, r3, #1
 80019e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80019e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f47f af62 	bne.w	80018b2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 ffe8 	bl	80059c8 <USB_ReadInterrupts>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001a02:	f040 80db 	bne.w	8001bbc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f004 f809 	bl	8005a22 <USB_ReadDevAllInEpInterrupt>
 8001a10:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001a16:	e0cd      	b.n	8001bb4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 80c2 	beq.w	8001ba8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	4611      	mov	r1, r2
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f004 f82f 	bl	8005a92 <USB_ReadDevInEPInterrupt>
 8001a34:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d057      	beq.n	8001af0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	2201      	movs	r2, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69f9      	ldr	r1, [r7, #28]
 8001a5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001a60:	4013      	ands	r3, r2
 8001a62:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a66:	015a      	lsls	r2, r3, #5
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a70:	461a      	mov	r2, r3
 8001a72:	2301      	movs	r3, #1
 8001a74:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	799b      	ldrb	r3, [r3, #6]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d132      	bne.n	8001ae4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a82:	4613      	mov	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	3320      	adds	r3, #32
 8001a8e:	6819      	ldr	r1, [r3, #0]
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a94:	4613      	mov	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4413      	add	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4403      	add	r3, r0
 8001a9e:	331c      	adds	r3, #28
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4419      	add	r1, r3
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4413      	add	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4403      	add	r3, r0
 8001ab2:	3320      	adds	r3, #32
 8001ab4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d113      	bne.n	8001ae4 <HAL_PCD_IRQHandler+0x3a2>
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	3324      	adds	r3, #36	@ 0x24
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d108      	bne.n	8001ae4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6818      	ldr	r0, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001adc:	461a      	mov	r2, r3
 8001ade:	2101      	movs	r1, #1
 8001ae0:	f004 f836 	bl	8005b50 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	4619      	mov	r1, r3
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f00b f825 	bl	800cb3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d008      	beq.n	8001b0c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afc:	015a      	lsls	r2, r3, #5
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	4413      	add	r3, r2
 8001b02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b06:	461a      	mov	r2, r3
 8001b08:	2308      	movs	r3, #8
 8001b0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d008      	beq.n	8001b28 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b18:	015a      	lsls	r2, r3, #5
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b22:	461a      	mov	r2, r3
 8001b24:	2310      	movs	r3, #16
 8001b26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d008      	beq.n	8001b44 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b34:	015a      	lsls	r2, r3, #5
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	4413      	add	r3, r2
 8001b3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b3e:	461a      	mov	r2, r3
 8001b40:	2340      	movs	r3, #64	@ 0x40
 8001b42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d023      	beq.n	8001b96 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001b4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b50:	6a38      	ldr	r0, [r7, #32]
 8001b52:	f003 f81d 	bl	8004b90 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b58:	4613      	mov	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	3310      	adds	r3, #16
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	3304      	adds	r3, #4
 8001b68:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	78db      	ldrb	r3, [r3, #3]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d108      	bne.n	8001b84 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2200      	movs	r2, #0
 8001b76:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f00b f872 	bl	800cc68 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b86:	015a      	lsls	r2, r3, #5
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b90:	461a      	mov	r2, r3
 8001b92:	2302      	movs	r3, #2
 8001b94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ba0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 fcea 	bl	800257c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001baa:	3301      	adds	r3, #1
 8001bac:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb0:	085b      	lsrs	r3, r3, #1
 8001bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f47f af2e 	bne.w	8001a18 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f003 ff01 	bl	80059c8 <USB_ReadInterrupts>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001bcc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001bd0:	d122      	bne.n	8001c18 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	69fa      	ldr	r2, [r7, #28]
 8001bdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d108      	bne.n	8001c02 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 fed0 	bl	80029a0 <HAL_PCDEx_LPM_Callback>
 8001c00:	e002      	b.n	8001c08 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f00b f810 	bl	800cc28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	695a      	ldr	r2, [r3, #20]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001c16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f003 fed3 	bl	80059c8 <USB_ReadInterrupts>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001c2c:	d112      	bne.n	8001c54 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d102      	bne.n	8001c44 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f00a ffcc 	bl	800cbdc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	695a      	ldr	r2, [r3, #20]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001c52:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f003 feb5 	bl	80059c8 <USB_ReadInterrupts>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c68:	f040 80b7 	bne.w	8001dda <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	69fa      	ldr	r2, [r7, #28]
 8001c76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c7a:	f023 0301 	bic.w	r3, r3, #1
 8001c7e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2110      	movs	r1, #16
 8001c86:	4618      	mov	r0, r3
 8001c88:	f002 ff82 	bl	8004b90 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c90:	e046      	b.n	8001d20 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c94:	015a      	lsls	r2, r3, #5
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	4413      	add	r3, r2
 8001c9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001ca4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ca8:	015a      	lsls	r2, r3, #5
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001cb6:	0151      	lsls	r1, r2, #5
 8001cb8:	69fa      	ldr	r2, [r7, #28]
 8001cba:	440a      	add	r2, r1
 8001cbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001cc0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001cc4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cc8:	015a      	lsls	r2, r3, #5
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001cd8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cdc:	015a      	lsls	r2, r3, #5
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001cea:	0151      	lsls	r1, r2, #5
 8001cec:	69fa      	ldr	r2, [r7, #28]
 8001cee:	440a      	add	r2, r1
 8001cf0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001cf4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001cf8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cfc:	015a      	lsls	r2, r3, #5
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d0a:	0151      	lsls	r1, r2, #5
 8001d0c:	69fa      	ldr	r2, [r7, #28]
 8001d0e:	440a      	add	r2, r1
 8001d10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001d14:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001d18:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	791b      	ldrb	r3, [r3, #4]
 8001d24:	461a      	mov	r2, r3
 8001d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d3b2      	bcc.n	8001c92 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	69fa      	ldr	r2, [r7, #28]
 8001d36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d3a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001d3e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	7bdb      	ldrb	r3, [r3, #15]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d016      	beq.n	8001d76 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d52:	69fa      	ldr	r2, [r7, #28]
 8001d54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d58:	f043 030b 	orr.w	r3, r3, #11
 8001d5c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d68:	69fa      	ldr	r2, [r7, #28]
 8001d6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d6e:	f043 030b 	orr.w	r3, r3, #11
 8001d72:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d74:	e015      	b.n	8001da2 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	69fa      	ldr	r2, [r7, #28]
 8001d80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d84:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d88:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001d8c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d9c:	f043 030b 	orr.w	r3, r3, #11
 8001da0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	69fa      	ldr	r2, [r7, #28]
 8001dac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001db0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001db4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	f003 fec3 	bl	8005b50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	695a      	ldr	r2, [r3, #20]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001dd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f003 fdf2 	bl	80059c8 <USB_ReadInterrupts>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dee:	d123      	bne.n	8001e38 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f003 fe88 	bl	8005b0a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f002 ff3f 	bl	8004c82 <USB_GetDevSpeed>
 8001e04:	4603      	mov	r3, r0
 8001e06:	461a      	mov	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681c      	ldr	r4, [r3, #0]
 8001e10:	f001 fa36 	bl	8003280 <HAL_RCC_GetHCLKFreq>
 8001e14:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	f002 fc43 	bl	80046a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f00a feb1 	bl	800cb8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695a      	ldr	r2, [r3, #20]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001e36:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f003 fdc3 	bl	80059c8 <USB_ReadInterrupts>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d10a      	bne.n	8001e62 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f00a fe8e 	bl	800cb6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	695a      	ldr	r2, [r3, #20]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f002 0208 	and.w	r2, r2, #8
 8001e60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f003 fdae 	bl	80059c8 <USB_ReadInterrupts>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e72:	2b80      	cmp	r3, #128	@ 0x80
 8001e74:	d123      	bne.n	8001ebe <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e82:	2301      	movs	r3, #1
 8001e84:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e86:	e014      	b.n	8001eb2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d105      	bne.n	8001eac <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 fb0a 	bl	80024c0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eae:	3301      	adds	r3, #1
 8001eb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	791b      	ldrb	r3, [r3, #4]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d3e4      	bcc.n	8001e88 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f003 fd80 	bl	80059c8 <USB_ReadInterrupts>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ece:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ed2:	d13c      	bne.n	8001f4e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ed8:	e02b      	b.n	8001f32 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001edc:	015a      	lsls	r2, r3, #5
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eee:	4613      	mov	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	3318      	adds	r3, #24
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d115      	bne.n	8001f2c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001f00:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	da12      	bge.n	8001f2c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	3317      	adds	r3, #23
 8001f16:	2201      	movs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	4619      	mov	r1, r3
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 faca 	bl	80024c0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2e:	3301      	adds	r3, #1
 8001f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	791b      	ldrb	r3, [r3, #4]
 8001f36:	461a      	mov	r2, r3
 8001f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d3cd      	bcc.n	8001eda <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695a      	ldr	r2, [r3, #20]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001f4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f003 fd38 	bl	80059c8 <USB_ReadInterrupts>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001f62:	d156      	bne.n	8002012 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f64:	2301      	movs	r3, #1
 8001f66:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f68:	e045      	b.n	8001ff6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6c:	015a      	lsls	r2, r3, #5
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	4413      	add	r3, r2
 8001f72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f7e:	4613      	mov	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	4413      	add	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	440b      	add	r3, r1
 8001f88:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d12e      	bne.n	8001ff0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f92:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	da2b      	bge.n	8001ff0 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	0c1a      	lsrs	r2, r3, #16
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001fa2:	4053      	eors	r3, r2
 8001fa4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d121      	bne.n	8001ff0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10a      	bne.n	8001ff0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	69fa      	ldr	r2, [r7, #28]
 8001fe4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001fe8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fec:	6053      	str	r3, [r2, #4]
            break;
 8001fee:	e008      	b.n	8002002 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	791b      	ldrb	r3, [r3, #4]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d3b3      	bcc.n	8001f6a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002010:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f003 fcd6 	bl	80059c8 <USB_ReadInterrupts>
 800201c:	4603      	mov	r3, r0
 800201e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002026:	d10a      	bne.n	800203e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f00a fe2f 	bl	800cc8c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695a      	ldr	r2, [r3, #20]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800203c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f003 fcc0 	bl	80059c8 <USB_ReadInterrupts>
 8002048:	4603      	mov	r3, r0
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	2b04      	cmp	r3, #4
 8002050:	d115      	bne.n	800207e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f00a fe1f 	bl	800cca8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6859      	ldr	r1, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	430a      	orrs	r2, r1
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	e000      	b.n	800207e <HAL_PCD_IRQHandler+0x93c>
      return;
 800207c:	bf00      	nop
    }
  }
}
 800207e:	3734      	adds	r7, #52	@ 0x34
 8002080:	46bd      	mov	sp, r7
 8002082:	bd90      	pop	{r4, r7, pc}

08002084 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_PCD_SetAddress+0x1a>
 800209a:	2302      	movs	r3, #2
 800209c:	e012      	b.n	80020c4 <HAL_PCD_SetAddress+0x40>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	78fa      	ldrb	r2, [r7, #3]
 80020aa:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	78fa      	ldrb	r2, [r7, #3]
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f003 fc1f 	bl	80058f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	4608      	mov	r0, r1
 80020d6:	4611      	mov	r1, r2
 80020d8:	461a      	mov	r2, r3
 80020da:	4603      	mov	r3, r0
 80020dc:	70fb      	strb	r3, [r7, #3]
 80020de:	460b      	mov	r3, r1
 80020e0:	803b      	strh	r3, [r7, #0]
 80020e2:	4613      	mov	r3, r2
 80020e4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	da0f      	bge.n	8002112 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	f003 020f 	and.w	r2, r3, #15
 80020f8:	4613      	mov	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4413      	add	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	3310      	adds	r3, #16
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	3304      	adds	r3, #4
 8002108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2201      	movs	r2, #1
 800210e:	705a      	strb	r2, [r3, #1]
 8002110:	e00f      	b.n	8002132 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	f003 020f 	and.w	r2, r3, #15
 8002118:	4613      	mov	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4413      	add	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	4413      	add	r3, r2
 8002128:	3304      	adds	r3, #4
 800212a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	f003 030f 	and.w	r3, r3, #15
 8002138:	b2da      	uxtb	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800213e:	883b      	ldrh	r3, [r7, #0]
 8002140:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	78ba      	ldrb	r2, [r7, #2]
 800214c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	785b      	ldrb	r3, [r3, #1]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d004      	beq.n	8002160 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002160:	78bb      	ldrb	r3, [r7, #2]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d102      	bne.n	800216c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_PCD_EP_Open+0xae>
 8002176:	2302      	movs	r3, #2
 8002178:	e00e      	b.n	8002198 <HAL_PCD_EP_Open+0xcc>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68f9      	ldr	r1, [r7, #12]
 8002188:	4618      	mov	r0, r3
 800218a:	f002 fd9f 	bl	8004ccc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002196:	7afb      	ldrb	r3, [r7, #11]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	da0f      	bge.n	80021d4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	f003 020f 	and.w	r2, r3, #15
 80021ba:	4613      	mov	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	3310      	adds	r3, #16
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	4413      	add	r3, r2
 80021c8:	3304      	adds	r3, #4
 80021ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2201      	movs	r2, #1
 80021d0:	705a      	strb	r2, [r3, #1]
 80021d2:	e00f      	b.n	80021f4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	f003 020f 	and.w	r2, r3, #15
 80021da:	4613      	mov	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4413      	add	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	3304      	adds	r3, #4
 80021ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002206:	2b01      	cmp	r3, #1
 8002208:	d101      	bne.n	800220e <HAL_PCD_EP_Close+0x6e>
 800220a:	2302      	movs	r3, #2
 800220c:	e00e      	b.n	800222c <HAL_PCD_EP_Close+0x8c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68f9      	ldr	r1, [r7, #12]
 800221c:	4618      	mov	r0, r3
 800221e:	f002 fddd 	bl	8004ddc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	460b      	mov	r3, r1
 8002242:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002244:	7afb      	ldrb	r3, [r7, #11]
 8002246:	f003 020f 	and.w	r2, r3, #15
 800224a:	4613      	mov	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4413      	add	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4413      	add	r3, r2
 800225a:	3304      	adds	r3, #4
 800225c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2200      	movs	r2, #0
 800226e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2200      	movs	r2, #0
 8002274:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002276:	7afb      	ldrb	r3, [r7, #11]
 8002278:	f003 030f 	and.w	r3, r3, #15
 800227c:	b2da      	uxtb	r2, r3
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	799b      	ldrb	r3, [r3, #6]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d102      	bne.n	8002290 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	799b      	ldrb	r3, [r3, #6]
 8002298:	461a      	mov	r2, r3
 800229a:	6979      	ldr	r1, [r7, #20]
 800229c:	f002 fe7a 	bl	8004f94 <USB_EPStartXfer>

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	460b      	mov	r3, r1
 80022b4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	f003 020f 	and.w	r2, r3, #15
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4413      	add	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80022cc:	681b      	ldr	r3, [r3, #0]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	603b      	str	r3, [r7, #0]
 80022e6:	460b      	mov	r3, r1
 80022e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ea:	7afb      	ldrb	r3, [r7, #11]
 80022ec:	f003 020f 	and.w	r2, r3, #15
 80022f0:	4613      	mov	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	3310      	adds	r3, #16
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4413      	add	r3, r2
 80022fe:	3304      	adds	r3, #4
 8002300:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2200      	movs	r2, #0
 8002312:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2201      	movs	r2, #1
 8002318:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800231a:	7afb      	ldrb	r3, [r7, #11]
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	b2da      	uxtb	r2, r3
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	799b      	ldrb	r3, [r3, #6]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d102      	bne.n	8002334 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	799b      	ldrb	r3, [r3, #6]
 800233c:	461a      	mov	r2, r3
 800233e:	6979      	ldr	r1, [r7, #20]
 8002340:	f002 fe28 	bl	8004f94 <USB_EPStartXfer>

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b084      	sub	sp, #16
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	460b      	mov	r3, r1
 8002358:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800235a:	78fb      	ldrb	r3, [r7, #3]
 800235c:	f003 030f 	and.w	r3, r3, #15
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	7912      	ldrb	r2, [r2, #4]
 8002364:	4293      	cmp	r3, r2
 8002366:	d901      	bls.n	800236c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e04f      	b.n	800240c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800236c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002370:	2b00      	cmp	r3, #0
 8002372:	da0f      	bge.n	8002394 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	f003 020f 	and.w	r2, r3, #15
 800237a:	4613      	mov	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	3310      	adds	r3, #16
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4413      	add	r3, r2
 8002388:	3304      	adds	r3, #4
 800238a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2201      	movs	r2, #1
 8002390:	705a      	strb	r2, [r3, #1]
 8002392:	e00d      	b.n	80023b0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	4613      	mov	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4413      	add	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	3304      	adds	r3, #4
 80023a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2201      	movs	r2, #1
 80023b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023b6:	78fb      	ldrb	r3, [r7, #3]
 80023b8:	f003 030f 	and.w	r3, r3, #15
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <HAL_PCD_EP_SetStall+0x82>
 80023cc:	2302      	movs	r3, #2
 80023ce:	e01d      	b.n	800240c <HAL_PCD_EP_SetStall+0xbe>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68f9      	ldr	r1, [r7, #12]
 80023de:	4618      	mov	r0, r3
 80023e0:	f003 f9b6 	bl	8005750 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d109      	bne.n	8002402 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	7999      	ldrb	r1, [r3, #6]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023fc:	461a      	mov	r2, r3
 80023fe:	f003 fba7 	bl	8005b50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002420:	78fb      	ldrb	r3, [r7, #3]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	7912      	ldrb	r2, [r2, #4]
 800242a:	4293      	cmp	r3, r2
 800242c:	d901      	bls.n	8002432 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e042      	b.n	80024b8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002432:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002436:	2b00      	cmp	r3, #0
 8002438:	da0f      	bge.n	800245a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	f003 020f 	and.w	r2, r3, #15
 8002440:	4613      	mov	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	3310      	adds	r3, #16
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	3304      	adds	r3, #4
 8002450:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2201      	movs	r2, #1
 8002456:	705a      	strb	r2, [r3, #1]
 8002458:	e00f      	b.n	800247a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800245a:	78fb      	ldrb	r3, [r7, #3]
 800245c:	f003 020f 	and.w	r2, r3, #15
 8002460:	4613      	mov	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	4413      	add	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	4413      	add	r3, r2
 8002470:	3304      	adds	r3, #4
 8002472:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	b2da      	uxtb	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_PCD_EP_ClrStall+0x86>
 8002496:	2302      	movs	r3, #2
 8002498:	e00e      	b.n	80024b8 <HAL_PCD_EP_ClrStall+0xa4>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68f9      	ldr	r1, [r7, #12]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f003 f9bf 	bl	800582c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80024cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	da0c      	bge.n	80024ee <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024d4:	78fb      	ldrb	r3, [r7, #3]
 80024d6:	f003 020f 	and.w	r2, r3, #15
 80024da:	4613      	mov	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	3310      	adds	r3, #16
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	4413      	add	r3, r2
 80024e8:	3304      	adds	r3, #4
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	e00c      	b.n	8002508 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024ee:	78fb      	ldrb	r3, [r7, #3]
 80024f0:	f003 020f 	and.w	r2, r3, #15
 80024f4:	4613      	mov	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4413      	add	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	4413      	add	r3, r2
 8002504:	3304      	adds	r3, #4
 8002506:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68f9      	ldr	r1, [r7, #12]
 800250e:	4618      	mov	r0, r3
 8002510:	f002 ffde 	bl	80054d0 <USB_EPStopXfer>
 8002514:	4603      	mov	r3, r0
 8002516:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002518:	7afb      	ldrb	r3, [r7, #11]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	460b      	mov	r3, r1
 800252c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_PCD_EP_Flush+0x1a>
 8002538:	2302      	movs	r3, #2
 800253a:	e01b      	b.n	8002574 <HAL_PCD_EP_Flush+0x52>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8002544:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002548:	2b00      	cmp	r3, #0
 800254a:	da09      	bge.n	8002560 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	4619      	mov	r1, r3
 8002558:	4610      	mov	r0, r2
 800255a:	f002 fb19 	bl	8004b90 <USB_FlushTxFifo>
 800255e:	e004      	b.n	800256a <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f002 fb45 	bl	8004bf4 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08a      	sub	sp, #40	@ 0x28
 8002580:	af02      	add	r7, sp, #8
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	4613      	mov	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4413      	add	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	3310      	adds	r3, #16
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	4413      	add	r3, r2
 80025a0:	3304      	adds	r3, #4
 80025a2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	695a      	ldr	r2, [r3, #20]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d901      	bls.n	80025b4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e06b      	b.n	800268c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	69fa      	ldr	r2, [r7, #28]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d902      	bls.n	80025d0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	3303      	adds	r3, #3
 80025d4:	089b      	lsrs	r3, r3, #2
 80025d6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025d8:	e02a      	b.n	8002630 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	691a      	ldr	r2, [r3, #16]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	69fa      	ldr	r2, [r7, #28]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d902      	bls.n	80025f6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3303      	adds	r3, #3
 80025fa:	089b      	lsrs	r3, r3, #2
 80025fc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	68d9      	ldr	r1, [r3, #12]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	b2da      	uxtb	r2, r3
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	4603      	mov	r3, r0
 8002612:	6978      	ldr	r0, [r7, #20]
 8002614:	f003 f806 	bl	8005624 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	441a      	add	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	695a      	ldr	r2, [r3, #20]
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	441a      	add	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	4413      	add	r3, r2
 8002638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	429a      	cmp	r2, r3
 8002644:	d809      	bhi.n	800265a <PCD_WriteEmptyTxFifo+0xde>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	695a      	ldr	r2, [r3, #20]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800264e:	429a      	cmp	r2, r3
 8002650:	d203      	bcs.n	800265a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1bf      	bne.n	80025da <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	429a      	cmp	r2, r3
 8002664:	d811      	bhi.n	800268a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	2201      	movs	r2, #1
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800267a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	43db      	mvns	r3, r3
 8002680:	6939      	ldr	r1, [r7, #16]
 8002682:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002686:	4013      	ands	r3, r2
 8002688:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3720      	adds	r7, #32
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	333c      	adds	r3, #60	@ 0x3c
 80026ac:	3304      	adds	r3, #4
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	799b      	ldrb	r3, [r3, #6]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d17b      	bne.n	80027c2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d015      	beq.n	8002700 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	4a61      	ldr	r2, [pc, #388]	@ (800285c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	f240 80b9 	bls.w	8002850 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 80b3 	beq.w	8002850 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026f6:	461a      	mov	r2, r3
 80026f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026fc:	6093      	str	r3, [r2, #8]
 80026fe:	e0a7      	b.n	8002850 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f003 0320 	and.w	r3, r3, #32
 8002706:	2b00      	cmp	r3, #0
 8002708:	d009      	beq.n	800271e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	4413      	add	r3, r2
 8002712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002716:	461a      	mov	r2, r3
 8002718:	2320      	movs	r3, #32
 800271a:	6093      	str	r3, [r2, #8]
 800271c:	e098      	b.n	8002850 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002724:	2b00      	cmp	r3, #0
 8002726:	f040 8093 	bne.w	8002850 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	4a4b      	ldr	r2, [pc, #300]	@ (800285c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d90f      	bls.n	8002752 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00a      	beq.n	8002752 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	4413      	add	r3, r2
 8002744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002748:	461a      	mov	r2, r3
 800274a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800274e:	6093      	str	r3, [r2, #8]
 8002750:	e07e      	b.n	8002850 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	4613      	mov	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4413      	add	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	4413      	add	r3, r2
 8002764:	3304      	adds	r3, #4
 8002766:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a1a      	ldr	r2, [r3, #32]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	0159      	lsls	r1, r3, #5
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	440b      	add	r3, r1
 8002774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277e:	1ad2      	subs	r2, r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d114      	bne.n	80027b4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d109      	bne.n	80027a6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800279c:	461a      	mov	r2, r3
 800279e:	2101      	movs	r1, #1
 80027a0:	f003 f9d6 	bl	8005b50 <USB_EP0_OutStart>
 80027a4:	e006      	b.n	80027b4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	441a      	add	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	4619      	mov	r1, r3
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f00a f9a2 	bl	800cb04 <HAL_PCD_DataOutStageCallback>
 80027c0:	e046      	b.n	8002850 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	4a26      	ldr	r2, [pc, #152]	@ (8002860 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d124      	bne.n	8002814 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00a      	beq.n	80027ea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027e0:	461a      	mov	r2, r3
 80027e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027e6:	6093      	str	r3, [r2, #8]
 80027e8:	e032      	b.n	8002850 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	f003 0320 	and.w	r3, r3, #32
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002800:	461a      	mov	r2, r3
 8002802:	2320      	movs	r3, #32
 8002804:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	b2db      	uxtb	r3, r3
 800280a:	4619      	mov	r1, r3
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f00a f979 	bl	800cb04 <HAL_PCD_DataOutStageCallback>
 8002812:	e01d      	b.n	8002850 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d114      	bne.n	8002844 <PCD_EP_OutXfrComplete_int+0x1b0>
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	4613      	mov	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d108      	bne.n	8002844 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6818      	ldr	r0, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800283c:	461a      	mov	r2, r3
 800283e:	2100      	movs	r1, #0
 8002840:	f003 f986 	bl	8005b50 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	b2db      	uxtb	r3, r3
 8002848:	4619      	mov	r1, r3
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f00a f95a 	bl	800cb04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3720      	adds	r7, #32
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	4f54300a 	.word	0x4f54300a
 8002860:	4f54310a 	.word	0x4f54310a

08002864 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	333c      	adds	r3, #60	@ 0x3c
 800287c:	3304      	adds	r3, #4
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	015a      	lsls	r2, r3, #5
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4413      	add	r3, r2
 800288a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4a15      	ldr	r2, [pc, #84]	@ (80028ec <PCD_EP_OutSetupPacket_int+0x88>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d90e      	bls.n	80028b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d009      	beq.n	80028b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028b0:	461a      	mov	r2, r3
 80028b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f00a f911 	bl	800cae0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4a0a      	ldr	r2, [pc, #40]	@ (80028ec <PCD_EP_OutSetupPacket_int+0x88>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d90c      	bls.n	80028e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	799b      	ldrb	r3, [r3, #6]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d108      	bne.n	80028e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80028d8:	461a      	mov	r2, r3
 80028da:	2101      	movs	r1, #1
 80028dc:	f003 f938 	bl	8005b50 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	4f54300a 	.word	0x4f54300a

080028f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	70fb      	strb	r3, [r7, #3]
 80028fc:	4613      	mov	r3, r2
 80028fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002906:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d107      	bne.n	800291e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800290e:	883b      	ldrh	r3, [r7, #0]
 8002910:	0419      	lsls	r1, r3, #16
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	430a      	orrs	r2, r1
 800291a:	629a      	str	r2, [r3, #40]	@ 0x28
 800291c:	e028      	b.n	8002970 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002924:	0c1b      	lsrs	r3, r3, #16
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	4413      	add	r3, r2
 800292a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800292c:	2300      	movs	r3, #0
 800292e:	73fb      	strb	r3, [r7, #15]
 8002930:	e00d      	b.n	800294e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	7bfb      	ldrb	r3, [r7, #15]
 8002938:	3340      	adds	r3, #64	@ 0x40
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	0c1b      	lsrs	r3, r3, #16
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	4413      	add	r3, r2
 8002946:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	3301      	adds	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
 800294e:	7bfa      	ldrb	r2, [r7, #15]
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	3b01      	subs	r3, #1
 8002954:	429a      	cmp	r2, r3
 8002956:	d3ec      	bcc.n	8002932 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002958:	883b      	ldrh	r3, [r7, #0]
 800295a:	0418      	lsls	r0, r3, #16
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6819      	ldr	r1, [r3, #0]
 8002960:	78fb      	ldrb	r3, [r7, #3]
 8002962:	3b01      	subs	r3, #1
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	4302      	orrs	r2, r0
 8002968:	3340      	adds	r3, #64	@ 0x40
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	460b      	mov	r3, r1
 8002988:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	887a      	ldrh	r2, [r7, #2]
 8002990:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e267      	b.n	8002e9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d075      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029d6:	4b88      	ldr	r3, [pc, #544]	@ (8002bf8 <HAL_RCC_OscConfig+0x240>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 030c 	and.w	r3, r3, #12
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d00c      	beq.n	80029fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029e2:	4b85      	ldr	r3, [pc, #532]	@ (8002bf8 <HAL_RCC_OscConfig+0x240>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d112      	bne.n	8002a14 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ee:	4b82      	ldr	r3, [pc, #520]	@ (8002bf8 <HAL_RCC_OscConfig+0x240>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029fa:	d10b      	bne.n	8002a14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029fc:	4b7e      	ldr	r3, [pc, #504]	@ (8002bf8 <HAL_RCC_OscConfig+0x240>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d05b      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x108>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d157      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e242      	b.n	8002e9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a1c:	d106      	bne.n	8002a2c <HAL_RCC_OscConfig+0x74>
 8002a1e:	4b76      	ldr	r3, [pc, #472]	@ (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a75      	ldr	r2, [pc, #468]	@ (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	e01d      	b.n	8002a68 <HAL_RCC_OscConfig+0xb0>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCC_OscConfig+0x98>
 8002a36:	4b70      	ldr	r3, [pc, #448]	@ (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a6f      	ldr	r2, [pc, #444]	@ (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	4b6d      	ldr	r3, [pc, #436]	@ (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a6c      	ldr	r2, [pc, #432]	@ (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	e00b      	b.n	8002a68 <HAL_RCC_OscConfig+0xb0>
 8002a50:	4b69      	ldr	r3, [pc, #420]	@ (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a68      	ldr	r2, [pc, #416]	@ (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	4b66      	ldr	r3, [pc, #408]	@ (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a65      	ldr	r2, [pc, #404]	@ (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002a62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d013      	beq.n	8002a98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7fe f9fa 	bl	8000e68 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a78:	f7fe f9f6 	bl	8000e68 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b64      	cmp	r3, #100	@ 0x64
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e207      	b.n	8002e9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	4b5b      	ldr	r3, [pc, #364]	@ (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0xc0>
 8002a96:	e014      	b.n	8002ac2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7fe f9e6 	bl	8000e68 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa0:	f7fe f9e2 	bl	8000e68 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	@ 0x64
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e1f3      	b.n	8002e9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab2:	4b51      	ldr	r3, [pc, #324]	@ (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0xe8>
 8002abe:	e000      	b.n	8002ac2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d063      	beq.n	8002b96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ace:	4b4a      	ldr	r3, [pc, #296]	@ (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00b      	beq.n	8002af2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ada:	4b47      	ldr	r3, [pc, #284]	@ (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d11c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ae6:	4b44      	ldr	r3, [pc, #272]	@ (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d116      	bne.n	8002b20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af2:	4b41      	ldr	r3, [pc, #260]	@ (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_RCC_OscConfig+0x152>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d001      	beq.n	8002b0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e1c7      	b.n	8002e9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0a:	4b3b      	ldr	r3, [pc, #236]	@ (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4937      	ldr	r1, [pc, #220]	@ (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1e:	e03a      	b.n	8002b96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d020      	beq.n	8002b6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b28:	4b34      	ldr	r3, [pc, #208]	@ (8002bfc <HAL_RCC_OscConfig+0x244>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2e:	f7fe f99b 	bl	8000e68 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b36:	f7fe f997 	bl	8000e68 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e1a8      	b.n	8002e9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b48:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b54:	4b28      	ldr	r3, [pc, #160]	@ (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4925      	ldr	r1, [pc, #148]	@ (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	600b      	str	r3, [r1, #0]
 8002b68:	e015      	b.n	8002b96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b6a:	4b24      	ldr	r3, [pc, #144]	@ (8002bfc <HAL_RCC_OscConfig+0x244>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7fe f97a 	bl	8000e68 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b78:	f7fe f976 	bl	8000e68 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e187      	b.n	8002e9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d036      	beq.n	8002c10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d016      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002baa:	4b15      	ldr	r3, [pc, #84]	@ (8002c00 <HAL_RCC_OscConfig+0x248>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb0:	f7fe f95a 	bl	8000e68 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb8:	f7fe f956 	bl	8000e68 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e167      	b.n	8002e9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bca:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x200>
 8002bd6:	e01b      	b.n	8002c10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bd8:	4b09      	ldr	r3, [pc, #36]	@ (8002c00 <HAL_RCC_OscConfig+0x248>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bde:	f7fe f943 	bl	8000e68 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be4:	e00e      	b.n	8002c04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002be6:	f7fe f93f 	bl	8000e68 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d907      	bls.n	8002c04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e150      	b.n	8002e9a <HAL_RCC_OscConfig+0x4e2>
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	42470000 	.word	0x42470000
 8002c00:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c04:	4b88      	ldr	r3, [pc, #544]	@ (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002c06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1ea      	bne.n	8002be6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 8097 	beq.w	8002d4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c22:	4b81      	ldr	r3, [pc, #516]	@ (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10f      	bne.n	8002c4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	4b7d      	ldr	r3, [pc, #500]	@ (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	4a7c      	ldr	r2, [pc, #496]	@ (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002c38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c3e:	4b7a      	ldr	r3, [pc, #488]	@ (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c46:	60bb      	str	r3, [r7, #8]
 8002c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4e:	4b77      	ldr	r3, [pc, #476]	@ (8002e2c <HAL_RCC_OscConfig+0x474>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d118      	bne.n	8002c8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5a:	4b74      	ldr	r3, [pc, #464]	@ (8002e2c <HAL_RCC_OscConfig+0x474>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a73      	ldr	r2, [pc, #460]	@ (8002e2c <HAL_RCC_OscConfig+0x474>)
 8002c60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c66:	f7fe f8ff 	bl	8000e68 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6e:	f7fe f8fb 	bl	8000e68 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e10c      	b.n	8002e9a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c80:	4b6a      	ldr	r3, [pc, #424]	@ (8002e2c <HAL_RCC_OscConfig+0x474>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0f0      	beq.n	8002c6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d106      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x2ea>
 8002c94:	4b64      	ldr	r3, [pc, #400]	@ (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c98:	4a63      	ldr	r2, [pc, #396]	@ (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ca0:	e01c      	b.n	8002cdc <HAL_RCC_OscConfig+0x324>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b05      	cmp	r3, #5
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x30c>
 8002caa:	4b5f      	ldr	r3, [pc, #380]	@ (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cae:	4a5e      	ldr	r2, [pc, #376]	@ (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002cb0:	f043 0304 	orr.w	r3, r3, #4
 8002cb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cb6:	4b5c      	ldr	r3, [pc, #368]	@ (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cba:	4a5b      	ldr	r2, [pc, #364]	@ (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cc2:	e00b      	b.n	8002cdc <HAL_RCC_OscConfig+0x324>
 8002cc4:	4b58      	ldr	r3, [pc, #352]	@ (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc8:	4a57      	ldr	r2, [pc, #348]	@ (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002cca:	f023 0301 	bic.w	r3, r3, #1
 8002cce:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cd0:	4b55      	ldr	r3, [pc, #340]	@ (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd4:	4a54      	ldr	r2, [pc, #336]	@ (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002cd6:	f023 0304 	bic.w	r3, r3, #4
 8002cda:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d015      	beq.n	8002d10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce4:	f7fe f8c0 	bl	8000e68 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cea:	e00a      	b.n	8002d02 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cec:	f7fe f8bc 	bl	8000e68 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e0cb      	b.n	8002e9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d02:	4b49      	ldr	r3, [pc, #292]	@ (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0ee      	beq.n	8002cec <HAL_RCC_OscConfig+0x334>
 8002d0e:	e014      	b.n	8002d3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d10:	f7fe f8aa 	bl	8000e68 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d16:	e00a      	b.n	8002d2e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d18:	f7fe f8a6 	bl	8000e68 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e0b5      	b.n	8002e9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d2e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1ee      	bne.n	8002d18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d3a:	7dfb      	ldrb	r3, [r7, #23]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d105      	bne.n	8002d4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d40:	4b39      	ldr	r3, [pc, #228]	@ (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d44:	4a38      	ldr	r2, [pc, #224]	@ (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002d46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80a1 	beq.w	8002e98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d56:	4b34      	ldr	r3, [pc, #208]	@ (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d05c      	beq.n	8002e1c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d141      	bne.n	8002dee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6a:	4b31      	ldr	r3, [pc, #196]	@ (8002e30 <HAL_RCC_OscConfig+0x478>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d70:	f7fe f87a 	bl	8000e68 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d78:	f7fe f876 	bl	8000e68 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e087      	b.n	8002e9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8a:	4b27      	ldr	r3, [pc, #156]	@ (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69da      	ldr	r2, [r3, #28]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da4:	019b      	lsls	r3, r3, #6
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dac:	085b      	lsrs	r3, r3, #1
 8002dae:	3b01      	subs	r3, #1
 8002db0:	041b      	lsls	r3, r3, #16
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db8:	061b      	lsls	r3, r3, #24
 8002dba:	491b      	ldr	r1, [pc, #108]	@ (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e30 <HAL_RCC_OscConfig+0x478>)
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc6:	f7fe f84f 	bl	8000e68 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dce:	f7fe f84b 	bl	8000e68 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e05c      	b.n	8002e9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de0:	4b11      	ldr	r3, [pc, #68]	@ (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0f0      	beq.n	8002dce <HAL_RCC_OscConfig+0x416>
 8002dec:	e054      	b.n	8002e98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dee:	4b10      	ldr	r3, [pc, #64]	@ (8002e30 <HAL_RCC_OscConfig+0x478>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df4:	f7fe f838 	bl	8000e68 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfc:	f7fe f834 	bl	8000e68 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e045      	b.n	8002e9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0e:	4b06      	ldr	r3, [pc, #24]	@ (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0x444>
 8002e1a:	e03d      	b.n	8002e98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d107      	bne.n	8002e34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e038      	b.n	8002e9a <HAL_RCC_OscConfig+0x4e2>
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40007000 	.word	0x40007000
 8002e30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea4 <HAL_RCC_OscConfig+0x4ec>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d028      	beq.n	8002e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d121      	bne.n	8002e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d11a      	bne.n	8002e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e64:	4013      	ands	r3, r2
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d111      	bne.n	8002e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7a:	085b      	lsrs	r3, r3, #1
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d107      	bne.n	8002e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e000      	b.n	8002e9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40023800 	.word	0x40023800

08002ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0cc      	b.n	8003056 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ebc:	4b68      	ldr	r3, [pc, #416]	@ (8003060 <HAL_RCC_ClockConfig+0x1b8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d90c      	bls.n	8002ee4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eca:	4b65      	ldr	r3, [pc, #404]	@ (8003060 <HAL_RCC_ClockConfig+0x1b8>)
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed2:	4b63      	ldr	r3, [pc, #396]	@ (8003060 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d001      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0b8      	b.n	8003056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d020      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d005      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002efc:	4b59      	ldr	r3, [pc, #356]	@ (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	4a58      	ldr	r2, [pc, #352]	@ (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d005      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f14:	4b53      	ldr	r3, [pc, #332]	@ (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	4a52      	ldr	r2, [pc, #328]	@ (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f20:	4b50      	ldr	r3, [pc, #320]	@ (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	494d      	ldr	r1, [pc, #308]	@ (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d044      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d107      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f46:	4b47      	ldr	r3, [pc, #284]	@ (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d119      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e07f      	b.n	8003056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d003      	beq.n	8002f66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d107      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f66:	4b3f      	ldr	r3, [pc, #252]	@ (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d109      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e06f      	b.n	8003056 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f76:	4b3b      	ldr	r3, [pc, #236]	@ (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e067      	b.n	8003056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f86:	4b37      	ldr	r3, [pc, #220]	@ (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f023 0203 	bic.w	r2, r3, #3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	4934      	ldr	r1, [pc, #208]	@ (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f98:	f7fd ff66 	bl	8000e68 <HAL_GetTick>
 8002f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9e:	e00a      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa0:	f7fd ff62 	bl	8000e68 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e04f      	b.n	8003056 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb6:	4b2b      	ldr	r3, [pc, #172]	@ (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 020c 	and.w	r2, r3, #12
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d1eb      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc8:	4b25      	ldr	r3, [pc, #148]	@ (8003060 <HAL_RCC_ClockConfig+0x1b8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d20c      	bcs.n	8002ff0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd6:	4b22      	ldr	r3, [pc, #136]	@ (8003060 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fde:	4b20      	ldr	r3, [pc, #128]	@ (8003060 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d001      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e032      	b.n	8003056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d008      	beq.n	800300e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ffc:	4b19      	ldr	r3, [pc, #100]	@ (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4916      	ldr	r1, [pc, #88]	@ (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	4313      	orrs	r3, r2
 800300c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d009      	beq.n	800302e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800301a:	4b12      	ldr	r3, [pc, #72]	@ (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	490e      	ldr	r1, [pc, #56]	@ (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 800302a:	4313      	orrs	r3, r2
 800302c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800302e:	f000 f821 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 8003032:	4602      	mov	r2, r0
 8003034:	4b0b      	ldr	r3, [pc, #44]	@ (8003064 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	490a      	ldr	r1, [pc, #40]	@ (8003068 <HAL_RCC_ClockConfig+0x1c0>)
 8003040:	5ccb      	ldrb	r3, [r1, r3]
 8003042:	fa22 f303 	lsr.w	r3, r2, r3
 8003046:	4a09      	ldr	r2, [pc, #36]	@ (800306c <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800304a:	4b09      	ldr	r3, [pc, #36]	@ (8003070 <HAL_RCC_ClockConfig+0x1c8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f7fd fec6 	bl	8000de0 <HAL_InitTick>

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40023c00 	.word	0x40023c00
 8003064:	40023800 	.word	0x40023800
 8003068:	0800dcf0 	.word	0x0800dcf0
 800306c:	20000000 	.word	0x20000000
 8003070:	20000004 	.word	0x20000004

08003074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003078:	b094      	sub	sp, #80	@ 0x50
 800307a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003080:	2300      	movs	r3, #0
 8003082:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800308c:	4b79      	ldr	r3, [pc, #484]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x200>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 030c 	and.w	r3, r3, #12
 8003094:	2b08      	cmp	r3, #8
 8003096:	d00d      	beq.n	80030b4 <HAL_RCC_GetSysClockFreq+0x40>
 8003098:	2b08      	cmp	r3, #8
 800309a:	f200 80e1 	bhi.w	8003260 <HAL_RCC_GetSysClockFreq+0x1ec>
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0x34>
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d003      	beq.n	80030ae <HAL_RCC_GetSysClockFreq+0x3a>
 80030a6:	e0db      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030a8:	4b73      	ldr	r3, [pc, #460]	@ (8003278 <HAL_RCC_GetSysClockFreq+0x204>)
 80030aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030ac:	e0db      	b.n	8003266 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030ae:	4b73      	ldr	r3, [pc, #460]	@ (800327c <HAL_RCC_GetSysClockFreq+0x208>)
 80030b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030b2:	e0d8      	b.n	8003266 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030b4:	4b6f      	ldr	r3, [pc, #444]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x200>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030be:	4b6d      	ldr	r3, [pc, #436]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x200>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d063      	beq.n	8003192 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ca:	4b6a      	ldr	r3, [pc, #424]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x200>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	099b      	lsrs	r3, r3, #6
 80030d0:	2200      	movs	r2, #0
 80030d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80030d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80030de:	2300      	movs	r3, #0
 80030e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80030e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80030e6:	4622      	mov	r2, r4
 80030e8:	462b      	mov	r3, r5
 80030ea:	f04f 0000 	mov.w	r0, #0
 80030ee:	f04f 0100 	mov.w	r1, #0
 80030f2:	0159      	lsls	r1, r3, #5
 80030f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030f8:	0150      	lsls	r0, r2, #5
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	4621      	mov	r1, r4
 8003100:	1a51      	subs	r1, r2, r1
 8003102:	6139      	str	r1, [r7, #16]
 8003104:	4629      	mov	r1, r5
 8003106:	eb63 0301 	sbc.w	r3, r3, r1
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	f04f 0300 	mov.w	r3, #0
 8003114:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003118:	4659      	mov	r1, fp
 800311a:	018b      	lsls	r3, r1, #6
 800311c:	4651      	mov	r1, sl
 800311e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003122:	4651      	mov	r1, sl
 8003124:	018a      	lsls	r2, r1, #6
 8003126:	4651      	mov	r1, sl
 8003128:	ebb2 0801 	subs.w	r8, r2, r1
 800312c:	4659      	mov	r1, fp
 800312e:	eb63 0901 	sbc.w	r9, r3, r1
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800313e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003142:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003146:	4690      	mov	r8, r2
 8003148:	4699      	mov	r9, r3
 800314a:	4623      	mov	r3, r4
 800314c:	eb18 0303 	adds.w	r3, r8, r3
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	462b      	mov	r3, r5
 8003154:	eb49 0303 	adc.w	r3, r9, r3
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	f04f 0200 	mov.w	r2, #0
 800315e:	f04f 0300 	mov.w	r3, #0
 8003162:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003166:	4629      	mov	r1, r5
 8003168:	024b      	lsls	r3, r1, #9
 800316a:	4621      	mov	r1, r4
 800316c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003170:	4621      	mov	r1, r4
 8003172:	024a      	lsls	r2, r1, #9
 8003174:	4610      	mov	r0, r2
 8003176:	4619      	mov	r1, r3
 8003178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800317a:	2200      	movs	r2, #0
 800317c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800317e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003180:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003184:	f7fd f88c 	bl	80002a0 <__aeabi_uldivmod>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4613      	mov	r3, r2
 800318e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003190:	e058      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003192:	4b38      	ldr	r3, [pc, #224]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x200>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	099b      	lsrs	r3, r3, #6
 8003198:	2200      	movs	r2, #0
 800319a:	4618      	mov	r0, r3
 800319c:	4611      	mov	r1, r2
 800319e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031a2:	623b      	str	r3, [r7, #32]
 80031a4:	2300      	movs	r3, #0
 80031a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80031a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031ac:	4642      	mov	r2, r8
 80031ae:	464b      	mov	r3, r9
 80031b0:	f04f 0000 	mov.w	r0, #0
 80031b4:	f04f 0100 	mov.w	r1, #0
 80031b8:	0159      	lsls	r1, r3, #5
 80031ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031be:	0150      	lsls	r0, r2, #5
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4641      	mov	r1, r8
 80031c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80031ca:	4649      	mov	r1, r9
 80031cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031e4:	ebb2 040a 	subs.w	r4, r2, sl
 80031e8:	eb63 050b 	sbc.w	r5, r3, fp
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	00eb      	lsls	r3, r5, #3
 80031f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031fa:	00e2      	lsls	r2, r4, #3
 80031fc:	4614      	mov	r4, r2
 80031fe:	461d      	mov	r5, r3
 8003200:	4643      	mov	r3, r8
 8003202:	18e3      	adds	r3, r4, r3
 8003204:	603b      	str	r3, [r7, #0]
 8003206:	464b      	mov	r3, r9
 8003208:	eb45 0303 	adc.w	r3, r5, r3
 800320c:	607b      	str	r3, [r7, #4]
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	e9d7 4500 	ldrd	r4, r5, [r7]
 800321a:	4629      	mov	r1, r5
 800321c:	028b      	lsls	r3, r1, #10
 800321e:	4621      	mov	r1, r4
 8003220:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003224:	4621      	mov	r1, r4
 8003226:	028a      	lsls	r2, r1, #10
 8003228:	4610      	mov	r0, r2
 800322a:	4619      	mov	r1, r3
 800322c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800322e:	2200      	movs	r2, #0
 8003230:	61bb      	str	r3, [r7, #24]
 8003232:	61fa      	str	r2, [r7, #28]
 8003234:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003238:	f7fd f832 	bl	80002a0 <__aeabi_uldivmod>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4613      	mov	r3, r2
 8003242:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003244:	4b0b      	ldr	r3, [pc, #44]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x200>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	0c1b      	lsrs	r3, r3, #16
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	3301      	adds	r3, #1
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003254:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003258:	fbb2 f3f3 	udiv	r3, r2, r3
 800325c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800325e:	e002      	b.n	8003266 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003260:	4b05      	ldr	r3, [pc, #20]	@ (8003278 <HAL_RCC_GetSysClockFreq+0x204>)
 8003262:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003264:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003266:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003268:	4618      	mov	r0, r3
 800326a:	3750      	adds	r7, #80	@ 0x50
 800326c:	46bd      	mov	sp, r7
 800326e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003272:	bf00      	nop
 8003274:	40023800 	.word	0x40023800
 8003278:	00f42400 	.word	0x00f42400
 800327c:	007a1200 	.word	0x007a1200

08003280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003284:	4b03      	ldr	r3, [pc, #12]	@ (8003294 <HAL_RCC_GetHCLKFreq+0x14>)
 8003286:	681b      	ldr	r3, [r3, #0]
}
 8003288:	4618      	mov	r0, r3
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	20000000 	.word	0x20000000

08003298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800329c:	f7ff fff0 	bl	8003280 <HAL_RCC_GetHCLKFreq>
 80032a0:	4602      	mov	r2, r0
 80032a2:	4b05      	ldr	r3, [pc, #20]	@ (80032b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	0a9b      	lsrs	r3, r3, #10
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	4903      	ldr	r1, [pc, #12]	@ (80032bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ae:	5ccb      	ldrb	r3, [r1, r3]
 80032b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40023800 	.word	0x40023800
 80032bc:	0800dd00 	.word	0x0800dd00

080032c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032c4:	f7ff ffdc 	bl	8003280 <HAL_RCC_GetHCLKFreq>
 80032c8:	4602      	mov	r2, r0
 80032ca:	4b05      	ldr	r3, [pc, #20]	@ (80032e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	0b5b      	lsrs	r3, r3, #13
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	4903      	ldr	r1, [pc, #12]	@ (80032e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032d6:	5ccb      	ldrb	r3, [r1, r3]
 80032d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032dc:	4618      	mov	r0, r3
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40023800 	.word	0x40023800
 80032e4:	0800dd00 	.word	0x0800dd00

080032e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e07b      	b.n	80033f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d108      	bne.n	8003314 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800330a:	d009      	beq.n	8003320 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	61da      	str	r2, [r3, #28]
 8003312:	e005      	b.n	8003320 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d106      	bne.n	8003340 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7fd fbe0 	bl	8000b00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003356:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033a4:	ea42 0103 	orr.w	r1, r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	0c1b      	lsrs	r3, r3, #16
 80033be:	f003 0104 	and.w	r1, r3, #4
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c6:	f003 0210 	and.w	r2, r3, #16
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69da      	ldr	r2, [r3, #28]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b088      	sub	sp, #32
 80033fe:	af00      	add	r7, sp, #0
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	603b      	str	r3, [r7, #0]
 8003406:	4613      	mov	r3, r2
 8003408:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800340a:	f7fd fd2d 	bl	8000e68 <HAL_GetTick>
 800340e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003410:	88fb      	ldrh	r3, [r7, #6]
 8003412:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b01      	cmp	r3, #1
 800341e:	d001      	beq.n	8003424 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003420:	2302      	movs	r3, #2
 8003422:	e12a      	b.n	800367a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <HAL_SPI_Transmit+0x36>
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e122      	b.n	800367a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800343a:	2b01      	cmp	r3, #1
 800343c:	d101      	bne.n	8003442 <HAL_SPI_Transmit+0x48>
 800343e:	2302      	movs	r3, #2
 8003440:	e11b      	b.n	800367a <HAL_SPI_Transmit+0x280>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2203      	movs	r2, #3
 800344e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	88fa      	ldrh	r2, [r7, #6]
 8003462:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	88fa      	ldrh	r2, [r7, #6]
 8003468:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003490:	d10f      	bne.n	80034b2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034bc:	2b40      	cmp	r3, #64	@ 0x40
 80034be:	d007      	beq.n	80034d0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034d8:	d152      	bne.n	8003580 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <HAL_SPI_Transmit+0xee>
 80034e2:	8b7b      	ldrh	r3, [r7, #26]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d145      	bne.n	8003574 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ec:	881a      	ldrh	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f8:	1c9a      	adds	r2, r3, #2
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800350c:	e032      	b.n	8003574 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b02      	cmp	r3, #2
 800351a:	d112      	bne.n	8003542 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003520:	881a      	ldrh	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352c:	1c9a      	adds	r2, r3, #2
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003536:	b29b      	uxth	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003540:	e018      	b.n	8003574 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003542:	f7fd fc91 	bl	8000e68 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d803      	bhi.n	800355a <HAL_SPI_Transmit+0x160>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003558:	d102      	bne.n	8003560 <HAL_SPI_Transmit+0x166>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d109      	bne.n	8003574 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e082      	b.n	800367a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003578:	b29b      	uxth	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1c7      	bne.n	800350e <HAL_SPI_Transmit+0x114>
 800357e:	e053      	b.n	8003628 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d002      	beq.n	800358e <HAL_SPI_Transmit+0x194>
 8003588:	8b7b      	ldrh	r3, [r7, #26]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d147      	bne.n	800361e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	330c      	adds	r3, #12
 8003598:	7812      	ldrb	r2, [r2, #0]
 800359a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80035b4:	e033      	b.n	800361e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d113      	bne.n	80035ec <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	330c      	adds	r3, #12
 80035ce:	7812      	ldrb	r2, [r2, #0]
 80035d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80035ea:	e018      	b.n	800361e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035ec:	f7fd fc3c 	bl	8000e68 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d803      	bhi.n	8003604 <HAL_SPI_Transmit+0x20a>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003602:	d102      	bne.n	800360a <HAL_SPI_Transmit+0x210>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e02d      	b.n	800367a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003622:	b29b      	uxth	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1c6      	bne.n	80035b6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003628:	69fa      	ldr	r2, [r7, #28]
 800362a:	6839      	ldr	r1, [r7, #0]
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 fb77 	bl	8003d20 <SPI_EndRxTxTransaction>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10a      	bne.n	800365c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e000      	b.n	800367a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003678:	2300      	movs	r3, #0
  }
}
 800367a:	4618      	mov	r0, r3
 800367c:	3720      	adds	r7, #32
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b08a      	sub	sp, #40	@ 0x28
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	607a      	str	r2, [r7, #4]
 800368e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003690:	2301      	movs	r3, #1
 8003692:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003694:	f7fd fbe8 	bl	8000e68 <HAL_GetTick>
 8003698:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036a0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80036a8:	887b      	ldrh	r3, [r7, #2]
 80036aa:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036ac:	7ffb      	ldrb	r3, [r7, #31]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d00c      	beq.n	80036cc <HAL_SPI_TransmitReceive+0x4a>
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036b8:	d106      	bne.n	80036c8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d102      	bne.n	80036c8 <HAL_SPI_TransmitReceive+0x46>
 80036c2:	7ffb      	ldrb	r3, [r7, #31]
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d001      	beq.n	80036cc <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80036c8:	2302      	movs	r3, #2
 80036ca:	e17f      	b.n	80039cc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d005      	beq.n	80036de <HAL_SPI_TransmitReceive+0x5c>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <HAL_SPI_TransmitReceive+0x5c>
 80036d8:	887b      	ldrh	r3, [r7, #2]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e174      	b.n	80039cc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <HAL_SPI_TransmitReceive+0x6e>
 80036ec:	2302      	movs	r3, #2
 80036ee:	e16d      	b.n	80039cc <HAL_SPI_TransmitReceive+0x34a>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b04      	cmp	r3, #4
 8003702:	d003      	beq.n	800370c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2205      	movs	r2, #5
 8003708:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	887a      	ldrh	r2, [r7, #2]
 800371c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	887a      	ldrh	r2, [r7, #2]
 8003722:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	887a      	ldrh	r2, [r7, #2]
 800372e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	887a      	ldrh	r2, [r7, #2]
 8003734:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800374c:	2b40      	cmp	r3, #64	@ 0x40
 800374e:	d007      	beq.n	8003760 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800375e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003768:	d17e      	bne.n	8003868 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <HAL_SPI_TransmitReceive+0xf6>
 8003772:	8afb      	ldrh	r3, [r7, #22]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d16c      	bne.n	8003852 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377c:	881a      	ldrh	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003788:	1c9a      	adds	r2, r3, #2
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800379c:	e059      	b.n	8003852 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d11b      	bne.n	80037e4 <HAL_SPI_TransmitReceive+0x162>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d016      	beq.n	80037e4 <HAL_SPI_TransmitReceive+0x162>
 80037b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d113      	bne.n	80037e4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c0:	881a      	ldrh	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037cc:	1c9a      	adds	r2, r3, #2
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d119      	bne.n	8003826 <HAL_SPI_TransmitReceive+0x1a4>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d014      	beq.n	8003826 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003806:	b292      	uxth	r2, r2
 8003808:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380e:	1c9a      	adds	r2, r3, #2
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003822:	2301      	movs	r3, #1
 8003824:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003826:	f7fd fb1f 	bl	8000e68 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003832:	429a      	cmp	r2, r3
 8003834:	d80d      	bhi.n	8003852 <HAL_SPI_TransmitReceive+0x1d0>
 8003836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383c:	d009      	beq.n	8003852 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e0bc      	b.n	80039cc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003856:	b29b      	uxth	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1a0      	bne.n	800379e <HAL_SPI_TransmitReceive+0x11c>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d19b      	bne.n	800379e <HAL_SPI_TransmitReceive+0x11c>
 8003866:	e082      	b.n	800396e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <HAL_SPI_TransmitReceive+0x1f4>
 8003870:	8afb      	ldrh	r3, [r7, #22]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d171      	bne.n	800395a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	330c      	adds	r3, #12
 8003880:	7812      	ldrb	r2, [r2, #0]
 8003882:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003892:	b29b      	uxth	r3, r3
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800389c:	e05d      	b.n	800395a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d11c      	bne.n	80038e6 <HAL_SPI_TransmitReceive+0x264>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d017      	beq.n	80038e6 <HAL_SPI_TransmitReceive+0x264>
 80038b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d114      	bne.n	80038e6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	330c      	adds	r3, #12
 80038c6:	7812      	ldrb	r2, [r2, #0]
 80038c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d119      	bne.n	8003928 <HAL_SPI_TransmitReceive+0x2a6>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d014      	beq.n	8003928 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003924:	2301      	movs	r3, #1
 8003926:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003928:	f7fd fa9e 	bl	8000e68 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003934:	429a      	cmp	r2, r3
 8003936:	d803      	bhi.n	8003940 <HAL_SPI_TransmitReceive+0x2be>
 8003938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393e:	d102      	bne.n	8003946 <HAL_SPI_TransmitReceive+0x2c4>
 8003940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003942:	2b00      	cmp	r3, #0
 8003944:	d109      	bne.n	800395a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e038      	b.n	80039cc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d19c      	bne.n	800389e <HAL_SPI_TransmitReceive+0x21c>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d197      	bne.n	800389e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800396e:	6a3a      	ldr	r2, [r7, #32]
 8003970:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 f9d4 	bl	8003d20 <SPI_EndRxTxTransaction>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d008      	beq.n	8003990 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2220      	movs	r2, #32
 8003982:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e01d      	b.n	80039cc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003998:	2300      	movs	r3, #0
 800399a:	613b      	str	r3, [r7, #16]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	613b      	str	r3, [r7, #16]
 80039ac:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80039ca:	2300      	movs	r3, #0
  }
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3728      	adds	r7, #40	@ 0x28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	099b      	lsrs	r3, r3, #6
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10f      	bne.n	8003a18 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	099b      	lsrs	r3, r3, #6
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d004      	beq.n	8003a18 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	4798      	blx	r3
    return;
 8003a16:	e0d7      	b.n	8003bc8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	085b      	lsrs	r3, r3, #1
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00a      	beq.n	8003a3a <HAL_SPI_IRQHandler+0x66>
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	09db      	lsrs	r3, r3, #7
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d004      	beq.n	8003a3a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	4798      	blx	r3
    return;
 8003a38:	e0c6      	b.n	8003bc8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	095b      	lsrs	r3, r3, #5
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10c      	bne.n	8003a60 <HAL_SPI_IRQHandler+0x8c>
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	099b      	lsrs	r3, r3, #6
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	0a1b      	lsrs	r3, r3, #8
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 80b4 	beq.w	8003bc8 <HAL_SPI_IRQHandler+0x1f4>
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 80ad 	beq.w	8003bc8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	099b      	lsrs	r3, r3, #6
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d023      	beq.n	8003ac2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b03      	cmp	r3, #3
 8003a84:	d011      	beq.n	8003aaa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a8a:	f043 0204 	orr.w	r2, r3, #4
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	e00b      	b.n	8003ac2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003aaa:	2300      	movs	r3, #0
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	693b      	ldr	r3, [r7, #16]
        return;
 8003ac0:	e082      	b.n	8003bc8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	095b      	lsrs	r3, r3, #5
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d014      	beq.n	8003af8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ad2:	f043 0201 	orr.w	r2, r3, #1
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	0a1b      	lsrs	r3, r3, #8
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00c      	beq.n	8003b1e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b08:	f043 0208 	orr.w	r2, r3, #8
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003b10:	2300      	movs	r3, #0
 8003b12:	60bb      	str	r3, [r7, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	60bb      	str	r3, [r7, #8]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d04f      	beq.n	8003bc6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b34:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d104      	bne.n	8003b52 <HAL_SPI_IRQHandler+0x17e>
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d034      	beq.n	8003bbc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0203 	bic.w	r2, r2, #3
 8003b60:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d011      	beq.n	8003b8e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b6e:	4a18      	ldr	r2, [pc, #96]	@ (8003bd0 <HAL_SPI_IRQHandler+0x1fc>)
 8003b70:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fd fab7 	bl	80010ea <HAL_DMA_Abort_IT>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b86:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d016      	beq.n	8003bc4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b9a:	4a0d      	ldr	r2, [pc, #52]	@ (8003bd0 <HAL_SPI_IRQHandler+0x1fc>)
 8003b9c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fd faa1 	bl	80010ea <HAL_DMA_Abort_IT>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8003bba:	e003      	b.n	8003bc4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f809 	bl	8003bd4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003bc2:	e000      	b.n	8003bc6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003bc4:	bf00      	nop
    return;
 8003bc6:	bf00      	nop
  }
}
 8003bc8:	3720      	adds	r7, #32
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	08003be9 	.word	0x08003be9

08003bd4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f7ff ffe6 	bl	8003bd4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c08:	bf00      	nop
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c20:	f7fd f922 	bl	8000e68 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c30:	f7fd f91a 	bl	8000e68 <HAL_GetTick>
 8003c34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c36:	4b39      	ldr	r3, [pc, #228]	@ (8003d1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	015b      	lsls	r3, r3, #5
 8003c3c:	0d1b      	lsrs	r3, r3, #20
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	fb02 f303 	mul.w	r3, r2, r3
 8003c44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c46:	e055      	b.n	8003cf4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4e:	d051      	beq.n	8003cf4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c50:	f7fd f90a 	bl	8000e68 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	69fa      	ldr	r2, [r7, #28]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d902      	bls.n	8003c66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d13d      	bne.n	8003ce2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c7e:	d111      	bne.n	8003ca4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c88:	d004      	beq.n	8003c94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c92:	d107      	bne.n	8003ca4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ca2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cac:	d10f      	bne.n	8003cce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ccc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e018      	b.n	8003d14 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d102      	bne.n	8003cee <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61fb      	str	r3, [r7, #28]
 8003cec:	e002      	b.n	8003cf4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	bf0c      	ite	eq
 8003d04:	2301      	moveq	r3, #1
 8003d06:	2300      	movne	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	79fb      	ldrb	r3, [r7, #7]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d19a      	bne.n	8003c48 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3720      	adds	r7, #32
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20000000 	.word	0x20000000

08003d20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af02      	add	r7, sp, #8
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2201      	movs	r2, #1
 8003d34:	2102      	movs	r1, #2
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f7ff ff6a 	bl	8003c10 <SPI_WaitFlagStateUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d007      	beq.n	8003d52 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d46:	f043 0220 	orr.w	r2, r3, #32
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e032      	b.n	8003db8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d52:	4b1b      	ldr	r3, [pc, #108]	@ (8003dc0 <SPI_EndRxTxTransaction+0xa0>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a1b      	ldr	r2, [pc, #108]	@ (8003dc4 <SPI_EndRxTxTransaction+0xa4>)
 8003d58:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5c:	0d5b      	lsrs	r3, r3, #21
 8003d5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d62:	fb02 f303 	mul.w	r3, r2, r3
 8003d66:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d70:	d112      	bne.n	8003d98 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2180      	movs	r1, #128	@ 0x80
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f7ff ff47 	bl	8003c10 <SPI_WaitFlagStateUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d016      	beq.n	8003db6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d8c:	f043 0220 	orr.w	r2, r3, #32
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e00f      	b.n	8003db8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dae:	2b80      	cmp	r3, #128	@ 0x80
 8003db0:	d0f2      	beq.n	8003d98 <SPI_EndRxTxTransaction+0x78>
 8003db2:	e000      	b.n	8003db6 <SPI_EndRxTxTransaction+0x96>
        break;
 8003db4:	bf00      	nop
  }

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	20000000 	.word	0x20000000
 8003dc4:	165e9f81 	.word	0x165e9f81

08003dc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e042      	b.n	8003e60 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d106      	bne.n	8003df4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7fc fed6 	bl	8000ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2224      	movs	r2, #36	@ 0x24
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f973 	bl	80040f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	691a      	ldr	r2, [r3, #16]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695a      	ldr	r2, [r3, #20]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08a      	sub	sp, #40	@ 0x28
 8003e6c:	af02      	add	r7, sp, #8
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	603b      	str	r3, [r7, #0]
 8003e74:	4613      	mov	r3, r2
 8003e76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b20      	cmp	r3, #32
 8003e86:	d175      	bne.n	8003f74 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d002      	beq.n	8003e94 <HAL_UART_Transmit+0x2c>
 8003e8e:	88fb      	ldrh	r3, [r7, #6]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e06e      	b.n	8003f76 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2221      	movs	r2, #33	@ 0x21
 8003ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ea6:	f7fc ffdf 	bl	8000e68 <HAL_GetTick>
 8003eaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	88fa      	ldrh	r2, [r7, #6]
 8003eb0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	88fa      	ldrh	r2, [r7, #6]
 8003eb6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ec0:	d108      	bne.n	8003ed4 <HAL_UART_Transmit+0x6c>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d104      	bne.n	8003ed4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	e003      	b.n	8003edc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003edc:	e02e      	b.n	8003f3c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2180      	movs	r1, #128	@ 0x80
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f848 	bl	8003f7e <UART_WaitOnFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e03a      	b.n	8003f76 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10b      	bne.n	8003f1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	3302      	adds	r3, #2
 8003f1a:	61bb      	str	r3, [r7, #24]
 8003f1c:	e007      	b.n	8003f2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	781a      	ldrb	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1cb      	bne.n	8003ede <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	2140      	movs	r1, #64	@ 0x40
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f814 	bl	8003f7e <UART_WaitOnFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d005      	beq.n	8003f68 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e006      	b.n	8003f76 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	e000      	b.n	8003f76 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003f74:	2302      	movs	r3, #2
  }
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3720      	adds	r7, #32
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b086      	sub	sp, #24
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	603b      	str	r3, [r7, #0]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f8e:	e03b      	b.n	8004008 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f96:	d037      	beq.n	8004008 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f98:	f7fc ff66 	bl	8000e68 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	6a3a      	ldr	r2, [r7, #32]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d302      	bcc.n	8003fae <UART_WaitOnFlagUntilTimeout+0x30>
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e03a      	b.n	8004028 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d023      	beq.n	8004008 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2b80      	cmp	r3, #128	@ 0x80
 8003fc4:	d020      	beq.n	8004008 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b40      	cmp	r3, #64	@ 0x40
 8003fca:	d01d      	beq.n	8004008 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	d116      	bne.n	8004008 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 f81d 	bl	8004030 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2208      	movs	r2, #8
 8003ffa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e00f      	b.n	8004028 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4013      	ands	r3, r2
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	429a      	cmp	r2, r3
 8004016:	bf0c      	ite	eq
 8004018:	2301      	moveq	r3, #1
 800401a:	2300      	movne	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	461a      	mov	r2, r3
 8004020:	79fb      	ldrb	r3, [r7, #7]
 8004022:	429a      	cmp	r2, r3
 8004024:	d0b4      	beq.n	8003f90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004030:	b480      	push	{r7}
 8004032:	b095      	sub	sp, #84	@ 0x54
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	330c      	adds	r3, #12
 800403e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004042:	e853 3f00 	ldrex	r3, [r3]
 8004046:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800404e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	330c      	adds	r3, #12
 8004056:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004058:	643a      	str	r2, [r7, #64]	@ 0x40
 800405a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800405e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004060:	e841 2300 	strex	r3, r2, [r1]
 8004064:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1e5      	bne.n	8004038 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3314      	adds	r3, #20
 8004072:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	e853 3f00 	ldrex	r3, [r3]
 800407a:	61fb      	str	r3, [r7, #28]
   return(result);
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f023 0301 	bic.w	r3, r3, #1
 8004082:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3314      	adds	r3, #20
 800408a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800408c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800408e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004092:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004094:	e841 2300 	strex	r3, r2, [r1]
 8004098:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800409a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e5      	bne.n	800406c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d119      	bne.n	80040dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	330c      	adds	r3, #12
 80040ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	e853 3f00 	ldrex	r3, [r3]
 80040b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f023 0310 	bic.w	r3, r3, #16
 80040be:	647b      	str	r3, [r7, #68]	@ 0x44
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	330c      	adds	r3, #12
 80040c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040c8:	61ba      	str	r2, [r7, #24]
 80040ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	6979      	ldr	r1, [r7, #20]
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	e841 2300 	strex	r3, r2, [r1]
 80040d4:	613b      	str	r3, [r7, #16]
   return(result);
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e5      	bne.n	80040a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80040ea:	bf00      	nop
 80040ec:	3754      	adds	r7, #84	@ 0x54
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
	...

080040f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040fc:	b0c0      	sub	sp, #256	@ 0x100
 80040fe:	af00      	add	r7, sp, #0
 8004100:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004114:	68d9      	ldr	r1, [r3, #12]
 8004116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	ea40 0301 	orr.w	r3, r0, r1
 8004120:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	431a      	orrs	r2, r3
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	431a      	orrs	r2, r3
 8004138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004150:	f021 010c 	bic.w	r1, r1, #12
 8004154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800415e:	430b      	orrs	r3, r1
 8004160:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800416e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004172:	6999      	ldr	r1, [r3, #24]
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	ea40 0301 	orr.w	r3, r0, r1
 800417e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	4b8f      	ldr	r3, [pc, #572]	@ (80043c4 <UART_SetConfig+0x2cc>)
 8004188:	429a      	cmp	r2, r3
 800418a:	d005      	beq.n	8004198 <UART_SetConfig+0xa0>
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	4b8d      	ldr	r3, [pc, #564]	@ (80043c8 <UART_SetConfig+0x2d0>)
 8004194:	429a      	cmp	r2, r3
 8004196:	d104      	bne.n	80041a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004198:	f7ff f892 	bl	80032c0 <HAL_RCC_GetPCLK2Freq>
 800419c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80041a0:	e003      	b.n	80041aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041a2:	f7ff f879 	bl	8003298 <HAL_RCC_GetPCLK1Freq>
 80041a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041b4:	f040 810c 	bne.w	80043d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041bc:	2200      	movs	r2, #0
 80041be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80041c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80041c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80041ca:	4622      	mov	r2, r4
 80041cc:	462b      	mov	r3, r5
 80041ce:	1891      	adds	r1, r2, r2
 80041d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80041d2:	415b      	adcs	r3, r3
 80041d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80041da:	4621      	mov	r1, r4
 80041dc:	eb12 0801 	adds.w	r8, r2, r1
 80041e0:	4629      	mov	r1, r5
 80041e2:	eb43 0901 	adc.w	r9, r3, r1
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041fa:	4690      	mov	r8, r2
 80041fc:	4699      	mov	r9, r3
 80041fe:	4623      	mov	r3, r4
 8004200:	eb18 0303 	adds.w	r3, r8, r3
 8004204:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004208:	462b      	mov	r3, r5
 800420a:	eb49 0303 	adc.w	r3, r9, r3
 800420e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800421e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004222:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004226:	460b      	mov	r3, r1
 8004228:	18db      	adds	r3, r3, r3
 800422a:	653b      	str	r3, [r7, #80]	@ 0x50
 800422c:	4613      	mov	r3, r2
 800422e:	eb42 0303 	adc.w	r3, r2, r3
 8004232:	657b      	str	r3, [r7, #84]	@ 0x54
 8004234:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004238:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800423c:	f7fc f830 	bl	80002a0 <__aeabi_uldivmod>
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4b61      	ldr	r3, [pc, #388]	@ (80043cc <UART_SetConfig+0x2d4>)
 8004246:	fba3 2302 	umull	r2, r3, r3, r2
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	011c      	lsls	r4, r3, #4
 800424e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004252:	2200      	movs	r2, #0
 8004254:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004258:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800425c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004260:	4642      	mov	r2, r8
 8004262:	464b      	mov	r3, r9
 8004264:	1891      	adds	r1, r2, r2
 8004266:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004268:	415b      	adcs	r3, r3
 800426a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800426c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004270:	4641      	mov	r1, r8
 8004272:	eb12 0a01 	adds.w	sl, r2, r1
 8004276:	4649      	mov	r1, r9
 8004278:	eb43 0b01 	adc.w	fp, r3, r1
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004288:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800428c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004290:	4692      	mov	sl, r2
 8004292:	469b      	mov	fp, r3
 8004294:	4643      	mov	r3, r8
 8004296:	eb1a 0303 	adds.w	r3, sl, r3
 800429a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800429e:	464b      	mov	r3, r9
 80042a0:	eb4b 0303 	adc.w	r3, fp, r3
 80042a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80042a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80042b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80042bc:	460b      	mov	r3, r1
 80042be:	18db      	adds	r3, r3, r3
 80042c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80042c2:	4613      	mov	r3, r2
 80042c4:	eb42 0303 	adc.w	r3, r2, r3
 80042c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80042ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80042ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80042d2:	f7fb ffe5 	bl	80002a0 <__aeabi_uldivmod>
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	4611      	mov	r1, r2
 80042dc:	4b3b      	ldr	r3, [pc, #236]	@ (80043cc <UART_SetConfig+0x2d4>)
 80042de:	fba3 2301 	umull	r2, r3, r3, r1
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	2264      	movs	r2, #100	@ 0x64
 80042e6:	fb02 f303 	mul.w	r3, r2, r3
 80042ea:	1acb      	subs	r3, r1, r3
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80042f2:	4b36      	ldr	r3, [pc, #216]	@ (80043cc <UART_SetConfig+0x2d4>)
 80042f4:	fba3 2302 	umull	r2, r3, r3, r2
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004300:	441c      	add	r4, r3
 8004302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004306:	2200      	movs	r2, #0
 8004308:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800430c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004310:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004314:	4642      	mov	r2, r8
 8004316:	464b      	mov	r3, r9
 8004318:	1891      	adds	r1, r2, r2
 800431a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800431c:	415b      	adcs	r3, r3
 800431e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004320:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004324:	4641      	mov	r1, r8
 8004326:	1851      	adds	r1, r2, r1
 8004328:	6339      	str	r1, [r7, #48]	@ 0x30
 800432a:	4649      	mov	r1, r9
 800432c:	414b      	adcs	r3, r1
 800432e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800433c:	4659      	mov	r1, fp
 800433e:	00cb      	lsls	r3, r1, #3
 8004340:	4651      	mov	r1, sl
 8004342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004346:	4651      	mov	r1, sl
 8004348:	00ca      	lsls	r2, r1, #3
 800434a:	4610      	mov	r0, r2
 800434c:	4619      	mov	r1, r3
 800434e:	4603      	mov	r3, r0
 8004350:	4642      	mov	r2, r8
 8004352:	189b      	adds	r3, r3, r2
 8004354:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004358:	464b      	mov	r3, r9
 800435a:	460a      	mov	r2, r1
 800435c:	eb42 0303 	adc.w	r3, r2, r3
 8004360:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004370:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004374:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004378:	460b      	mov	r3, r1
 800437a:	18db      	adds	r3, r3, r3
 800437c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800437e:	4613      	mov	r3, r2
 8004380:	eb42 0303 	adc.w	r3, r2, r3
 8004384:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004386:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800438a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800438e:	f7fb ff87 	bl	80002a0 <__aeabi_uldivmod>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	4b0d      	ldr	r3, [pc, #52]	@ (80043cc <UART_SetConfig+0x2d4>)
 8004398:	fba3 1302 	umull	r1, r3, r3, r2
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	2164      	movs	r1, #100	@ 0x64
 80043a0:	fb01 f303 	mul.w	r3, r1, r3
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	3332      	adds	r3, #50	@ 0x32
 80043aa:	4a08      	ldr	r2, [pc, #32]	@ (80043cc <UART_SetConfig+0x2d4>)
 80043ac:	fba2 2303 	umull	r2, r3, r2, r3
 80043b0:	095b      	lsrs	r3, r3, #5
 80043b2:	f003 0207 	and.w	r2, r3, #7
 80043b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4422      	add	r2, r4
 80043be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043c0:	e106      	b.n	80045d0 <UART_SetConfig+0x4d8>
 80043c2:	bf00      	nop
 80043c4:	40011000 	.word	0x40011000
 80043c8:	40011400 	.word	0x40011400
 80043cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043d4:	2200      	movs	r2, #0
 80043d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80043da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80043de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80043e2:	4642      	mov	r2, r8
 80043e4:	464b      	mov	r3, r9
 80043e6:	1891      	adds	r1, r2, r2
 80043e8:	6239      	str	r1, [r7, #32]
 80043ea:	415b      	adcs	r3, r3
 80043ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043f2:	4641      	mov	r1, r8
 80043f4:	1854      	adds	r4, r2, r1
 80043f6:	4649      	mov	r1, r9
 80043f8:	eb43 0501 	adc.w	r5, r3, r1
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	00eb      	lsls	r3, r5, #3
 8004406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800440a:	00e2      	lsls	r2, r4, #3
 800440c:	4614      	mov	r4, r2
 800440e:	461d      	mov	r5, r3
 8004410:	4643      	mov	r3, r8
 8004412:	18e3      	adds	r3, r4, r3
 8004414:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004418:	464b      	mov	r3, r9
 800441a:	eb45 0303 	adc.w	r3, r5, r3
 800441e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800442e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800443e:	4629      	mov	r1, r5
 8004440:	008b      	lsls	r3, r1, #2
 8004442:	4621      	mov	r1, r4
 8004444:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004448:	4621      	mov	r1, r4
 800444a:	008a      	lsls	r2, r1, #2
 800444c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004450:	f7fb ff26 	bl	80002a0 <__aeabi_uldivmod>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4b60      	ldr	r3, [pc, #384]	@ (80045dc <UART_SetConfig+0x4e4>)
 800445a:	fba3 2302 	umull	r2, r3, r3, r2
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	011c      	lsls	r4, r3, #4
 8004462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004466:	2200      	movs	r2, #0
 8004468:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800446c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004470:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004474:	4642      	mov	r2, r8
 8004476:	464b      	mov	r3, r9
 8004478:	1891      	adds	r1, r2, r2
 800447a:	61b9      	str	r1, [r7, #24]
 800447c:	415b      	adcs	r3, r3
 800447e:	61fb      	str	r3, [r7, #28]
 8004480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004484:	4641      	mov	r1, r8
 8004486:	1851      	adds	r1, r2, r1
 8004488:	6139      	str	r1, [r7, #16]
 800448a:	4649      	mov	r1, r9
 800448c:	414b      	adcs	r3, r1
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800449c:	4659      	mov	r1, fp
 800449e:	00cb      	lsls	r3, r1, #3
 80044a0:	4651      	mov	r1, sl
 80044a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044a6:	4651      	mov	r1, sl
 80044a8:	00ca      	lsls	r2, r1, #3
 80044aa:	4610      	mov	r0, r2
 80044ac:	4619      	mov	r1, r3
 80044ae:	4603      	mov	r3, r0
 80044b0:	4642      	mov	r2, r8
 80044b2:	189b      	adds	r3, r3, r2
 80044b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80044b8:	464b      	mov	r3, r9
 80044ba:	460a      	mov	r2, r1
 80044bc:	eb42 0303 	adc.w	r3, r2, r3
 80044c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80044dc:	4649      	mov	r1, r9
 80044de:	008b      	lsls	r3, r1, #2
 80044e0:	4641      	mov	r1, r8
 80044e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044e6:	4641      	mov	r1, r8
 80044e8:	008a      	lsls	r2, r1, #2
 80044ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80044ee:	f7fb fed7 	bl	80002a0 <__aeabi_uldivmod>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	4611      	mov	r1, r2
 80044f8:	4b38      	ldr	r3, [pc, #224]	@ (80045dc <UART_SetConfig+0x4e4>)
 80044fa:	fba3 2301 	umull	r2, r3, r3, r1
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	2264      	movs	r2, #100	@ 0x64
 8004502:	fb02 f303 	mul.w	r3, r2, r3
 8004506:	1acb      	subs	r3, r1, r3
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	3332      	adds	r3, #50	@ 0x32
 800450c:	4a33      	ldr	r2, [pc, #204]	@ (80045dc <UART_SetConfig+0x4e4>)
 800450e:	fba2 2303 	umull	r2, r3, r2, r3
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004518:	441c      	add	r4, r3
 800451a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800451e:	2200      	movs	r2, #0
 8004520:	673b      	str	r3, [r7, #112]	@ 0x70
 8004522:	677a      	str	r2, [r7, #116]	@ 0x74
 8004524:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004528:	4642      	mov	r2, r8
 800452a:	464b      	mov	r3, r9
 800452c:	1891      	adds	r1, r2, r2
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	415b      	adcs	r3, r3
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004538:	4641      	mov	r1, r8
 800453a:	1851      	adds	r1, r2, r1
 800453c:	6039      	str	r1, [r7, #0]
 800453e:	4649      	mov	r1, r9
 8004540:	414b      	adcs	r3, r1
 8004542:	607b      	str	r3, [r7, #4]
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004550:	4659      	mov	r1, fp
 8004552:	00cb      	lsls	r3, r1, #3
 8004554:	4651      	mov	r1, sl
 8004556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800455a:	4651      	mov	r1, sl
 800455c:	00ca      	lsls	r2, r1, #3
 800455e:	4610      	mov	r0, r2
 8004560:	4619      	mov	r1, r3
 8004562:	4603      	mov	r3, r0
 8004564:	4642      	mov	r2, r8
 8004566:	189b      	adds	r3, r3, r2
 8004568:	66bb      	str	r3, [r7, #104]	@ 0x68
 800456a:	464b      	mov	r3, r9
 800456c:	460a      	mov	r2, r1
 800456e:	eb42 0303 	adc.w	r3, r2, r3
 8004572:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	663b      	str	r3, [r7, #96]	@ 0x60
 800457e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	f04f 0300 	mov.w	r3, #0
 8004588:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800458c:	4649      	mov	r1, r9
 800458e:	008b      	lsls	r3, r1, #2
 8004590:	4641      	mov	r1, r8
 8004592:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004596:	4641      	mov	r1, r8
 8004598:	008a      	lsls	r2, r1, #2
 800459a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800459e:	f7fb fe7f 	bl	80002a0 <__aeabi_uldivmod>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4b0d      	ldr	r3, [pc, #52]	@ (80045dc <UART_SetConfig+0x4e4>)
 80045a8:	fba3 1302 	umull	r1, r3, r3, r2
 80045ac:	095b      	lsrs	r3, r3, #5
 80045ae:	2164      	movs	r1, #100	@ 0x64
 80045b0:	fb01 f303 	mul.w	r3, r1, r3
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	3332      	adds	r3, #50	@ 0x32
 80045ba:	4a08      	ldr	r2, [pc, #32]	@ (80045dc <UART_SetConfig+0x4e4>)
 80045bc:	fba2 2303 	umull	r2, r3, r2, r3
 80045c0:	095b      	lsrs	r3, r3, #5
 80045c2:	f003 020f 	and.w	r2, r3, #15
 80045c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4422      	add	r2, r4
 80045ce:	609a      	str	r2, [r3, #8]
}
 80045d0:	bf00      	nop
 80045d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80045d6:	46bd      	mov	sp, r7
 80045d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045dc:	51eb851f 	.word	0x51eb851f

080045e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045e0:	b084      	sub	sp, #16
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	f107 001c 	add.w	r0, r7, #28
 80045ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045f2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d123      	bne.n	8004642 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800460e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004622:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004626:	2b01      	cmp	r3, #1
 8004628:	d105      	bne.n	8004636 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f001 fae8 	bl	8005c0c <USB_CoreReset>
 800463c:	4603      	mov	r3, r0
 800463e:	73fb      	strb	r3, [r7, #15]
 8004640:	e01b      	b.n	800467a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f001 fadc 	bl	8005c0c <USB_CoreReset>
 8004654:	4603      	mov	r3, r0
 8004656:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004658:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800465c:	2b00      	cmp	r3, #0
 800465e:	d106      	bne.n	800466e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004664:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	639a      	str	r2, [r3, #56]	@ 0x38
 800466c:	e005      	b.n	800467a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004672:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800467a:	7fbb      	ldrb	r3, [r7, #30]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d10b      	bne.n	8004698 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f043 0206 	orr.w	r2, r3, #6
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f043 0220 	orr.w	r2, r3, #32
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004698:	7bfb      	ldrb	r3, [r7, #15]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046a4:	b004      	add	sp, #16
 80046a6:	4770      	bx	lr

080046a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	4613      	mov	r3, r2
 80046b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80046b6:	79fb      	ldrb	r3, [r7, #7]
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d165      	bne.n	8004788 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	4a41      	ldr	r2, [pc, #260]	@ (80047c4 <USB_SetTurnaroundTime+0x11c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d906      	bls.n	80046d2 <USB_SetTurnaroundTime+0x2a>
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	4a40      	ldr	r2, [pc, #256]	@ (80047c8 <USB_SetTurnaroundTime+0x120>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d202      	bcs.n	80046d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80046cc:	230f      	movs	r3, #15
 80046ce:	617b      	str	r3, [r7, #20]
 80046d0:	e062      	b.n	8004798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	4a3c      	ldr	r2, [pc, #240]	@ (80047c8 <USB_SetTurnaroundTime+0x120>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d306      	bcc.n	80046e8 <USB_SetTurnaroundTime+0x40>
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	4a3b      	ldr	r2, [pc, #236]	@ (80047cc <USB_SetTurnaroundTime+0x124>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d202      	bcs.n	80046e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80046e2:	230e      	movs	r3, #14
 80046e4:	617b      	str	r3, [r7, #20]
 80046e6:	e057      	b.n	8004798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	4a38      	ldr	r2, [pc, #224]	@ (80047cc <USB_SetTurnaroundTime+0x124>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d306      	bcc.n	80046fe <USB_SetTurnaroundTime+0x56>
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	4a37      	ldr	r2, [pc, #220]	@ (80047d0 <USB_SetTurnaroundTime+0x128>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d202      	bcs.n	80046fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80046f8:	230d      	movs	r3, #13
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	e04c      	b.n	8004798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	4a33      	ldr	r2, [pc, #204]	@ (80047d0 <USB_SetTurnaroundTime+0x128>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d306      	bcc.n	8004714 <USB_SetTurnaroundTime+0x6c>
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	4a32      	ldr	r2, [pc, #200]	@ (80047d4 <USB_SetTurnaroundTime+0x12c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d802      	bhi.n	8004714 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800470e:	230c      	movs	r3, #12
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	e041      	b.n	8004798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	4a2f      	ldr	r2, [pc, #188]	@ (80047d4 <USB_SetTurnaroundTime+0x12c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d906      	bls.n	800472a <USB_SetTurnaroundTime+0x82>
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	4a2e      	ldr	r2, [pc, #184]	@ (80047d8 <USB_SetTurnaroundTime+0x130>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d802      	bhi.n	800472a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004724:	230b      	movs	r3, #11
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	e036      	b.n	8004798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	4a2a      	ldr	r2, [pc, #168]	@ (80047d8 <USB_SetTurnaroundTime+0x130>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d906      	bls.n	8004740 <USB_SetTurnaroundTime+0x98>
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	4a29      	ldr	r2, [pc, #164]	@ (80047dc <USB_SetTurnaroundTime+0x134>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d802      	bhi.n	8004740 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800473a:	230a      	movs	r3, #10
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	e02b      	b.n	8004798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4a26      	ldr	r2, [pc, #152]	@ (80047dc <USB_SetTurnaroundTime+0x134>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d906      	bls.n	8004756 <USB_SetTurnaroundTime+0xae>
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	4a25      	ldr	r2, [pc, #148]	@ (80047e0 <USB_SetTurnaroundTime+0x138>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d202      	bcs.n	8004756 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004750:	2309      	movs	r3, #9
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	e020      	b.n	8004798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	4a21      	ldr	r2, [pc, #132]	@ (80047e0 <USB_SetTurnaroundTime+0x138>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d306      	bcc.n	800476c <USB_SetTurnaroundTime+0xc4>
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	4a20      	ldr	r2, [pc, #128]	@ (80047e4 <USB_SetTurnaroundTime+0x13c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d802      	bhi.n	800476c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004766:	2308      	movs	r3, #8
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	e015      	b.n	8004798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4a1d      	ldr	r2, [pc, #116]	@ (80047e4 <USB_SetTurnaroundTime+0x13c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d906      	bls.n	8004782 <USB_SetTurnaroundTime+0xda>
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	4a1c      	ldr	r2, [pc, #112]	@ (80047e8 <USB_SetTurnaroundTime+0x140>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d202      	bcs.n	8004782 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800477c:	2307      	movs	r3, #7
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	e00a      	b.n	8004798 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004782:	2306      	movs	r3, #6
 8004784:	617b      	str	r3, [r7, #20]
 8004786:	e007      	b.n	8004798 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004788:	79fb      	ldrb	r3, [r7, #7]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d102      	bne.n	8004794 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800478e:	2309      	movs	r3, #9
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	e001      	b.n	8004798 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004794:	2309      	movs	r3, #9
 8004796:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	029b      	lsls	r3, r3, #10
 80047ac:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80047b0:	431a      	orrs	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	371c      	adds	r7, #28
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	00d8acbf 	.word	0x00d8acbf
 80047c8:	00e4e1c0 	.word	0x00e4e1c0
 80047cc:	00f42400 	.word	0x00f42400
 80047d0:	01067380 	.word	0x01067380
 80047d4:	011a499f 	.word	0x011a499f
 80047d8:	01312cff 	.word	0x01312cff
 80047dc:	014ca43f 	.word	0x014ca43f
 80047e0:	016e3600 	.word	0x016e3600
 80047e4:	01a6ab1f 	.word	0x01a6ab1f
 80047e8:	01e84800 	.word	0x01e84800

080047ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f043 0201 	orr.w	r2, r3, #1
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f023 0201 	bic.w	r2, r3, #1
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800484c:	78fb      	ldrb	r3, [r7, #3]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d115      	bne.n	800487e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800485e:	200a      	movs	r0, #10
 8004860:	f7fc fb0e 	bl	8000e80 <HAL_Delay>
      ms += 10U;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	330a      	adds	r3, #10
 8004868:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f001 f93f 	bl	8005aee <USB_GetMode>
 8004870:	4603      	mov	r3, r0
 8004872:	2b01      	cmp	r3, #1
 8004874:	d01e      	beq.n	80048b4 <USB_SetCurrentMode+0x84>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2bc7      	cmp	r3, #199	@ 0xc7
 800487a:	d9f0      	bls.n	800485e <USB_SetCurrentMode+0x2e>
 800487c:	e01a      	b.n	80048b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800487e:	78fb      	ldrb	r3, [r7, #3]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d115      	bne.n	80048b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004890:	200a      	movs	r0, #10
 8004892:	f7fc faf5 	bl	8000e80 <HAL_Delay>
      ms += 10U;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	330a      	adds	r3, #10
 800489a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f001 f926 	bl	8005aee <USB_GetMode>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <USB_SetCurrentMode+0x84>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2bc7      	cmp	r3, #199	@ 0xc7
 80048ac:	d9f0      	bls.n	8004890 <USB_SetCurrentMode+0x60>
 80048ae:	e001      	b.n	80048b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e005      	b.n	80048c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2bc8      	cmp	r3, #200	@ 0xc8
 80048b8:	d101      	bne.n	80048be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048c8:	b084      	sub	sp, #16
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b086      	sub	sp, #24
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80048d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80048e2:	2300      	movs	r3, #0
 80048e4:	613b      	str	r3, [r7, #16]
 80048e6:	e009      	b.n	80048fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	3340      	adds	r3, #64	@ 0x40
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	2200      	movs	r2, #0
 80048f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	3301      	adds	r3, #1
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	2b0e      	cmp	r3, #14
 8004900:	d9f2      	bls.n	80048e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004902:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004906:	2b00      	cmp	r3, #0
 8004908:	d11c      	bne.n	8004944 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004918:	f043 0302 	orr.w	r3, r3, #2
 800491c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004922:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	639a      	str	r2, [r3, #56]	@ 0x38
 8004942:	e00b      	b.n	800495c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004948:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004954:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004962:	461a      	mov	r2, r3
 8004964:	2300      	movs	r3, #0
 8004966:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004968:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800496c:	2b01      	cmp	r3, #1
 800496e:	d10d      	bne.n	800498c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004970:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004974:	2b00      	cmp	r3, #0
 8004976:	d104      	bne.n	8004982 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004978:	2100      	movs	r1, #0
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f968 	bl	8004c50 <USB_SetDevSpeed>
 8004980:	e008      	b.n	8004994 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004982:	2101      	movs	r1, #1
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f963 	bl	8004c50 <USB_SetDevSpeed>
 800498a:	e003      	b.n	8004994 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800498c:	2103      	movs	r1, #3
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f95e 	bl	8004c50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004994:	2110      	movs	r1, #16
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f8fa 	bl	8004b90 <USB_FlushTxFifo>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f924 	bl	8004bf4 <USB_FlushRxFifo>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049bc:	461a      	mov	r2, r3
 80049be:	2300      	movs	r3, #0
 80049c0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049c8:	461a      	mov	r2, r3
 80049ca:	2300      	movs	r3, #0
 80049cc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049d4:	461a      	mov	r2, r3
 80049d6:	2300      	movs	r3, #0
 80049d8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049da:	2300      	movs	r3, #0
 80049dc:	613b      	str	r3, [r7, #16]
 80049de:	e043      	b.n	8004a68 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049f6:	d118      	bne.n	8004a2a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10a      	bne.n	8004a14 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	e013      	b.n	8004a3c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a20:	461a      	mov	r2, r3
 8004a22:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004a26:	6013      	str	r3, [r2, #0]
 8004a28:	e008      	b.n	8004a3c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a36:	461a      	mov	r2, r3
 8004a38:	2300      	movs	r3, #0
 8004a3a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a48:	461a      	mov	r2, r3
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004a60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	3301      	adds	r3, #1
 8004a66:	613b      	str	r3, [r7, #16]
 8004a68:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d3b5      	bcc.n	80049e0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a74:	2300      	movs	r3, #0
 8004a76:	613b      	str	r3, [r7, #16]
 8004a78:	e043      	b.n	8004b02 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a90:	d118      	bne.n	8004ac4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10a      	bne.n	8004aae <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004aaa:	6013      	str	r3, [r2, #0]
 8004aac:	e013      	b.n	8004ad6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aba:	461a      	mov	r2, r3
 8004abc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	e008      	b.n	8004ad6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004af4:	461a      	mov	r2, r3
 8004af6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004afa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	3301      	adds	r3, #1
 8004b00:	613b      	str	r3, [r7, #16]
 8004b02:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004b06:	461a      	mov	r2, r3
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d3b5      	bcc.n	8004a7a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b20:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004b2e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d105      	bne.n	8004b44 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	f043 0210 	orr.w	r2, r3, #16
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	699a      	ldr	r2, [r3, #24]
 8004b48:	4b10      	ldr	r3, [pc, #64]	@ (8004b8c <USB_DevInit+0x2c4>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b50:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d005      	beq.n	8004b64 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	f043 0208 	orr.w	r2, r3, #8
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b64:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d107      	bne.n	8004b7c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b74:	f043 0304 	orr.w	r3, r3, #4
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b88:	b004      	add	sp, #16
 8004b8a:	4770      	bx	lr
 8004b8c:	803c3800 	.word	0x803c3800

08004b90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004baa:	d901      	bls.n	8004bb0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e01b      	b.n	8004be8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	daf2      	bge.n	8004b9e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	019b      	lsls	r3, r3, #6
 8004bc0:	f043 0220 	orr.w	r2, r3, #32
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004bd4:	d901      	bls.n	8004bda <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e006      	b.n	8004be8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f003 0320 	and.w	r3, r3, #32
 8004be2:	2b20      	cmp	r3, #32
 8004be4:	d0f0      	beq.n	8004bc8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	3301      	adds	r3, #1
 8004c04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c0c:	d901      	bls.n	8004c12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e018      	b.n	8004c44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	daf2      	bge.n	8004c00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2210      	movs	r2, #16
 8004c22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	3301      	adds	r3, #1
 8004c28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c30:	d901      	bls.n	8004c36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e006      	b.n	8004c44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	f003 0310 	and.w	r3, r3, #16
 8004c3e:	2b10      	cmp	r3, #16
 8004c40:	d0f0      	beq.n	8004c24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	78fb      	ldrb	r3, [r7, #3]
 8004c6a:	68f9      	ldr	r1, [r7, #12]
 8004c6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c70:	4313      	orrs	r3, r2
 8004c72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b087      	sub	sp, #28
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 0306 	and.w	r3, r3, #6
 8004c9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d102      	bne.n	8004ca8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	75fb      	strb	r3, [r7, #23]
 8004ca6:	e00a      	b.n	8004cbe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d002      	beq.n	8004cb4 <USB_GetDevSpeed+0x32>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2b06      	cmp	r3, #6
 8004cb2:	d102      	bne.n	8004cba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	75fb      	strb	r3, [r7, #23]
 8004cb8:	e001      	b.n	8004cbe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004cba:	230f      	movs	r3, #15
 8004cbc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	371c      	adds	r7, #28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	785b      	ldrb	r3, [r3, #1]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d13a      	bne.n	8004d5e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cee:	69da      	ldr	r2, [r3, #28]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	f003 030f 	and.w	r3, r3, #15
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	68f9      	ldr	r1, [r7, #12]
 8004d02:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d06:	4313      	orrs	r3, r2
 8004d08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d155      	bne.n	8004dcc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	791b      	ldrb	r3, [r3, #4]
 8004d3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	059b      	lsls	r3, r3, #22
 8004d42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d44:	4313      	orrs	r3, r2
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	0151      	lsls	r1, r2, #5
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	440a      	add	r2, r1
 8004d4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	e036      	b.n	8004dcc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d64:	69da      	ldr	r2, [r3, #28]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	2101      	movs	r1, #1
 8004d70:	fa01 f303 	lsl.w	r3, r1, r3
 8004d74:	041b      	lsls	r3, r3, #16
 8004d76:	68f9      	ldr	r1, [r7, #12]
 8004d78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d11a      	bne.n	8004dcc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	791b      	ldrb	r3, [r3, #4]
 8004db0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004db2:	430b      	orrs	r3, r1
 8004db4:	4313      	orrs	r3, r2
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	0151      	lsls	r1, r2, #5
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	440a      	add	r2, r1
 8004dbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
	...

08004ddc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	785b      	ldrb	r3, [r3, #1]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d161      	bne.n	8004ebc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e0e:	d11f      	bne.n	8004e50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	0151      	lsls	r1, r2, #5
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	440a      	add	r2, r1
 8004e26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e2a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004e2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	0151      	lsls	r1, r2, #5
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	440a      	add	r2, r1
 8004e46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	f003 030f 	and.w	r3, r3, #15
 8004e60:	2101      	movs	r1, #1
 8004e62:	fa01 f303 	lsl.w	r3, r1, r3
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	43db      	mvns	r3, r3
 8004e6a:	68f9      	ldr	r1, [r7, #12]
 8004e6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e70:	4013      	ands	r3, r2
 8004e72:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e7a:	69da      	ldr	r2, [r3, #28]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	f003 030f 	and.w	r3, r3, #15
 8004e84:	2101      	movs	r1, #1
 8004e86:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	43db      	mvns	r3, r3
 8004e8e:	68f9      	ldr	r1, [r7, #12]
 8004e90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e94:	4013      	ands	r3, r2
 8004e96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	0159      	lsls	r1, r3, #5
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	440b      	add	r3, r1
 8004eae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4b35      	ldr	r3, [pc, #212]	@ (8004f8c <USB_DeactivateEndpoint+0x1b0>)
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	600b      	str	r3, [r1, #0]
 8004eba:	e060      	b.n	8004f7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ece:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ed2:	d11f      	bne.n	8004f14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	0151      	lsls	r1, r2, #5
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	440a      	add	r2, r1
 8004eea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004eee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004ef2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	0151      	lsls	r1, r2, #5
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	440a      	add	r2, r1
 8004f0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	f003 030f 	and.w	r3, r3, #15
 8004f24:	2101      	movs	r1, #1
 8004f26:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2a:	041b      	lsls	r3, r3, #16
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	68f9      	ldr	r1, [r7, #12]
 8004f30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f34:	4013      	ands	r3, r2
 8004f36:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f3e:	69da      	ldr	r2, [r3, #28]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	f003 030f 	and.w	r3, r3, #15
 8004f48:	2101      	movs	r1, #1
 8004f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4e:	041b      	lsls	r3, r3, #16
 8004f50:	43db      	mvns	r3, r3
 8004f52:	68f9      	ldr	r1, [r7, #12]
 8004f54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f58:	4013      	ands	r3, r2
 8004f5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	0159      	lsls	r1, r3, #5
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	440b      	add	r3, r1
 8004f72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f76:	4619      	mov	r1, r3
 8004f78:	4b05      	ldr	r3, [pc, #20]	@ (8004f90 <USB_DeactivateEndpoint+0x1b4>)
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	ec337800 	.word	0xec337800
 8004f90:	eff37800 	.word	0xeff37800

08004f94 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08a      	sub	sp, #40	@ 0x28
 8004f98:	af02      	add	r7, sp, #8
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	785b      	ldrb	r3, [r3, #1]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	f040 817f 	bne.w	80052b4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d132      	bne.n	8005024 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	0151      	lsls	r1, r2, #5
 8004fd0:	69fa      	ldr	r2, [r7, #28]
 8004fd2:	440a      	add	r2, r1
 8004fd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fd8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004fdc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004fe0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	0151      	lsls	r1, r2, #5
 8004ff4:	69fa      	ldr	r2, [r7, #28]
 8004ff6:	440a      	add	r2, r1
 8004ff8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ffc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005000:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	4413      	add	r3, r2
 800500a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	0151      	lsls	r1, r2, #5
 8005014:	69fa      	ldr	r2, [r7, #28]
 8005016:	440a      	add	r2, r1
 8005018:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800501c:	0cdb      	lsrs	r3, r3, #19
 800501e:	04db      	lsls	r3, r3, #19
 8005020:	6113      	str	r3, [r2, #16]
 8005022:	e097      	b.n	8005154 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	0151      	lsls	r1, r2, #5
 8005036:	69fa      	ldr	r2, [r7, #28]
 8005038:	440a      	add	r2, r1
 800503a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800503e:	0cdb      	lsrs	r3, r3, #19
 8005040:	04db      	lsls	r3, r3, #19
 8005042:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	0151      	lsls	r1, r2, #5
 8005056:	69fa      	ldr	r2, [r7, #28]
 8005058:	440a      	add	r2, r1
 800505a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800505e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005062:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005066:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d11a      	bne.n	80050a4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	691a      	ldr	r2, [r3, #16]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	429a      	cmp	r2, r3
 8005078:	d903      	bls.n	8005082 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	0151      	lsls	r1, r2, #5
 8005094:	69fa      	ldr	r2, [r7, #28]
 8005096:	440a      	add	r2, r1
 8005098:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800509c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80050a0:	6113      	str	r3, [r2, #16]
 80050a2:	e044      	b.n	800512e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	691a      	ldr	r2, [r3, #16]
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	4413      	add	r3, r2
 80050ae:	1e5a      	subs	r2, r3, #1
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	8afb      	ldrh	r3, [r7, #22]
 80050ca:	04d9      	lsls	r1, r3, #19
 80050cc:	4ba4      	ldr	r3, [pc, #656]	@ (8005360 <USB_EPStartXfer+0x3cc>)
 80050ce:	400b      	ands	r3, r1
 80050d0:	69b9      	ldr	r1, [r7, #24]
 80050d2:	0148      	lsls	r0, r1, #5
 80050d4:	69f9      	ldr	r1, [r7, #28]
 80050d6:	4401      	add	r1, r0
 80050d8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80050dc:	4313      	orrs	r3, r2
 80050de:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	791b      	ldrb	r3, [r3, #4]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d122      	bne.n	800512e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	0151      	lsls	r1, r2, #5
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	440a      	add	r2, r1
 80050fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005102:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005106:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005114:	691a      	ldr	r2, [r3, #16]
 8005116:	8afb      	ldrh	r3, [r7, #22]
 8005118:	075b      	lsls	r3, r3, #29
 800511a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800511e:	69b9      	ldr	r1, [r7, #24]
 8005120:	0148      	lsls	r0, r1, #5
 8005122:	69f9      	ldr	r1, [r7, #28]
 8005124:	4401      	add	r1, r0
 8005126:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800512a:	4313      	orrs	r3, r2
 800512c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005144:	69b9      	ldr	r1, [r7, #24]
 8005146:	0148      	lsls	r0, r1, #5
 8005148:	69f9      	ldr	r1, [r7, #28]
 800514a:	4401      	add	r1, r0
 800514c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005150:	4313      	orrs	r3, r2
 8005152:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005154:	79fb      	ldrb	r3, [r7, #7]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d14b      	bne.n	80051f2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d009      	beq.n	8005176 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800516e:	461a      	mov	r2, r3
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	69db      	ldr	r3, [r3, #28]
 8005174:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	791b      	ldrb	r3, [r3, #4]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d128      	bne.n	80051d0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800518a:	2b00      	cmp	r3, #0
 800518c:	d110      	bne.n	80051b0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	0151      	lsls	r1, r2, #5
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	440a      	add	r2, r1
 80051a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	e00f      	b.n	80051d0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	0151      	lsls	r1, r2, #5
 80051c2:	69fa      	ldr	r2, [r7, #28]
 80051c4:	440a      	add	r2, r1
 80051c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051ce:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	0151      	lsls	r1, r2, #5
 80051e2:	69fa      	ldr	r2, [r7, #28]
 80051e4:	440a      	add	r2, r1
 80051e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051ea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80051ee:	6013      	str	r3, [r2, #0]
 80051f0:	e166      	b.n	80054c0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	0151      	lsls	r1, r2, #5
 8005204:	69fa      	ldr	r2, [r7, #28]
 8005206:	440a      	add	r2, r1
 8005208:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800520c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005210:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	791b      	ldrb	r3, [r3, #4]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d015      	beq.n	8005246 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 814e 	beq.w	80054c0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800522a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	f003 030f 	and.w	r3, r3, #15
 8005234:	2101      	movs	r1, #1
 8005236:	fa01 f303 	lsl.w	r3, r1, r3
 800523a:	69f9      	ldr	r1, [r7, #28]
 800523c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005240:	4313      	orrs	r3, r2
 8005242:	634b      	str	r3, [r1, #52]	@ 0x34
 8005244:	e13c      	b.n	80054c0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005252:	2b00      	cmp	r3, #0
 8005254:	d110      	bne.n	8005278 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	0151      	lsls	r1, r2, #5
 8005268:	69fa      	ldr	r2, [r7, #28]
 800526a:	440a      	add	r2, r1
 800526c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005270:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005274:	6013      	str	r3, [r2, #0]
 8005276:	e00f      	b.n	8005298 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	0151      	lsls	r1, r2, #5
 800528a:	69fa      	ldr	r2, [r7, #28]
 800528c:	440a      	add	r2, r1
 800528e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005292:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005296:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	68d9      	ldr	r1, [r3, #12]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	781a      	ldrb	r2, [r3, #0]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	b298      	uxth	r0, r3
 80052a6:	79fb      	ldrb	r3, [r7, #7]
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	4603      	mov	r3, r0
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 f9b9 	bl	8005624 <USB_WritePacket>
 80052b2:	e105      	b.n	80054c0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	0151      	lsls	r1, r2, #5
 80052c6:	69fa      	ldr	r2, [r7, #28]
 80052c8:	440a      	add	r2, r1
 80052ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052ce:	0cdb      	lsrs	r3, r3, #19
 80052d0:	04db      	lsls	r3, r3, #19
 80052d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	0151      	lsls	r1, r2, #5
 80052e6:	69fa      	ldr	r2, [r7, #28]
 80052e8:	440a      	add	r2, r1
 80052ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052ee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80052f2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80052f6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d132      	bne.n	8005364 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	689a      	ldr	r2, [r3, #8]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	689a      	ldr	r2, [r3, #8]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800532c:	69b9      	ldr	r1, [r7, #24]
 800532e:	0148      	lsls	r0, r1, #5
 8005330:	69f9      	ldr	r1, [r7, #28]
 8005332:	4401      	add	r1, r0
 8005334:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005338:	4313      	orrs	r3, r2
 800533a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	0151      	lsls	r1, r2, #5
 800534e:	69fa      	ldr	r2, [r7, #28]
 8005350:	440a      	add	r2, r1
 8005352:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005356:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800535a:	6113      	str	r3, [r2, #16]
 800535c:	e062      	b.n	8005424 <USB_EPStartXfer+0x490>
 800535e:	bf00      	nop
 8005360:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d123      	bne.n	80053b4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005378:	691a      	ldr	r2, [r3, #16]
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005382:	69b9      	ldr	r1, [r7, #24]
 8005384:	0148      	lsls	r0, r1, #5
 8005386:	69f9      	ldr	r1, [r7, #28]
 8005388:	4401      	add	r1, r0
 800538a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800538e:	4313      	orrs	r3, r2
 8005390:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	4413      	add	r3, r2
 800539a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	0151      	lsls	r1, r2, #5
 80053a4:	69fa      	ldr	r2, [r7, #28]
 80053a6:	440a      	add	r2, r1
 80053a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80053b0:	6113      	str	r3, [r2, #16]
 80053b2:	e037      	b.n	8005424 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	4413      	add	r3, r2
 80053be:	1e5a      	subs	r2, r3, #1
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	8afa      	ldrh	r2, [r7, #22]
 80053d0:	fb03 f202 	mul.w	r2, r3, r2
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053e4:	691a      	ldr	r2, [r3, #16]
 80053e6:	8afb      	ldrh	r3, [r7, #22]
 80053e8:	04d9      	lsls	r1, r3, #19
 80053ea:	4b38      	ldr	r3, [pc, #224]	@ (80054cc <USB_EPStartXfer+0x538>)
 80053ec:	400b      	ands	r3, r1
 80053ee:	69b9      	ldr	r1, [r7, #24]
 80053f0:	0148      	lsls	r0, r1, #5
 80053f2:	69f9      	ldr	r1, [r7, #28]
 80053f4:	4401      	add	r1, r0
 80053f6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80053fa:	4313      	orrs	r3, r2
 80053fc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	4413      	add	r3, r2
 8005406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800540a:	691a      	ldr	r2, [r3, #16]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005414:	69b9      	ldr	r1, [r7, #24]
 8005416:	0148      	lsls	r0, r1, #5
 8005418:	69f9      	ldr	r1, [r7, #28]
 800541a:	4401      	add	r1, r0
 800541c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005420:	4313      	orrs	r3, r2
 8005422:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005424:	79fb      	ldrb	r3, [r7, #7]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d10d      	bne.n	8005446 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d009      	beq.n	8005446 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	68d9      	ldr	r1, [r3, #12]
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	4413      	add	r3, r2
 800543e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005442:	460a      	mov	r2, r1
 8005444:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	791b      	ldrb	r3, [r3, #4]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d128      	bne.n	80054a0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800545a:	2b00      	cmp	r3, #0
 800545c:	d110      	bne.n	8005480 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	0151      	lsls	r1, r2, #5
 8005470:	69fa      	ldr	r2, [r7, #28]
 8005472:	440a      	add	r2, r1
 8005474:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005478:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	e00f      	b.n	80054a0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	0151      	lsls	r1, r2, #5
 8005492:	69fa      	ldr	r2, [r7, #28]
 8005494:	440a      	add	r2, r1
 8005496:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800549a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800549e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	0151      	lsls	r1, r2, #5
 80054b2:	69fa      	ldr	r2, [r7, #28]
 80054b4:	440a      	add	r2, r1
 80054b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054ba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80054be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3720      	adds	r7, #32
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	1ff80000 	.word	0x1ff80000

080054d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054da:	2300      	movs	r3, #0
 80054dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	785b      	ldrb	r3, [r3, #1]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d14a      	bne.n	8005584 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005502:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005506:	f040 8086 	bne.w	8005616 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	7812      	ldrb	r2, [r2, #0]
 800551e:	0151      	lsls	r1, r2, #5
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	440a      	add	r2, r1
 8005524:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005528:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800552c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	7812      	ldrb	r2, [r2, #0]
 8005542:	0151      	lsls	r1, r2, #5
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	440a      	add	r2, r1
 8005548:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800554c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005550:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	3301      	adds	r3, #1
 8005556:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800555e:	4293      	cmp	r3, r2
 8005560:	d902      	bls.n	8005568 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	75fb      	strb	r3, [r7, #23]
          break;
 8005566:	e056      	b.n	8005616 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	4413      	add	r3, r2
 8005572:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800557c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005580:	d0e7      	beq.n	8005552 <USB_EPStopXfer+0x82>
 8005582:	e048      	b.n	8005616 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	4413      	add	r3, r2
 800558e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005598:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800559c:	d13b      	bne.n	8005616 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	7812      	ldrb	r2, [r2, #0]
 80055b2:	0151      	lsls	r1, r2, #5
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	440a      	add	r2, r1
 80055b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80055c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	7812      	ldrb	r2, [r2, #0]
 80055d6:	0151      	lsls	r1, r2, #5
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	440a      	add	r2, r1
 80055dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	3301      	adds	r3, #1
 80055ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d902      	bls.n	80055fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	75fb      	strb	r3, [r7, #23]
          break;
 80055fa:	e00c      	b.n	8005616 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005610:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005614:	d0e7      	beq.n	80055e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005616:	7dfb      	ldrb	r3, [r7, #23]
}
 8005618:	4618      	mov	r0, r3
 800561a:	371c      	adds	r7, #28
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005624:	b480      	push	{r7}
 8005626:	b089      	sub	sp, #36	@ 0x24
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	4611      	mov	r1, r2
 8005630:	461a      	mov	r2, r3
 8005632:	460b      	mov	r3, r1
 8005634:	71fb      	strb	r3, [r7, #7]
 8005636:	4613      	mov	r3, r2
 8005638:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005642:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005646:	2b00      	cmp	r3, #0
 8005648:	d123      	bne.n	8005692 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800564a:	88bb      	ldrh	r3, [r7, #4]
 800564c:	3303      	adds	r3, #3
 800564e:	089b      	lsrs	r3, r3, #2
 8005650:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005652:	2300      	movs	r3, #0
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	e018      	b.n	800568a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005658:	79fb      	ldrb	r3, [r7, #7]
 800565a:	031a      	lsls	r2, r3, #12
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	4413      	add	r3, r2
 8005660:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005664:	461a      	mov	r2, r3
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	3301      	adds	r3, #1
 8005670:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	3301      	adds	r3, #1
 8005676:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	3301      	adds	r3, #1
 800567c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	3301      	adds	r3, #1
 8005682:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	3301      	adds	r3, #1
 8005688:	61bb      	str	r3, [r7, #24]
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	429a      	cmp	r2, r3
 8005690:	d3e2      	bcc.n	8005658 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3724      	adds	r7, #36	@ 0x24
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b08b      	sub	sp, #44	@ 0x2c
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	4613      	mov	r3, r2
 80056ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80056b6:	88fb      	ldrh	r3, [r7, #6]
 80056b8:	089b      	lsrs	r3, r3, #2
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80056be:	88fb      	ldrh	r3, [r7, #6]
 80056c0:	f003 0303 	and.w	r3, r3, #3
 80056c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80056c6:	2300      	movs	r3, #0
 80056c8:	623b      	str	r3, [r7, #32]
 80056ca:	e014      	b.n	80056f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80056d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056da:	3301      	adds	r3, #1
 80056dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80056de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e0:	3301      	adds	r3, #1
 80056e2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80056e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e6:	3301      	adds	r3, #1
 80056e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80056ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ec:	3301      	adds	r3, #1
 80056ee:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	3301      	adds	r3, #1
 80056f4:	623b      	str	r3, [r7, #32]
 80056f6:	6a3a      	ldr	r2, [r7, #32]
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d3e6      	bcc.n	80056cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80056fe:	8bfb      	ldrh	r3, [r7, #30]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d01e      	beq.n	8005742 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800570e:	461a      	mov	r2, r3
 8005710:	f107 0310 	add.w	r3, r7, #16
 8005714:	6812      	ldr	r2, [r2, #0]
 8005716:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	fa22 f303 	lsr.w	r3, r2, r3
 8005724:	b2da      	uxtb	r2, r3
 8005726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005728:	701a      	strb	r2, [r3, #0]
      i++;
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	3301      	adds	r3, #1
 800572e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005732:	3301      	adds	r3, #1
 8005734:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005736:	8bfb      	ldrh	r3, [r7, #30]
 8005738:	3b01      	subs	r3, #1
 800573a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800573c:	8bfb      	ldrh	r3, [r7, #30]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1ea      	bne.n	8005718 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005744:	4618      	mov	r0, r3
 8005746:	372c      	adds	r7, #44	@ 0x2c
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	785b      	ldrb	r3, [r3, #1]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d12c      	bne.n	80057c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	db12      	blt.n	80057a4 <USB_EPSetStall+0x54>
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00f      	beq.n	80057a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	0151      	lsls	r1, r2, #5
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	440a      	add	r2, r1
 800579a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800579e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80057a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	0151      	lsls	r1, r2, #5
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	440a      	add	r2, r1
 80057ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80057c2:	6013      	str	r3, [r2, #0]
 80057c4:	e02b      	b.n	800581e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	db12      	blt.n	80057fe <USB_EPSetStall+0xae>
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00f      	beq.n	80057fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	0151      	lsls	r1, r2, #5
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	440a      	add	r2, r1
 80057f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80057fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	0151      	lsls	r1, r2, #5
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	440a      	add	r2, r1
 8005814:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005818:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800581c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	785b      	ldrb	r3, [r3, #1]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d128      	bne.n	800589a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	0151      	lsls	r1, r2, #5
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	440a      	add	r2, r1
 800585e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005862:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005866:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	791b      	ldrb	r3, [r3, #4]
 800586c:	2b03      	cmp	r3, #3
 800586e:	d003      	beq.n	8005878 <USB_EPClearStall+0x4c>
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	791b      	ldrb	r3, [r3, #4]
 8005874:	2b02      	cmp	r3, #2
 8005876:	d138      	bne.n	80058ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	0151      	lsls	r1, r2, #5
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	440a      	add	r2, r1
 800588e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005892:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005896:	6013      	str	r3, [r2, #0]
 8005898:	e027      	b.n	80058ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	0151      	lsls	r1, r2, #5
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	440a      	add	r2, r1
 80058b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058b4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80058b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	791b      	ldrb	r3, [r3, #4]
 80058be:	2b03      	cmp	r3, #3
 80058c0:	d003      	beq.n	80058ca <USB_EPClearStall+0x9e>
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	791b      	ldrb	r3, [r3, #4]
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d10f      	bne.n	80058ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	0151      	lsls	r1, r2, #5
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	440a      	add	r2, r1
 80058e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	460b      	mov	r3, r1
 8005902:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005916:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800591a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	78fb      	ldrb	r3, [r7, #3]
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800592c:	68f9      	ldr	r1, [r7, #12]
 800592e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005932:	4313      	orrs	r3, r2
 8005934:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800595e:	f023 0303 	bic.w	r3, r3, #3
 8005962:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005972:	f023 0302 	bic.w	r3, r3, #2
 8005976:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005986:	b480      	push	{r7}
 8005988:	b085      	sub	sp, #20
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80059a0:	f023 0303 	bic.w	r3, r3, #3
 80059a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059b4:	f043 0302 	orr.w	r3, r3, #2
 80059b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	4013      	ands	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80059e0:	68fb      	ldr	r3, [r7, #12]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b085      	sub	sp, #20
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	4013      	ands	r3, r2
 8005a10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	0c1b      	lsrs	r3, r3, #16
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b085      	sub	sp, #20
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	4013      	ands	r3, r2
 8005a44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	b29b      	uxth	r3, r3
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b085      	sub	sp, #20
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	460b      	mov	r3, r1
 8005a60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005a66:	78fb      	ldrb	r3, [r7, #3]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	4013      	ands	r3, r2
 8005a82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a84:	68bb      	ldr	r3, [r7, #8]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b087      	sub	sp, #28
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ab4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005ab6:	78fb      	ldrb	r3, [r7, #3]
 8005ab8:	f003 030f 	and.w	r3, r3, #15
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac2:	01db      	lsls	r3, r3, #7
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005acc:	78fb      	ldrb	r3, [r7, #3]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	4013      	ands	r3, r2
 8005ade:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	371c      	adds	r7, #28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	f003 0301 	and.w	r3, r3, #1
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b085      	sub	sp, #20
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b24:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005b28:	f023 0307 	bic.w	r3, r3, #7
 8005b2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	333c      	adds	r3, #60	@ 0x3c
 8005b66:	3304      	adds	r3, #4
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	4a26      	ldr	r2, [pc, #152]	@ (8005c08 <USB_EP0_OutStart+0xb8>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d90a      	bls.n	8005b8a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b84:	d101      	bne.n	8005b8a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005b86:	2300      	movs	r3, #0
 8005b88:	e037      	b.n	8005bfa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b90:	461a      	mov	r2, r3
 8005b92:	2300      	movs	r3, #0
 8005b94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ba4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ba8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bb8:	f043 0318 	orr.w	r3, r3, #24
 8005bbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bcc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005bd0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005bd2:	7afb      	ldrb	r3, [r7, #11]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d10f      	bne.n	8005bf8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bde:	461a      	mov	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bf2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005bf6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	371c      	adds	r7, #28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	4f54300a 	.word	0x4f54300a

08005c0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c14:	2300      	movs	r3, #0
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c24:	d901      	bls.n	8005c2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e022      	b.n	8005c70 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	daf2      	bge.n	8005c18 <USB_CoreReset+0xc>

  count = 10U;
 8005c32:	230a      	movs	r3, #10
 8005c34:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005c36:	e002      	b.n	8005c3e <USB_CoreReset+0x32>
  {
    count--;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1f9      	bne.n	8005c38 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	f043 0201 	orr.w	r2, r3, #1
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	3301      	adds	r3, #1
 8005c54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c5c:	d901      	bls.n	8005c62 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e006      	b.n	8005c70 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d0f0      	beq.n	8005c50 <USB_CoreReset+0x44>

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3714      	adds	r7, #20
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005c80:	4904      	ldr	r1, [pc, #16]	@ (8005c94 <MX_FATFS_Init+0x18>)
 8005c82:	4805      	ldr	r0, [pc, #20]	@ (8005c98 <MX_FATFS_Init+0x1c>)
 8005c84:	f006 fccc 	bl	800c620 <FATFS_LinkDriver>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	4b03      	ldr	r3, [pc, #12]	@ (8005c9c <MX_FATFS_Init+0x20>)
 8005c8e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005c90:	bf00      	nop
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	2000032c 	.word	0x2000032c
 8005c98:	2000000c 	.word	0x2000000c
 8005c9c:	20000328 	.word	0x20000328

08005ca0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005ca4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8005cba:	79fb      	ldrb	r3, [r7, #7]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 f9d7 	bl	8006070 <USER_SPI_initialize>
 8005cc2:	4603      	mov	r3, r0
//	return 0;
  /* USER CODE END INIT */
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8005cd6:	79fb      	ldrb	r3, [r7, #7]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 fab3 	bl	8006244 <USER_SPI_status>
 8005cde:	4603      	mov	r3, r0
//	return 0;
  /* USER CODE END STATUS */
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	607a      	str	r2, [r7, #4]
 8005cf2:	603b      	str	r3, [r7, #0]
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8005cf8:	7bf8      	ldrb	r0, [r7, #15]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	68b9      	ldr	r1, [r7, #8]
 8005d00:	f000 fab6 	bl	8006270 <USER_SPI_read>
 8005d04:	4603      	mov	r3, r0
//	return RES_OK;
  /* USER CODE END READ */
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b084      	sub	sp, #16
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
 8005d18:	603b      	str	r3, [r7, #0]
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8005d1e:	7bf8      	ldrb	r0, [r7, #15]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	68b9      	ldr	r1, [r7, #8]
 8005d26:	f000 fb09 	bl	800633c <USER_SPI_write>
 8005d2a:	4603      	mov	r3, r0
//	return RES_OK;
  /* USER CODE END WRITE */
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	603a      	str	r2, [r7, #0]
 8005d3e:	71fb      	strb	r3, [r7, #7]
 8005d40:	460b      	mov	r3, r1
 8005d42:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8005d44:	79b9      	ldrb	r1, [r7, #6]
 8005d46:	79fb      	ldrb	r3, [r7, #7]
 8005d48:	683a      	ldr	r2, [r7, #0]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fb72 	bl	8006434 <USER_SPI_ioctl>
 8005d50:	4603      	mov	r3, r0
//	            return RES_OK;
//	        default:
//	            return RES_PARERR;
//	    }
  /* USER CODE END IOCTL */
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
	...

08005d5c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8005d64:	f7fb f880 	bl	8000e68 <HAL_GetTick>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	4a04      	ldr	r2, [pc, #16]	@ (8005d7c <SPI_Timer_On+0x20>)
 8005d6c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8005d6e:	4a04      	ldr	r2, [pc, #16]	@ (8005d80 <SPI_Timer_On+0x24>)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6013      	str	r3, [r2, #0]
}
 8005d74:	bf00      	nop
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	20000334 	.word	0x20000334
 8005d80:	20000338 	.word	0x20000338

08005d84 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005d84:	b580      	push	{r7, lr}
 8005d86:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005d88:	f7fb f86e 	bl	8000e68 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	4b06      	ldr	r3, [pc, #24]	@ (8005da8 <SPI_Timer_Status+0x24>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	1ad2      	subs	r2, r2, r3
 8005d94:	4b05      	ldr	r3, [pc, #20]	@ (8005dac <SPI_Timer_Status+0x28>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	bf34      	ite	cc
 8005d9c:	2301      	movcc	r3, #1
 8005d9e:	2300      	movcs	r3, #0
 8005da0:	b2db      	uxtb	r3, r3
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000334 	.word	0x20000334
 8005dac:	20000338 	.word	0x20000338

08005db0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af02      	add	r7, sp, #8
 8005db6:	4603      	mov	r3, r0
 8005db8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8005dba:	f107 020f 	add.w	r2, r7, #15
 8005dbe:	1df9      	adds	r1, r7, #7
 8005dc0:	2332      	movs	r3, #50	@ 0x32
 8005dc2:	9300      	str	r3, [sp, #0]
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	4804      	ldr	r0, [pc, #16]	@ (8005dd8 <xchg_spi+0x28>)
 8005dc8:	f7fd fc5b 	bl	8003682 <HAL_SPI_TransmitReceive>
    return rxDat;
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20000180 	.word	0x20000180

08005ddc <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8005ddc:	b590      	push	{r4, r7, lr}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8005de6:	2300      	movs	r3, #0
 8005de8:	60fb      	str	r3, [r7, #12]
 8005dea:	e00a      	b.n	8005e02 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	18d4      	adds	r4, r2, r3
 8005df2:	20ff      	movs	r0, #255	@ 0xff
 8005df4:	f7ff ffdc 	bl	8005db0 <xchg_spi>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	60fb      	str	r3, [r7, #12]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d3f0      	bcc.n	8005dec <rcvr_spi_multi+0x10>
	}
}
 8005e0a:	bf00      	nop
 8005e0c:	bf00      	nop
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd90      	pop	{r4, r7, pc}

08005e14 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	f04f 33ff 	mov.w	r3, #4294967295
 8005e26:	6879      	ldr	r1, [r7, #4]
 8005e28:	4803      	ldr	r0, [pc, #12]	@ (8005e38 <xmit_spi_multi+0x24>)
 8005e2a:	f7fd fae6 	bl	80033fa <HAL_SPI_Transmit>
}
 8005e2e:	bf00      	nop
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000180 	.word	0x20000180

08005e3c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8005e44:	f7fb f810 	bl	8000e68 <HAL_GetTick>
 8005e48:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8005e4e:	20ff      	movs	r0, #255	@ 0xff
 8005e50:	f7ff ffae 	bl	8005db0 <xchg_spi>
 8005e54:	4603      	mov	r3, r0
 8005e56:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
 8005e5a:	2bff      	cmp	r3, #255	@ 0xff
 8005e5c:	d007      	beq.n	8005e6e <wait_ready+0x32>
 8005e5e:	f7fb f803 	bl	8000e68 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d8ef      	bhi.n	8005e4e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
 8005e70:	2bff      	cmp	r3, #255	@ 0xff
 8005e72:	bf0c      	ite	eq
 8005e74:	2301      	moveq	r3, #1
 8005e76:	2300      	movne	r3, #0
 8005e78:	b2db      	uxtb	r3, r3
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3718      	adds	r7, #24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005e8e:	4804      	ldr	r0, [pc, #16]	@ (8005ea0 <despiselect+0x1c>)
 8005e90:	f7fb fafa 	bl	8001488 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8005e94:	20ff      	movs	r0, #255	@ 0xff
 8005e96:	f7ff ff8b 	bl	8005db0 <xchg_spi>

}
 8005e9a:	bf00      	nop
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	40021800 	.word	0x40021800

08005ea4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005eae:	480a      	ldr	r0, [pc, #40]	@ (8005ed8 <spiselect+0x34>)
 8005eb0:	f7fb faea 	bl	8001488 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8005eb4:	20ff      	movs	r0, #255	@ 0xff
 8005eb6:	f7ff ff7b 	bl	8005db0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8005eba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005ebe:	f7ff ffbd 	bl	8005e3c <wait_ready>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <spiselect+0x28>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e002      	b.n	8005ed2 <spiselect+0x2e>

	despiselect();
 8005ecc:	f7ff ffda 	bl	8005e84 <despiselect>
	return 0;	/* Timeout */
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	40021800 	.word	0x40021800

08005edc <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8005ee6:	20c8      	movs	r0, #200	@ 0xc8
 8005ee8:	f7ff ff38 	bl	8005d5c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8005eec:	20ff      	movs	r0, #255	@ 0xff
 8005eee:	f7ff ff5f 	bl	8005db0 <xchg_spi>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8005ef6:	7bfb      	ldrb	r3, [r7, #15]
 8005ef8:	2bff      	cmp	r3, #255	@ 0xff
 8005efa:	d104      	bne.n	8005f06 <rcvr_datablock+0x2a>
 8005efc:	f7ff ff42 	bl	8005d84 <SPI_Timer_Status>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1f2      	bne.n	8005eec <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
 8005f08:	2bfe      	cmp	r3, #254	@ 0xfe
 8005f0a:	d001      	beq.n	8005f10 <rcvr_datablock+0x34>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	e00a      	b.n	8005f26 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8005f10:	6839      	ldr	r1, [r7, #0]
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7ff ff62 	bl	8005ddc <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8005f18:	20ff      	movs	r0, #255	@ 0xff
 8005f1a:	f7ff ff49 	bl	8005db0 <xchg_spi>
 8005f1e:	20ff      	movs	r0, #255	@ 0xff
 8005f20:	f7ff ff46 	bl	8005db0 <xchg_spi>

	return 1;						/* Function succeeded */
 8005f24:	2301      	movs	r3, #1
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b084      	sub	sp, #16
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	460b      	mov	r3, r1
 8005f38:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8005f3a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005f3e:	f7ff ff7d 	bl	8005e3c <wait_ready>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <xmit_datablock+0x1e>
 8005f48:	2300      	movs	r3, #0
 8005f4a:	e01e      	b.n	8005f8a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8005f4c:	78fb      	ldrb	r3, [r7, #3]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff ff2e 	bl	8005db0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8005f54:	78fb      	ldrb	r3, [r7, #3]
 8005f56:	2bfd      	cmp	r3, #253	@ 0xfd
 8005f58:	d016      	beq.n	8005f88 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8005f5a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7ff ff58 	bl	8005e14 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8005f64:	20ff      	movs	r0, #255	@ 0xff
 8005f66:	f7ff ff23 	bl	8005db0 <xchg_spi>
 8005f6a:	20ff      	movs	r0, #255	@ 0xff
 8005f6c:	f7ff ff20 	bl	8005db0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8005f70:	20ff      	movs	r0, #255	@ 0xff
 8005f72:	f7ff ff1d 	bl	8005db0 <xchg_spi>
 8005f76:	4603      	mov	r3, r0
 8005f78:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
 8005f7c:	f003 031f 	and.w	r3, r3, #31
 8005f80:	2b05      	cmp	r3, #5
 8005f82:	d001      	beq.n	8005f88 <xmit_datablock+0x5a>
 8005f84:	2300      	movs	r3, #0
 8005f86:	e000      	b.n	8005f8a <xmit_datablock+0x5c>
	}
	return 1;
 8005f88:	2301      	movs	r3, #1
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b084      	sub	sp, #16
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	4603      	mov	r3, r0
 8005f9a:	6039      	str	r1, [r7, #0]
 8005f9c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8005f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	da0e      	bge.n	8005fc4 <send_cmd+0x32>
		cmd &= 0x7F;
 8005fa6:	79fb      	ldrb	r3, [r7, #7]
 8005fa8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fac:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8005fae:	2100      	movs	r1, #0
 8005fb0:	2037      	movs	r0, #55	@ 0x37
 8005fb2:	f7ff ffee 	bl	8005f92 <send_cmd>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8005fba:	7bbb      	ldrb	r3, [r7, #14]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d901      	bls.n	8005fc4 <send_cmd+0x32>
 8005fc0:	7bbb      	ldrb	r3, [r7, #14]
 8005fc2:	e051      	b.n	8006068 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005fc4:	79fb      	ldrb	r3, [r7, #7]
 8005fc6:	2b0c      	cmp	r3, #12
 8005fc8:	d008      	beq.n	8005fdc <send_cmd+0x4a>
		despiselect();
 8005fca:	f7ff ff5b 	bl	8005e84 <despiselect>
		if (!spiselect()) return 0xFF;
 8005fce:	f7ff ff69 	bl	8005ea4 <spiselect>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <send_cmd+0x4a>
 8005fd8:	23ff      	movs	r3, #255	@ 0xff
 8005fda:	e045      	b.n	8006068 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005fdc:	79fb      	ldrb	r3, [r7, #7]
 8005fde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7ff fee3 	bl	8005db0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	0e1b      	lsrs	r3, r3, #24
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7ff fedd 	bl	8005db0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	0c1b      	lsrs	r3, r3, #16
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff fed7 	bl	8005db0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	0a1b      	lsrs	r3, r3, #8
 8006006:	b2db      	uxtb	r3, r3
 8006008:	4618      	mov	r0, r3
 800600a:	f7ff fed1 	bl	8005db0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	b2db      	uxtb	r3, r3
 8006012:	4618      	mov	r0, r3
 8006014:	f7ff fecc 	bl	8005db0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006018:	2301      	movs	r3, #1
 800601a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800601c:	79fb      	ldrb	r3, [r7, #7]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <send_cmd+0x94>
 8006022:	2395      	movs	r3, #149	@ 0x95
 8006024:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006026:	79fb      	ldrb	r3, [r7, #7]
 8006028:	2b08      	cmp	r3, #8
 800602a:	d101      	bne.n	8006030 <send_cmd+0x9e>
 800602c:	2387      	movs	r3, #135	@ 0x87
 800602e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006030:	7bfb      	ldrb	r3, [r7, #15]
 8006032:	4618      	mov	r0, r3
 8006034:	f7ff febc 	bl	8005db0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006038:	79fb      	ldrb	r3, [r7, #7]
 800603a:	2b0c      	cmp	r3, #12
 800603c:	d102      	bne.n	8006044 <send_cmd+0xb2>
 800603e:	20ff      	movs	r0, #255	@ 0xff
 8006040:	f7ff feb6 	bl	8005db0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006044:	230a      	movs	r3, #10
 8006046:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006048:	20ff      	movs	r0, #255	@ 0xff
 800604a:	f7ff feb1 	bl	8005db0 <xchg_spi>
 800604e:	4603      	mov	r3, r0
 8006050:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006052:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006056:	2b00      	cmp	r3, #0
 8006058:	da05      	bge.n	8006066 <send_cmd+0xd4>
 800605a:	7bfb      	ldrb	r3, [r7, #15]
 800605c:	3b01      	subs	r3, #1
 800605e:	73fb      	strb	r3, [r7, #15]
 8006060:	7bfb      	ldrb	r3, [r7, #15]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1f0      	bne.n	8006048 <send_cmd+0xb6>

	return res;							/* Return received response */
 8006066:	7bbb      	ldrb	r3, [r7, #14]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006070:	b590      	push	{r4, r7, lr}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	4603      	mov	r3, r0
 8006078:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800607a:	79fb      	ldrb	r3, [r7, #7]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <USER_SPI_initialize+0x14>
 8006080:	2301      	movs	r3, #1
 8006082:	e0d4      	b.n	800622e <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006084:	4b6c      	ldr	r3, [pc, #432]	@ (8006238 <USER_SPI_initialize+0x1c8>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	b2db      	uxtb	r3, r3
 800608a:	f003 0302 	and.w	r3, r3, #2
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <USER_SPI_initialize+0x2a>
 8006092:	4b69      	ldr	r3, [pc, #420]	@ (8006238 <USER_SPI_initialize+0x1c8>)
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	b2db      	uxtb	r3, r3
 8006098:	e0c9      	b.n	800622e <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800609a:	4b68      	ldr	r3, [pc, #416]	@ (800623c <USER_SPI_initialize+0x1cc>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	4b66      	ldr	r3, [pc, #408]	@ (800623c <USER_SPI_initialize+0x1cc>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f042 0238 	orr.w	r2, r2, #56	@ 0x38
 80060a8:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80060aa:	230a      	movs	r3, #10
 80060ac:	73fb      	strb	r3, [r7, #15]
 80060ae:	e005      	b.n	80060bc <USER_SPI_initialize+0x4c>
 80060b0:	20ff      	movs	r0, #255	@ 0xff
 80060b2:	f7ff fe7d 	bl	8005db0 <xchg_spi>
 80060b6:	7bfb      	ldrb	r3, [r7, #15]
 80060b8:	3b01      	subs	r3, #1
 80060ba:	73fb      	strb	r3, [r7, #15]
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1f6      	bne.n	80060b0 <USER_SPI_initialize+0x40>

	ty = 0;
 80060c2:	2300      	movs	r3, #0
 80060c4:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80060c6:	2100      	movs	r1, #0
 80060c8:	2000      	movs	r0, #0
 80060ca:	f7ff ff62 	bl	8005f92 <send_cmd>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	f040 808b 	bne.w	80061ec <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80060d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80060da:	f7ff fe3f 	bl	8005d5c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80060de:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80060e2:	2008      	movs	r0, #8
 80060e4:	f7ff ff55 	bl	8005f92 <send_cmd>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d151      	bne.n	8006192 <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80060ee:	2300      	movs	r3, #0
 80060f0:	73fb      	strb	r3, [r7, #15]
 80060f2:	e00d      	b.n	8006110 <USER_SPI_initialize+0xa0>
 80060f4:	7bfc      	ldrb	r4, [r7, #15]
 80060f6:	20ff      	movs	r0, #255	@ 0xff
 80060f8:	f7ff fe5a 	bl	8005db0 <xchg_spi>
 80060fc:	4603      	mov	r3, r0
 80060fe:	461a      	mov	r2, r3
 8006100:	f104 0310 	add.w	r3, r4, #16
 8006104:	443b      	add	r3, r7
 8006106:	f803 2c08 	strb.w	r2, [r3, #-8]
 800610a:	7bfb      	ldrb	r3, [r7, #15]
 800610c:	3301      	adds	r3, #1
 800610e:	73fb      	strb	r3, [r7, #15]
 8006110:	7bfb      	ldrb	r3, [r7, #15]
 8006112:	2b03      	cmp	r3, #3
 8006114:	d9ee      	bls.n	80060f4 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8006116:	7abb      	ldrb	r3, [r7, #10]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d167      	bne.n	80061ec <USER_SPI_initialize+0x17c>
 800611c:	7afb      	ldrb	r3, [r7, #11]
 800611e:	2baa      	cmp	r3, #170	@ 0xaa
 8006120:	d164      	bne.n	80061ec <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006122:	bf00      	nop
 8006124:	f7ff fe2e 	bl	8005d84 <SPI_Timer_Status>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d007      	beq.n	800613e <USER_SPI_initialize+0xce>
 800612e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006132:	20a9      	movs	r0, #169	@ 0xa9
 8006134:	f7ff ff2d 	bl	8005f92 <send_cmd>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1f2      	bne.n	8006124 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800613e:	f7ff fe21 	bl	8005d84 <SPI_Timer_Status>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d051      	beq.n	80061ec <USER_SPI_initialize+0x17c>
 8006148:	2100      	movs	r1, #0
 800614a:	203a      	movs	r0, #58	@ 0x3a
 800614c:	f7ff ff21 	bl	8005f92 <send_cmd>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d14a      	bne.n	80061ec <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006156:	2300      	movs	r3, #0
 8006158:	73fb      	strb	r3, [r7, #15]
 800615a:	e00d      	b.n	8006178 <USER_SPI_initialize+0x108>
 800615c:	7bfc      	ldrb	r4, [r7, #15]
 800615e:	20ff      	movs	r0, #255	@ 0xff
 8006160:	f7ff fe26 	bl	8005db0 <xchg_spi>
 8006164:	4603      	mov	r3, r0
 8006166:	461a      	mov	r2, r3
 8006168:	f104 0310 	add.w	r3, r4, #16
 800616c:	443b      	add	r3, r7
 800616e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006172:	7bfb      	ldrb	r3, [r7, #15]
 8006174:	3301      	adds	r3, #1
 8006176:	73fb      	strb	r3, [r7, #15]
 8006178:	7bfb      	ldrb	r3, [r7, #15]
 800617a:	2b03      	cmp	r3, #3
 800617c:	d9ee      	bls.n	800615c <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800617e:	7a3b      	ldrb	r3, [r7, #8]
 8006180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <USER_SPI_initialize+0x11c>
 8006188:	230c      	movs	r3, #12
 800618a:	e000      	b.n	800618e <USER_SPI_initialize+0x11e>
 800618c:	2304      	movs	r3, #4
 800618e:	737b      	strb	r3, [r7, #13]
 8006190:	e02c      	b.n	80061ec <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006192:	2100      	movs	r1, #0
 8006194:	20a9      	movs	r0, #169	@ 0xa9
 8006196:	f7ff fefc 	bl	8005f92 <send_cmd>
 800619a:	4603      	mov	r3, r0
 800619c:	2b01      	cmp	r3, #1
 800619e:	d804      	bhi.n	80061aa <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80061a0:	2302      	movs	r3, #2
 80061a2:	737b      	strb	r3, [r7, #13]
 80061a4:	23a9      	movs	r3, #169	@ 0xa9
 80061a6:	73bb      	strb	r3, [r7, #14]
 80061a8:	e003      	b.n	80061b2 <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80061aa:	2301      	movs	r3, #1
 80061ac:	737b      	strb	r3, [r7, #13]
 80061ae:	2301      	movs	r3, #1
 80061b0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80061b2:	bf00      	nop
 80061b4:	f7ff fde6 	bl	8005d84 <SPI_Timer_Status>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d007      	beq.n	80061ce <USER_SPI_initialize+0x15e>
 80061be:	7bbb      	ldrb	r3, [r7, #14]
 80061c0:	2100      	movs	r1, #0
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7ff fee5 	bl	8005f92 <send_cmd>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1f2      	bne.n	80061b4 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80061ce:	f7ff fdd9 	bl	8005d84 <SPI_Timer_Status>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d007      	beq.n	80061e8 <USER_SPI_initialize+0x178>
 80061d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80061dc:	2010      	movs	r0, #16
 80061de:	f7ff fed8 	bl	8005f92 <send_cmd>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <USER_SPI_initialize+0x17c>
				ty = 0;
 80061e8:	2300      	movs	r3, #0
 80061ea:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80061ec:	4a14      	ldr	r2, [pc, #80]	@ (8006240 <USER_SPI_initialize+0x1d0>)
 80061ee:	7b7b      	ldrb	r3, [r7, #13]
 80061f0:	7013      	strb	r3, [r2, #0]
	despiselect();
 80061f2:	f7ff fe47 	bl	8005e84 <despiselect>

	if (ty) {			/* OK */
 80061f6:	7b7b      	ldrb	r3, [r7, #13]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d012      	beq.n	8006222 <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 80061fc:	4b0f      	ldr	r3, [pc, #60]	@ (800623c <USER_SPI_initialize+0x1cc>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8006206:	4b0d      	ldr	r3, [pc, #52]	@ (800623c <USER_SPI_initialize+0x1cc>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0218 	orr.w	r2, r2, #24
 800620e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006210:	4b09      	ldr	r3, [pc, #36]	@ (8006238 <USER_SPI_initialize+0x1c8>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	b2db      	uxtb	r3, r3
 8006216:	f023 0301 	bic.w	r3, r3, #1
 800621a:	b2da      	uxtb	r2, r3
 800621c:	4b06      	ldr	r3, [pc, #24]	@ (8006238 <USER_SPI_initialize+0x1c8>)
 800621e:	701a      	strb	r2, [r3, #0]
 8006220:	e002      	b.n	8006228 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8006222:	4b05      	ldr	r3, [pc, #20]	@ (8006238 <USER_SPI_initialize+0x1c8>)
 8006224:	2201      	movs	r2, #1
 8006226:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006228:	4b03      	ldr	r3, [pc, #12]	@ (8006238 <USER_SPI_initialize+0x1c8>)
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	b2db      	uxtb	r3, r3
}
 800622e:	4618      	mov	r0, r3
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	bd90      	pop	{r4, r7, pc}
 8006236:	bf00      	nop
 8006238:	20000020 	.word	0x20000020
 800623c:	20000180 	.word	0x20000180
 8006240:	20000330 	.word	0x20000330

08006244 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	4603      	mov	r3, r0
 800624c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800624e:	79fb      	ldrb	r3, [r7, #7]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <USER_SPI_status+0x14>
 8006254:	2301      	movs	r3, #1
 8006256:	e002      	b.n	800625e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006258:	4b04      	ldr	r3, [pc, #16]	@ (800626c <USER_SPI_status+0x28>)
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	b2db      	uxtb	r3, r3
}
 800625e:	4618      	mov	r0, r3
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	20000020 	.word	0x20000020

08006270 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	60b9      	str	r1, [r7, #8]
 8006278:	607a      	str	r2, [r7, #4]
 800627a:	603b      	str	r3, [r7, #0]
 800627c:	4603      	mov	r3, r0
 800627e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006280:	7bfb      	ldrb	r3, [r7, #15]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d102      	bne.n	800628c <USER_SPI_read+0x1c>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <USER_SPI_read+0x20>
 800628c:	2304      	movs	r3, #4
 800628e:	e04d      	b.n	800632c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006290:	4b28      	ldr	r3, [pc, #160]	@ (8006334 <USER_SPI_read+0xc4>)
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	b2db      	uxtb	r3, r3
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <USER_SPI_read+0x32>
 800629e:	2303      	movs	r3, #3
 80062a0:	e044      	b.n	800632c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80062a2:	4b25      	ldr	r3, [pc, #148]	@ (8006338 <USER_SPI_read+0xc8>)
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	f003 0308 	and.w	r3, r3, #8
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d102      	bne.n	80062b4 <USER_SPI_read+0x44>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	025b      	lsls	r3, r3, #9
 80062b2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d111      	bne.n	80062de <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80062ba:	6879      	ldr	r1, [r7, #4]
 80062bc:	2011      	movs	r0, #17
 80062be:	f7ff fe68 	bl	8005f92 <send_cmd>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d129      	bne.n	800631c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80062c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80062cc:	68b8      	ldr	r0, [r7, #8]
 80062ce:	f7ff fe05 	bl	8005edc <rcvr_datablock>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d021      	beq.n	800631c <USER_SPI_read+0xac>
			count = 0;
 80062d8:	2300      	movs	r3, #0
 80062da:	603b      	str	r3, [r7, #0]
 80062dc:	e01e      	b.n	800631c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	2012      	movs	r0, #18
 80062e2:	f7ff fe56 	bl	8005f92 <send_cmd>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d117      	bne.n	800631c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80062ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80062f0:	68b8      	ldr	r0, [r7, #8]
 80062f2:	f7ff fdf3 	bl	8005edc <rcvr_datablock>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00a      	beq.n	8006312 <USER_SPI_read+0xa2>
				buff += 512;
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006302:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	3b01      	subs	r3, #1
 8006308:	603b      	str	r3, [r7, #0]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1ed      	bne.n	80062ec <USER_SPI_read+0x7c>
 8006310:	e000      	b.n	8006314 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8006312:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006314:	2100      	movs	r1, #0
 8006316:	200c      	movs	r0, #12
 8006318:	f7ff fe3b 	bl	8005f92 <send_cmd>
		}
	}
	despiselect();
 800631c:	f7ff fdb2 	bl	8005e84 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	bf14      	ite	ne
 8006326:	2301      	movne	r3, #1
 8006328:	2300      	moveq	r3, #0
 800632a:	b2db      	uxtb	r3, r3
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	20000020 	.word	0x20000020
 8006338:	20000330 	.word	0x20000330

0800633c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	60b9      	str	r1, [r7, #8]
 8006344:	607a      	str	r2, [r7, #4]
 8006346:	603b      	str	r3, [r7, #0]
 8006348:	4603      	mov	r3, r0
 800634a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800634c:	7bfb      	ldrb	r3, [r7, #15]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d102      	bne.n	8006358 <USER_SPI_write+0x1c>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <USER_SPI_write+0x20>
 8006358:	2304      	movs	r3, #4
 800635a:	e063      	b.n	8006424 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800635c:	4b33      	ldr	r3, [pc, #204]	@ (800642c <USER_SPI_write+0xf0>)
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	b2db      	uxtb	r3, r3
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <USER_SPI_write+0x32>
 800636a:	2303      	movs	r3, #3
 800636c:	e05a      	b.n	8006424 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800636e:	4b2f      	ldr	r3, [pc, #188]	@ (800642c <USER_SPI_write+0xf0>)
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	b2db      	uxtb	r3, r3
 8006374:	f003 0304 	and.w	r3, r3, #4
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <USER_SPI_write+0x44>
 800637c:	2302      	movs	r3, #2
 800637e:	e051      	b.n	8006424 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006380:	4b2b      	ldr	r3, [pc, #172]	@ (8006430 <USER_SPI_write+0xf4>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	f003 0308 	and.w	r3, r3, #8
 8006388:	2b00      	cmp	r3, #0
 800638a:	d102      	bne.n	8006392 <USER_SPI_write+0x56>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	025b      	lsls	r3, r3, #9
 8006390:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d110      	bne.n	80063ba <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006398:	6879      	ldr	r1, [r7, #4]
 800639a:	2018      	movs	r0, #24
 800639c:	f7ff fdf9 	bl	8005f92 <send_cmd>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d136      	bne.n	8006414 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80063a6:	21fe      	movs	r1, #254	@ 0xfe
 80063a8:	68b8      	ldr	r0, [r7, #8]
 80063aa:	f7ff fdc0 	bl	8005f2e <xmit_datablock>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d02f      	beq.n	8006414 <USER_SPI_write+0xd8>
			count = 0;
 80063b4:	2300      	movs	r3, #0
 80063b6:	603b      	str	r3, [r7, #0]
 80063b8:	e02c      	b.n	8006414 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80063ba:	4b1d      	ldr	r3, [pc, #116]	@ (8006430 <USER_SPI_write+0xf4>)
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	f003 0306 	and.w	r3, r3, #6
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <USER_SPI_write+0x92>
 80063c6:	6839      	ldr	r1, [r7, #0]
 80063c8:	2097      	movs	r0, #151	@ 0x97
 80063ca:	f7ff fde2 	bl	8005f92 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80063ce:	6879      	ldr	r1, [r7, #4]
 80063d0:	2019      	movs	r0, #25
 80063d2:	f7ff fdde 	bl	8005f92 <send_cmd>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d11b      	bne.n	8006414 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80063dc:	21fc      	movs	r1, #252	@ 0xfc
 80063de:	68b8      	ldr	r0, [r7, #8]
 80063e0:	f7ff fda5 	bl	8005f2e <xmit_datablock>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00a      	beq.n	8006400 <USER_SPI_write+0xc4>
				buff += 512;
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80063f0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	603b      	str	r3, [r7, #0]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1ee      	bne.n	80063dc <USER_SPI_write+0xa0>
 80063fe:	e000      	b.n	8006402 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006400:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8006402:	21fd      	movs	r1, #253	@ 0xfd
 8006404:	2000      	movs	r0, #0
 8006406:	f7ff fd92 	bl	8005f2e <xmit_datablock>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d101      	bne.n	8006414 <USER_SPI_write+0xd8>
 8006410:	2301      	movs	r3, #1
 8006412:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8006414:	f7ff fd36 	bl	8005e84 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	bf14      	ite	ne
 800641e:	2301      	movne	r3, #1
 8006420:	2300      	moveq	r3, #0
 8006422:	b2db      	uxtb	r3, r3
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	20000020 	.word	0x20000020
 8006430:	20000330 	.word	0x20000330

08006434 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08c      	sub	sp, #48	@ 0x30
 8006438:	af00      	add	r7, sp, #0
 800643a:	4603      	mov	r3, r0
 800643c:	603a      	str	r2, [r7, #0]
 800643e:	71fb      	strb	r3, [r7, #7]
 8006440:	460b      	mov	r3, r1
 8006442:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006444:	79fb      	ldrb	r3, [r7, #7]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <USER_SPI_ioctl+0x1a>
 800644a:	2304      	movs	r3, #4
 800644c:	e162      	b.n	8006714 <USER_SPI_ioctl+0x2e0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800644e:	4bb3      	ldr	r3, [pc, #716]	@ (800671c <USER_SPI_ioctl+0x2e8>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	b2db      	uxtb	r3, r3
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	2b00      	cmp	r3, #0
 800645a:	d001      	beq.n	8006460 <USER_SPI_ioctl+0x2c>
 800645c:	2303      	movs	r3, #3
 800645e:	e159      	b.n	8006714 <USER_SPI_ioctl+0x2e0>

	res = RES_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8006466:	79bb      	ldrb	r3, [r7, #6]
 8006468:	2b04      	cmp	r3, #4
 800646a:	f200 813e 	bhi.w	80066ea <USER_SPI_ioctl+0x2b6>
 800646e:	a201      	add	r2, pc, #4	@ (adr r2, 8006474 <USER_SPI_ioctl+0x40>)
 8006470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006474:	08006489 	.word	0x08006489
 8006478:	0800649d 	.word	0x0800649d
 800647c:	080066db 	.word	0x080066db
 8006480:	08006549 	.word	0x08006549
 8006484:	0800663f 	.word	0x0800663f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8006488:	f7ff fd0c 	bl	8005ea4 <spiselect>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 812f 	beq.w	80066f2 <USER_SPI_ioctl+0x2be>
 8006494:	2300      	movs	r3, #0
 8006496:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800649a:	e12a      	b.n	80066f2 <USER_SPI_ioctl+0x2be>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800649c:	2100      	movs	r1, #0
 800649e:	2009      	movs	r0, #9
 80064a0:	f7ff fd77 	bl	8005f92 <send_cmd>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f040 8125 	bne.w	80066f6 <USER_SPI_ioctl+0x2c2>
 80064ac:	f107 030c 	add.w	r3, r7, #12
 80064b0:	2110      	movs	r1, #16
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7ff fd12 	bl	8005edc <rcvr_datablock>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f000 811b 	beq.w	80066f6 <USER_SPI_ioctl+0x2c2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80064c0:	7b3b      	ldrb	r3, [r7, #12]
 80064c2:	099b      	lsrs	r3, r3, #6
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d111      	bne.n	80064ee <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80064ca:	7d7b      	ldrb	r3, [r7, #21]
 80064cc:	461a      	mov	r2, r3
 80064ce:	7d3b      	ldrb	r3, [r7, #20]
 80064d0:	021b      	lsls	r3, r3, #8
 80064d2:	4413      	add	r3, r2
 80064d4:	461a      	mov	r2, r3
 80064d6:	7cfb      	ldrb	r3, [r7, #19]
 80064d8:	041b      	lsls	r3, r3, #16
 80064da:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80064de:	4413      	add	r3, r2
 80064e0:	3301      	adds	r3, #1
 80064e2:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	029a      	lsls	r2, r3, #10
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	e028      	b.n	8006540 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80064ee:	7c7b      	ldrb	r3, [r7, #17]
 80064f0:	f003 030f 	and.w	r3, r3, #15
 80064f4:	b2da      	uxtb	r2, r3
 80064f6:	7dbb      	ldrb	r3, [r7, #22]
 80064f8:	09db      	lsrs	r3, r3, #7
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	4413      	add	r3, r2
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	7d7b      	ldrb	r3, [r7, #21]
 8006502:	005b      	lsls	r3, r3, #1
 8006504:	b2db      	uxtb	r3, r3
 8006506:	f003 0306 	and.w	r3, r3, #6
 800650a:	b2db      	uxtb	r3, r3
 800650c:	4413      	add	r3, r2
 800650e:	b2db      	uxtb	r3, r3
 8006510:	3302      	adds	r3, #2
 8006512:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8006516:	7d3b      	ldrb	r3, [r7, #20]
 8006518:	099b      	lsrs	r3, r3, #6
 800651a:	b2db      	uxtb	r3, r3
 800651c:	461a      	mov	r2, r3
 800651e:	7cfb      	ldrb	r3, [r7, #19]
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	441a      	add	r2, r3
 8006524:	7cbb      	ldrb	r3, [r7, #18]
 8006526:	029b      	lsls	r3, r3, #10
 8006528:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800652c:	4413      	add	r3, r2
 800652e:	3301      	adds	r3, #1
 8006530:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8006532:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006536:	3b09      	subs	r3, #9
 8006538:	69fa      	ldr	r2, [r7, #28]
 800653a:	409a      	lsls	r2, r3
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006540:	2300      	movs	r3, #0
 8006542:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8006546:	e0d6      	b.n	80066f6 <USER_SPI_ioctl+0x2c2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006548:	4b75      	ldr	r3, [pc, #468]	@ (8006720 <USER_SPI_ioctl+0x2ec>)
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	f003 0304 	and.w	r3, r3, #4
 8006550:	2b00      	cmp	r3, #0
 8006552:	d031      	beq.n	80065b8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006554:	2100      	movs	r1, #0
 8006556:	208d      	movs	r0, #141	@ 0x8d
 8006558:	f7ff fd1b 	bl	8005f92 <send_cmd>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	f040 80cb 	bne.w	80066fa <USER_SPI_ioctl+0x2c6>
				xchg_spi(0xFF);
 8006564:	20ff      	movs	r0, #255	@ 0xff
 8006566:	f7ff fc23 	bl	8005db0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800656a:	f107 030c 	add.w	r3, r7, #12
 800656e:	2110      	movs	r1, #16
 8006570:	4618      	mov	r0, r3
 8006572:	f7ff fcb3 	bl	8005edc <rcvr_datablock>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 80be 	beq.w	80066fa <USER_SPI_ioctl+0x2c6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800657e:	2330      	movs	r3, #48	@ 0x30
 8006580:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006584:	e007      	b.n	8006596 <USER_SPI_ioctl+0x162>
 8006586:	20ff      	movs	r0, #255	@ 0xff
 8006588:	f7ff fc12 	bl	8005db0 <xchg_spi>
 800658c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006590:	3b01      	subs	r3, #1
 8006592:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006596:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1f3      	bne.n	8006586 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800659e:	7dbb      	ldrb	r3, [r7, #22]
 80065a0:	091b      	lsrs	r3, r3, #4
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	461a      	mov	r2, r3
 80065a6:	2310      	movs	r3, #16
 80065a8:	fa03 f202 	lsl.w	r2, r3, r2
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80065b0:	2300      	movs	r3, #0
 80065b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80065b6:	e0a0      	b.n	80066fa <USER_SPI_ioctl+0x2c6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80065b8:	2100      	movs	r1, #0
 80065ba:	2009      	movs	r0, #9
 80065bc:	f7ff fce9 	bl	8005f92 <send_cmd>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f040 8099 	bne.w	80066fa <USER_SPI_ioctl+0x2c6>
 80065c8:	f107 030c 	add.w	r3, r7, #12
 80065cc:	2110      	movs	r1, #16
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7ff fc84 	bl	8005edc <rcvr_datablock>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f000 808f 	beq.w	80066fa <USER_SPI_ioctl+0x2c6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80065dc:	4b50      	ldr	r3, [pc, #320]	@ (8006720 <USER_SPI_ioctl+0x2ec>)
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d012      	beq.n	800660e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80065e8:	7dbb      	ldrb	r3, [r7, #22]
 80065ea:	005b      	lsls	r3, r3, #1
 80065ec:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80065f0:	7dfa      	ldrb	r2, [r7, #23]
 80065f2:	09d2      	lsrs	r2, r2, #7
 80065f4:	b2d2      	uxtb	r2, r2
 80065f6:	4413      	add	r3, r2
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	7e7b      	ldrb	r3, [r7, #25]
 80065fc:	099b      	lsrs	r3, r3, #6
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	3b01      	subs	r3, #1
 8006602:	fa02 f303 	lsl.w	r3, r2, r3
 8006606:	461a      	mov	r2, r3
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	601a      	str	r2, [r3, #0]
 800660c:	e013      	b.n	8006636 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800660e:	7dbb      	ldrb	r3, [r7, #22]
 8006610:	109b      	asrs	r3, r3, #2
 8006612:	b29b      	uxth	r3, r3
 8006614:	f003 031f 	and.w	r3, r3, #31
 8006618:	3301      	adds	r3, #1
 800661a:	7dfa      	ldrb	r2, [r7, #23]
 800661c:	00d2      	lsls	r2, r2, #3
 800661e:	f002 0218 	and.w	r2, r2, #24
 8006622:	7df9      	ldrb	r1, [r7, #23]
 8006624:	0949      	lsrs	r1, r1, #5
 8006626:	b2c9      	uxtb	r1, r1
 8006628:	440a      	add	r2, r1
 800662a:	3201      	adds	r2, #1
 800662c:	fb02 f303 	mul.w	r3, r2, r3
 8006630:	461a      	mov	r2, r3
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800663c:	e05d      	b.n	80066fa <USER_SPI_ioctl+0x2c6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800663e:	4b38      	ldr	r3, [pc, #224]	@ (8006720 <USER_SPI_ioctl+0x2ec>)
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	f003 0306 	and.w	r3, r3, #6
 8006646:	2b00      	cmp	r3, #0
 8006648:	d059      	beq.n	80066fe <USER_SPI_ioctl+0x2ca>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800664a:	f107 020c 	add.w	r2, r7, #12
 800664e:	79fb      	ldrb	r3, [r7, #7]
 8006650:	210b      	movs	r1, #11
 8006652:	4618      	mov	r0, r3
 8006654:	f7ff feee 	bl	8006434 <USER_SPI_ioctl>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d151      	bne.n	8006702 <USER_SPI_ioctl+0x2ce>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800665e:	7b3b      	ldrb	r3, [r7, #12]
 8006660:	099b      	lsrs	r3, r3, #6
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b00      	cmp	r3, #0
 8006666:	d104      	bne.n	8006672 <USER_SPI_ioctl+0x23e>
 8006668:	7dbb      	ldrb	r3, [r7, #22]
 800666a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800666e:	2b00      	cmp	r3, #0
 8006670:	d049      	beq.n	8006706 <USER_SPI_ioctl+0x2d2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	623b      	str	r3, [r7, #32]
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8006682:	4b27      	ldr	r3, [pc, #156]	@ (8006720 <USER_SPI_ioctl+0x2ec>)
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	f003 0308 	and.w	r3, r3, #8
 800668a:	2b00      	cmp	r3, #0
 800668c:	d105      	bne.n	800669a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800668e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006690:	025b      	lsls	r3, r3, #9
 8006692:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006696:	025b      	lsls	r3, r3, #9
 8006698:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800669a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800669c:	2020      	movs	r0, #32
 800669e:	f7ff fc78 	bl	8005f92 <send_cmd>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d130      	bne.n	800670a <USER_SPI_ioctl+0x2d6>
 80066a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80066aa:	2021      	movs	r0, #33	@ 0x21
 80066ac:	f7ff fc71 	bl	8005f92 <send_cmd>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d129      	bne.n	800670a <USER_SPI_ioctl+0x2d6>
 80066b6:	2100      	movs	r1, #0
 80066b8:	2026      	movs	r0, #38	@ 0x26
 80066ba:	f7ff fc6a 	bl	8005f92 <send_cmd>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d122      	bne.n	800670a <USER_SPI_ioctl+0x2d6>
 80066c4:	f247 5030 	movw	r0, #30000	@ 0x7530
 80066c8:	f7ff fbb8 	bl	8005e3c <wait_ready>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d01b      	beq.n	800670a <USER_SPI_ioctl+0x2d6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80066d2:	2300      	movs	r3, #0
 80066d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80066d8:	e017      	b.n	800670a <USER_SPI_ioctl+0x2d6>
	case GET_SECTOR_SIZE:
	    *(WORD*)buff = 512;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066e0:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	    break;
 80066e8:	e010      	b.n	800670c <USER_SPI_ioctl+0x2d8>
	default:
		res = RES_PARERR;
 80066ea:	2304      	movs	r3, #4
 80066ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80066f0:	e00c      	b.n	800670c <USER_SPI_ioctl+0x2d8>
		break;
 80066f2:	bf00      	nop
 80066f4:	e00a      	b.n	800670c <USER_SPI_ioctl+0x2d8>
		break;
 80066f6:	bf00      	nop
 80066f8:	e008      	b.n	800670c <USER_SPI_ioctl+0x2d8>
		break;
 80066fa:	bf00      	nop
 80066fc:	e006      	b.n	800670c <USER_SPI_ioctl+0x2d8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80066fe:	bf00      	nop
 8006700:	e004      	b.n	800670c <USER_SPI_ioctl+0x2d8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006702:	bf00      	nop
 8006704:	e002      	b.n	800670c <USER_SPI_ioctl+0x2d8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006706:	bf00      	nop
 8006708:	e000      	b.n	800670c <USER_SPI_ioctl+0x2d8>
		break;
 800670a:	bf00      	nop
	}

	despiselect();
 800670c:	f7ff fbba 	bl	8005e84 <despiselect>

	return res;
 8006710:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006714:	4618      	mov	r0, r3
 8006716:	3730      	adds	r7, #48	@ 0x30
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	20000020 	.word	0x20000020
 8006720:	20000330 	.word	0x20000330

08006724 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8006730:	f44f 7021 	mov.w	r0, #644	@ 0x284
 8006734:	f006 fc76 	bl	800d024 <USBD_static_malloc>
 8006738:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d109      	bne.n	8006754 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	32b0      	adds	r2, #176	@ 0xb0
 800674a:	2100      	movs	r1, #0
 800674c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006750:	2302      	movs	r3, #2
 8006752:	e06e      	b.n	8006832 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	32b0      	adds	r2, #176	@ 0xb0
 800675e:	68f9      	ldr	r1, [r7, #12]
 8006760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	32b0      	adds	r2, #176	@ 0xb0
 800676e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	7c1b      	ldrb	r3, [r3, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d12b      	bne.n	80067d8 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006780:	4b2e      	ldr	r3, [pc, #184]	@ (800683c <USBD_MSC_Init+0x118>)
 8006782:	7819      	ldrb	r1, [r3, #0]
 8006784:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006788:	2202      	movs	r2, #2
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f006 fb07 	bl	800cd9e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8006790:	4b2a      	ldr	r3, [pc, #168]	@ (800683c <USBD_MSC_Init+0x118>)
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	f003 020f 	and.w	r2, r3, #15
 8006798:	6879      	ldr	r1, [r7, #4]
 800679a:	4613      	mov	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	440b      	add	r3, r1
 80067a4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80067a8:	2201      	movs	r2, #1
 80067aa:	701a      	strb	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80067ac:	4b24      	ldr	r3, [pc, #144]	@ (8006840 <USBD_MSC_Init+0x11c>)
 80067ae:	7819      	ldrb	r1, [r3, #0]
 80067b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80067b4:	2202      	movs	r2, #2
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f006 faf1 	bl	800cd9e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 80067bc:	4b20      	ldr	r3, [pc, #128]	@ (8006840 <USBD_MSC_Init+0x11c>)
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	f003 020f 	and.w	r2, r3, #15
 80067c4:	6879      	ldr	r1, [r7, #4]
 80067c6:	4613      	mov	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	440b      	add	r3, r1
 80067d0:	3323      	adds	r3, #35	@ 0x23
 80067d2:	2201      	movs	r2, #1
 80067d4:	701a      	strb	r2, [r3, #0]
 80067d6:	e028      	b.n	800682a <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80067d8:	4b18      	ldr	r3, [pc, #96]	@ (800683c <USBD_MSC_Init+0x118>)
 80067da:	7819      	ldrb	r1, [r3, #0]
 80067dc:	2340      	movs	r3, #64	@ 0x40
 80067de:	2202      	movs	r2, #2
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f006 fadc 	bl	800cd9e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 80067e6:	4b15      	ldr	r3, [pc, #84]	@ (800683c <USBD_MSC_Init+0x118>)
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	f003 020f 	and.w	r2, r3, #15
 80067ee:	6879      	ldr	r1, [r7, #4]
 80067f0:	4613      	mov	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	440b      	add	r3, r1
 80067fa:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80067fe:	2201      	movs	r2, #1
 8006800:	701a      	strb	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006802:	4b0f      	ldr	r3, [pc, #60]	@ (8006840 <USBD_MSC_Init+0x11c>)
 8006804:	7819      	ldrb	r1, [r3, #0]
 8006806:	2340      	movs	r3, #64	@ 0x40
 8006808:	2202      	movs	r2, #2
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f006 fac7 	bl	800cd9e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8006810:	4b0b      	ldr	r3, [pc, #44]	@ (8006840 <USBD_MSC_Init+0x11c>)
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	f003 020f 	and.w	r2, r3, #15
 8006818:	6879      	ldr	r1, [r7, #4]
 800681a:	4613      	mov	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4413      	add	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	440b      	add	r3, r1
 8006824:	3323      	adds	r3, #35	@ 0x23
 8006826:	2201      	movs	r2, #1
 8006828:	701a      	strb	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fa30 	bl	8006c90 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	20000087 	.word	0x20000087
 8006840:	20000086 	.word	0x20000086

08006844 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	460b      	mov	r3, r1
 800684e:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8006850:	4b26      	ldr	r3, [pc, #152]	@ (80068ec <USBD_MSC_DeInit+0xa8>)
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	4619      	mov	r1, r3
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f006 fac7 	bl	800cdea <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800685c:	4b23      	ldr	r3, [pc, #140]	@ (80068ec <USBD_MSC_DeInit+0xa8>)
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	f003 020f 	and.w	r2, r3, #15
 8006864:	6879      	ldr	r1, [r7, #4]
 8006866:	4613      	mov	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	440b      	add	r3, r1
 8006870:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006874:	2200      	movs	r2, #0
 8006876:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8006878:	4b1d      	ldr	r3, [pc, #116]	@ (80068f0 <USBD_MSC_DeInit+0xac>)
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	4619      	mov	r1, r3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f006 fab3 	bl	800cdea <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8006884:	4b1a      	ldr	r3, [pc, #104]	@ (80068f0 <USBD_MSC_DeInit+0xac>)
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	f003 020f 	and.w	r2, r3, #15
 800688c:	6879      	ldr	r1, [r7, #4]
 800688e:	4613      	mov	r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4413      	add	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	440b      	add	r3, r1
 8006898:	3323      	adds	r3, #35	@ 0x23
 800689a:	2200      	movs	r2, #0
 800689c:	701a      	strb	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	32b0      	adds	r2, #176	@ 0xb0
 80068a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d018      	beq.n	80068e2 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fa6b 	bl	8006d8c <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	32b0      	adds	r2, #176	@ 0xb0
 80068c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c4:	4618      	mov	r0, r3
 80068c6:	f006 fbbb 	bl	800d040 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	32b0      	adds	r2, #176	@ 0xb0
 80068d4:	2100      	movs	r1, #0
 80068d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	20000087 	.word	0x20000087
 80068f0:	20000086 	.word	0x20000086

080068f4 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	32b0      	adds	r2, #176	@ 0xb0
 8006908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800690c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800690e:	2300      	movs	r3, #0
 8006910:	75fb      	strb	r3, [r7, #23]
  uint32_t max_lun;
  uint16_t status_info = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	817b      	strh	r3, [r7, #10]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800691c:	2303      	movs	r3, #3
 800691e:	e0e5      	b.n	8006aec <USBD_MSC_Setup+0x1f8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006928:	2b00      	cmp	r3, #0
 800692a:	d058      	beq.n	80069de <USBD_MSC_Setup+0xea>
 800692c:	2b20      	cmp	r3, #32
 800692e:	f040 80d5 	bne.w	8006adc <USBD_MSC_Setup+0x1e8>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	785b      	ldrb	r3, [r3, #1]
 8006936:	2bfe      	cmp	r3, #254	@ 0xfe
 8006938:	d002      	beq.n	8006940 <USBD_MSC_Setup+0x4c>
 800693a:	2bff      	cmp	r3, #255	@ 0xff
 800693c:	d02f      	beq.n	800699e <USBD_MSC_Setup+0xaa>
 800693e:	e046      	b.n	80069ce <USBD_MSC_Setup+0xda>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	885b      	ldrh	r3, [r3, #2]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d123      	bne.n	8006990 <USBD_MSC_Setup+0x9c>
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	88db      	ldrh	r3, [r3, #6]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d11f      	bne.n	8006990 <USBD_MSC_Setup+0x9c>
              ((req->bmRequest & 0x80U) == 0x80U))
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006956:	2b00      	cmp	r3, #0
 8006958:	da1a      	bge.n	8006990 <USBD_MSC_Setup+0x9c>
          {
            max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	33b0      	adds	r3, #176	@ 0xb0
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	4798      	blx	r3
 800696e:	4603      	mov	r3, r0
 8006970:	60fb      	str	r3, [r7, #12]
            hmsc->max_lun = (max_lun > MSC_BOT_MAX_LUN) ? MSC_BOT_MAX_LUN : max_lun;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2b02      	cmp	r3, #2
 8006976:	bf28      	it	cs
 8006978:	2302      	movcs	r3, #2
 800697a:	461a      	mov	r2, r3
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	2201      	movs	r2, #1
 8006984:	4619      	mov	r1, r3
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f003 fa0a 	bl	8009da0 <USBD_CtlSendData>
 800698c:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800698e:	e025      	b.n	80069dc <USBD_MSC_Setup+0xe8>
            USBD_CtlError(pdev, req);
 8006990:	6839      	ldr	r1, [r7, #0]
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f003 f987 	bl	8009ca6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006998:	2303      	movs	r3, #3
 800699a:	75fb      	strb	r3, [r7, #23]
          break;
 800699c:	e01e      	b.n	80069dc <USBD_MSC_Setup+0xe8>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	885b      	ldrh	r3, [r3, #2]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10c      	bne.n	80069c0 <USBD_MSC_Setup+0xcc>
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	88db      	ldrh	r3, [r3, #6]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d108      	bne.n	80069c0 <USBD_MSC_Setup+0xcc>
              ((req->bmRequest & 0x80U) != 0x80U))
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	db03      	blt.n	80069c0 <USBD_MSC_Setup+0xcc>
          {
            MSC_BOT_Reset(pdev);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f9b3 	bl	8006d24 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069be:	e00d      	b.n	80069dc <USBD_MSC_Setup+0xe8>
            USBD_CtlError(pdev, req);
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f003 f96f 	bl	8009ca6 <USBD_CtlError>
            ret = USBD_FAIL;
 80069c8:	2303      	movs	r3, #3
 80069ca:	75fb      	strb	r3, [r7, #23]
          break;
 80069cc:	e006      	b.n	80069dc <USBD_MSC_Setup+0xe8>

        default:
          USBD_CtlError(pdev, req);
 80069ce:	6839      	ldr	r1, [r7, #0]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f003 f968 	bl	8009ca6 <USBD_CtlError>
          ret = USBD_FAIL;
 80069d6:	2303      	movs	r3, #3
 80069d8:	75fb      	strb	r3, [r7, #23]
          break;
 80069da:	bf00      	nop
      }
      break;
 80069dc:	e085      	b.n	8006aea <USBD_MSC_Setup+0x1f6>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	785b      	ldrb	r3, [r3, #1]
 80069e2:	2b0b      	cmp	r3, #11
 80069e4:	d871      	bhi.n	8006aca <USBD_MSC_Setup+0x1d6>
 80069e6:	a201      	add	r2, pc, #4	@ (adr r2, 80069ec <USBD_MSC_Setup+0xf8>)
 80069e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ec:	08006a1d 	.word	0x08006a1d
 80069f0:	08006a99 	.word	0x08006a99
 80069f4:	08006acb 	.word	0x08006acb
 80069f8:	08006acb 	.word	0x08006acb
 80069fc:	08006acb 	.word	0x08006acb
 8006a00:	08006acb 	.word	0x08006acb
 8006a04:	08006acb 	.word	0x08006acb
 8006a08:	08006acb 	.word	0x08006acb
 8006a0c:	08006acb 	.word	0x08006acb
 8006a10:	08006acb 	.word	0x08006acb
 8006a14:	08006a47 	.word	0x08006a47
 8006a18:	08006a71 	.word	0x08006a71
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b03      	cmp	r3, #3
 8006a26:	d107      	bne.n	8006a38 <USBD_MSC_Setup+0x144>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a28:	f107 030a 	add.w	r3, r7, #10
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f003 f9b5 	bl	8009da0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a36:	e050      	b.n	8006ada <USBD_MSC_Setup+0x1e6>
            USBD_CtlError(pdev, req);
 8006a38:	6839      	ldr	r1, [r7, #0]
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f003 f933 	bl	8009ca6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a40:	2303      	movs	r3, #3
 8006a42:	75fb      	strb	r3, [r7, #23]
          break;
 8006a44:	e049      	b.n	8006ada <USBD_MSC_Setup+0x1e6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b03      	cmp	r3, #3
 8006a50:	d107      	bne.n	8006a62 <USBD_MSC_Setup+0x16e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	3304      	adds	r3, #4
 8006a56:	2201      	movs	r2, #1
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f003 f9a0 	bl	8009da0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a60:	e03b      	b.n	8006ada <USBD_MSC_Setup+0x1e6>
            USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f003 f91e 	bl	8009ca6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a6e:	e034      	b.n	8006ada <USBD_MSC_Setup+0x1e6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	2b03      	cmp	r3, #3
 8006a7a:	d106      	bne.n	8006a8a <USBD_MSC_Setup+0x196>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	885b      	ldrh	r3, [r3, #2]
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	461a      	mov	r2, r3
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a88:	e027      	b.n	8006ada <USBD_MSC_Setup+0x1e6>
            USBD_CtlError(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f003 f90a 	bl	8009ca6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a92:	2303      	movs	r3, #3
 8006a94:	75fb      	strb	r3, [r7, #23]
          break;
 8006a96:	e020      	b.n	8006ada <USBD_MSC_Setup+0x1e6>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	d119      	bne.n	8006ad8 <USBD_MSC_Setup+0x1e4>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	885b      	ldrh	r3, [r3, #2]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d115      	bne.n	8006ad8 <USBD_MSC_Setup+0x1e4>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	889b      	ldrh	r3, [r3, #4]
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f006 f9b7 	bl	800ce28 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	889b      	ldrh	r3, [r3, #4]
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fb30 	bl	8007128 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8006ac8:	e006      	b.n	8006ad8 <USBD_MSC_Setup+0x1e4>

        default:
          USBD_CtlError(pdev, req);
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f003 f8ea 	bl	8009ca6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ad6:	e000      	b.n	8006ada <USBD_MSC_Setup+0x1e6>
          break;
 8006ad8:	bf00      	nop
      }
      break;
 8006ada:	e006      	b.n	8006aea <USBD_MSC_Setup+0x1f6>

    default:
      USBD_CtlError(pdev, req);
 8006adc:	6839      	ldr	r1, [r7, #0]
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f003 f8e1 	bl	8009ca6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ae8:	bf00      	nop
  }

  return (uint8_t)ret;
 8006aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3718      	adds	r7, #24
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	460b      	mov	r3, r1
 8006afe:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8006b00:	78fb      	ldrb	r3, [r7, #3]
 8006b02:	4619      	mov	r1, r3
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f959 	bl	8006dbc <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8006b20:	78fb      	ldrb	r3, [r7, #3]
 8006b22:	4619      	mov	r1, r3
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 f983 	bl	8006e30 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8006b3c:	2181      	movs	r1, #129	@ 0x81
 8006b3e:	4812      	ldr	r0, [pc, #72]	@ (8006b88 <USBD_MSC_GetHSCfgDesc+0x54>)
 8006b40:	f002 fa79 	bl	8009036 <USBD_GetEpDesc>
 8006b44:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8006b46:	2101      	movs	r1, #1
 8006b48:	480f      	ldr	r0, [pc, #60]	@ (8006b88 <USBD_MSC_GetHSCfgDesc+0x54>)
 8006b4a:	f002 fa74 	bl	8009036 <USBD_GetEpDesc>
 8006b4e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d006      	beq.n	8006b64 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	711a      	strb	r2, [r3, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f042 0202 	orr.w	r2, r2, #2
 8006b62:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d006      	beq.n	8006b78 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	711a      	strb	r2, [r3, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f042 0202 	orr.w	r2, r2, #2
 8006b76:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8006b7e:	4b02      	ldr	r3, [pc, #8]	@ (8006b88 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	2000005c 	.word	0x2000005c

08006b8c <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8006b94:	2181      	movs	r1, #129	@ 0x81
 8006b96:	4812      	ldr	r0, [pc, #72]	@ (8006be0 <USBD_MSC_GetFSCfgDesc+0x54>)
 8006b98:	f002 fa4d 	bl	8009036 <USBD_GetEpDesc>
 8006b9c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8006b9e:	2101      	movs	r1, #1
 8006ba0:	480f      	ldr	r0, [pc, #60]	@ (8006be0 <USBD_MSC_GetFSCfgDesc+0x54>)
 8006ba2:	f002 fa48 	bl	8009036 <USBD_GetEpDesc>
 8006ba6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d006      	beq.n	8006bbc <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bb6:	711a      	strb	r2, [r3, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d006      	beq.n	8006bd0 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bca:	711a      	strb	r2, [r3, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8006bd6:	4b02      	ldr	r3, [pc, #8]	@ (8006be0 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	2000005c 	.word	0x2000005c

08006be4 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8006bec:	2181      	movs	r1, #129	@ 0x81
 8006bee:	4812      	ldr	r0, [pc, #72]	@ (8006c38 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8006bf0:	f002 fa21 	bl	8009036 <USBD_GetEpDesc>
 8006bf4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	480f      	ldr	r0, [pc, #60]	@ (8006c38 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8006bfa:	f002 fa1c 	bl	8009036 <USBD_GetEpDesc>
 8006bfe:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d006      	beq.n	8006c14 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c0e:	711a      	strb	r2, [r3, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d006      	beq.n	8006c28 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c22:	711a      	strb	r2, [r3, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8006c2e:	4b02      	ldr	r3, [pc, #8]	@ (8006c38 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	2000005c 	.word	0x2000005c

08006c3c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	220a      	movs	r2, #10
 8006c48:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8006c4a:	4b03      	ldr	r3, [pc, #12]	@ (8006c58 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	2000007c 	.word	0x2000007c

08006c5c <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d101      	bne.n	8006c70 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e009      	b.n	8006c84 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	33b0      	adds	r3, #176	@ 0xb0
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	32b0      	adds	r2, #176	@ 0xb0
 8006ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d032      	beq.n	8006d14 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	33b0      	adds	r3, #176	@ 0xb0
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4413      	add	r3, r2
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8006ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8006d1c <MSC_BOT_Init+0x8c>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	4619      	mov	r1, r3
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f006 f89a 	bl	800ce28 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8006cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8006d20 <MSC_BOT_Init+0x90>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f006 f894 	bl	800ce28 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8006d00:	4b06      	ldr	r3, [pc, #24]	@ (8006d1c <MSC_BOT_Init+0x8c>)
 8006d02:	7819      	ldrb	r1, [r3, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8006d0a:	231f      	movs	r3, #31
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f006 f954 	bl	800cfba <USBD_LL_PrepareReceive>
 8006d12:	e000      	b.n	8006d16 <MSC_BOT_Init+0x86>
    return;
 8006d14:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	20000087 	.word	0x20000087
 8006d20:	20000086 	.word	0x20000086

08006d24 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	32b0      	adds	r2, #176	@ 0xb0
 8006d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d3a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d01b      	beq.n	8006d7a <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8006d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d84 <MSC_BOT_Reset+0x60>)
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	4619      	mov	r1, r3
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f006 f8a5 	bl	800cea4 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8006d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8006d88 <MSC_BOT_Reset+0x64>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f006 f89f 	bl	800cea4 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8006d66:	4b08      	ldr	r3, [pc, #32]	@ (8006d88 <MSC_BOT_Reset+0x64>)
 8006d68:	7819      	ldrb	r1, [r3, #0]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8006d70:	231f      	movs	r3, #31
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f006 f921 	bl	800cfba <USBD_LL_PrepareReceive>
 8006d78:	e000      	b.n	8006d7c <MSC_BOT_Reset+0x58>
    return;
 8006d7a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	20000086 	.word	0x20000086
 8006d88:	20000087 	.word	0x20000087

08006d8c <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	32b0      	adds	r2, #176	@ 0xb0
 8006d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da2:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d002      	beq.n	8006db0 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	721a      	strb	r2, [r3, #8]
  }
}
 8006db0:	bf00      	nop
 8006db2:	3714      	adds	r7, #20
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	32b0      	adds	r2, #176	@ 0xb0
 8006dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d020      	beq.n	8006e20 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	7a1b      	ldrb	r3, [r3, #8]
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d005      	beq.n	8006df2 <MSC_BOT_DataIn+0x36>
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	db1c      	blt.n	8006e24 <MSC_BOT_DataIn+0x68>
 8006dea:	3b03      	subs	r3, #3
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d819      	bhi.n	8006e24 <MSC_BOT_DataIn+0x68>
 8006df0:	e011      	b.n	8006e16 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8006dfe:	461a      	mov	r2, r3
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f9cb 	bl	800719c <SCSI_ProcessCmd>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	da0d      	bge.n	8006e28 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f90e 	bl	8007030 <MSC_BOT_SendCSW>
      }
      break;
 8006e14:	e008      	b.n	8006e28 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006e16:	2100      	movs	r1, #0
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f909 	bl	8007030 <MSC_BOT_SendCSW>
      break;
 8006e1e:	e004      	b.n	8006e2a <MSC_BOT_DataIn+0x6e>
    return;
 8006e20:	bf00      	nop
 8006e22:	e002      	b.n	8006e2a <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8006e24:	bf00      	nop
 8006e26:	e000      	b.n	8006e2a <MSC_BOT_DataIn+0x6e>
      break;
 8006e28:	bf00      	nop
  }
}
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	460b      	mov	r3, r1
 8006e3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	32b0      	adds	r2, #176	@ 0xb0
 8006e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d01c      	beq.n	8006e8c <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	7a1b      	ldrb	r3, [r3, #8]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <MSC_BOT_DataOut+0x30>
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d004      	beq.n	8006e68 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8006e5e:	e018      	b.n	8006e92 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f819 	bl	8006e98 <MSC_BOT_CBW_Decode>
      break;
 8006e66:	e014      	b.n	8006e92 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8006e74:	461a      	mov	r2, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f990 	bl	800719c <SCSI_ProcessCmd>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	da06      	bge.n	8006e90 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006e82:	2101      	movs	r1, #1
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f8d3 	bl	8007030 <MSC_BOT_SendCSW>
      break;
 8006e8a:	e001      	b.n	8006e90 <MSC_BOT_DataOut+0x60>
    return;
 8006e8c:	bf00      	nop
 8006e8e:	e000      	b.n	8006e92 <MSC_BOT_DataOut+0x62>
      break;
 8006e90:	bf00      	nop
  }
}
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	32b0      	adds	r2, #176	@ 0xb0
 8006eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eae:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d07c      	beq.n	8006fb0 <MSC_BOT_CBW_Decode+0x118>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8006ece:	4b3b      	ldr	r3, [pc, #236]	@ (8006fbc <MSC_BOT_CBW_Decode+0x124>)
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f006 f891 	bl	800cffc <USBD_LL_GetRxDataSize>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b1f      	cmp	r3, #31
 8006ede:	d117      	bne.n	8006f10 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8006ee6:	4a36      	ldr	r2, [pc, #216]	@ (8006fc0 <MSC_BOT_CBW_Decode+0x128>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d111      	bne.n	8006f10 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bLUN > hmsc->max_lun) || (hmsc->cbw.bCBLength < 1U) ||
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d809      	bhi.n	8006f10 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bLUN > hmsc->max_lun) || (hmsc->cbw.bCBLength < 1U) ||
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d004      	beq.n	8006f10 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bCBLength > 16U))
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
      (hmsc->cbw.bLUN > hmsc->max_lun) || (hmsc->cbw.bCBLength < 1U) ||
 8006f0c:	2b10      	cmp	r3, #16
 8006f0e:	d90e      	bls.n	8006f2e <MSC_BOT_CBW_Decode+0x96>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006f16:	2320      	movs	r3, #32
 8006f18:	2205      	movs	r2, #5
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fe85 	bl	8007c2a <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2202      	movs	r2, #2
 8006f24:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f8bc 	bl	80070a4 <MSC_BOT_Abort>
 8006f2c:	e043      	b.n	8006fb6 <MSC_BOT_CBW_Decode+0x11e>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f92d 	bl	800719c <SCSI_ProcessCmd>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	da0c      	bge.n	8006f62 <MSC_BOT_CBW_Decode+0xca>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	7a1b      	ldrb	r3, [r3, #8]
 8006f4c:	2b05      	cmp	r3, #5
 8006f4e:	d104      	bne.n	8006f5a <MSC_BOT_CBW_Decode+0xc2>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006f50:	2101      	movs	r1, #1
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f86c 	bl	8007030 <MSC_BOT_SendCSW>
 8006f58:	e02d      	b.n	8006fb6 <MSC_BOT_CBW_Decode+0x11e>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f8a2 	bl	80070a4 <MSC_BOT_Abort>
 8006f60:	e029      	b.n	8006fb6 <MSC_BOT_CBW_Decode+0x11e>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	7a1b      	ldrb	r3, [r3, #8]
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d024      	beq.n	8006fb4 <MSC_BOT_CBW_Decode+0x11c>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d020      	beq.n	8006fb4 <MSC_BOT_CBW_Decode+0x11c>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	d01c      	beq.n	8006fb4 <MSC_BOT_CBW_Decode+0x11c>
    {
      if (hmsc->bot_data_length > 0U)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d009      	beq.n	8006f96 <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f103 0110 	add.w	r1, r3, #16
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f818 	bl	8006fc4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8006f94:	e00f      	b.n	8006fb6 <MSC_BOT_CBW_Decode+0x11e>
      }
      else if (hmsc->bot_data_length == 0U)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d104      	bne.n	8006fa8 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f845 	bl	8007030 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8006fa6:	e006      	b.n	8006fb6 <MSC_BOT_CBW_Decode+0x11e>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 f87b 	bl	80070a4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8006fae:	e002      	b.n	8006fb6 <MSC_BOT_CBW_Decode+0x11e>
    return;
 8006fb0:	bf00      	nop
 8006fb2:	e000      	b.n	8006fb6 <MSC_BOT_CBW_Decode+0x11e>
      }
    }
    else
    {
      return;
 8006fb4:	bf00      	nop
    }
  }
}
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	20000087 	.word	0x20000087
 8006fc0:	43425355 	.word	0x43425355

08006fc4 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	32b0      	adds	r2, #176	@ 0xb0
 8006fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fde:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d01e      	beq.n	8007024 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	bf28      	it	cs
 8006ff2:	4613      	movcs	r3, r2
 8006ff4:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	1ad2      	subs	r2, r2, r3
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	2204      	movs	r2, #4
 8007012:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8007014:	4b05      	ldr	r3, [pc, #20]	@ (800702c <MSC_BOT_SendData+0x68>)
 8007016:	7819      	ldrb	r1, [r3, #0]
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f005 ffab 	bl	800cf78 <USBD_LL_Transmit>
 8007022:	e000      	b.n	8007026 <MSC_BOT_SendData+0x62>
    return;
 8007024:	bf00      	nop
}
 8007026:	3718      	adds	r7, #24
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	20000086 	.word	0x20000086

08007030 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	460b      	mov	r3, r1
 800703a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	32b0      	adds	r2, #176	@ 0xb0
 8007046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800704a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d01d      	beq.n	800708e <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	4a10      	ldr	r2, [pc, #64]	@ (8007098 <MSC_BOT_SendCSW+0x68>)
 8007056:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	78fa      	ldrb	r2, [r7, #3]
 800705e:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8007068:	4b0c      	ldr	r3, [pc, #48]	@ (800709c <MSC_BOT_SendCSW+0x6c>)
 800706a:	7819      	ldrb	r1, [r3, #0]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 8007072:	230d      	movs	r3, #13
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f005 ff7f 	bl	800cf78 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800707a:	4b09      	ldr	r3, [pc, #36]	@ (80070a0 <MSC_BOT_SendCSW+0x70>)
 800707c:	7819      	ldrb	r1, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8007084:	231f      	movs	r3, #31
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f005 ff97 	bl	800cfba <USBD_LL_PrepareReceive>
 800708c:	e000      	b.n	8007090 <MSC_BOT_SendCSW+0x60>
    return;
 800708e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	53425355 	.word	0x53425355
 800709c:	20000086 	.word	0x20000086
 80070a0:	20000087 	.word	0x20000087

080070a4 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	32b0      	adds	r2, #176	@ 0xb0
 80070b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ba:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d02a      	beq.n	8007118 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10e      	bne.n	80070ea <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d009      	beq.n	80070ea <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d105      	bne.n	80070ea <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80070de:	4b10      	ldr	r3, [pc, #64]	@ (8007120 <MSC_BOT_Abort+0x7c>)
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f005 febe 	bl	800ce66 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80070ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007124 <MSC_BOT_Abort+0x80>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	4619      	mov	r1, r3
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f005 feb8 	bl	800ce66 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	7a5b      	ldrb	r3, [r3, #9]
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d10d      	bne.n	800711a <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80070fe:	4b09      	ldr	r3, [pc, #36]	@ (8007124 <MSC_BOT_Abort+0x80>)
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	4619      	mov	r1, r3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f005 feae 	bl	800ce66 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800710a:	4b05      	ldr	r3, [pc, #20]	@ (8007120 <MSC_BOT_Abort+0x7c>)
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	4619      	mov	r1, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f005 fea8 	bl	800ce66 <USBD_LL_StallEP>
 8007116:	e000      	b.n	800711a <MSC_BOT_Abort+0x76>
    return;
 8007118:	bf00      	nop
  }
}
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	20000087 	.word	0x20000087
 8007124:	20000086 	.word	0x20000086

08007128 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	460b      	mov	r3, r1
 8007132:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	32b0      	adds	r2, #176	@ 0xb0
 800713e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007142:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d01d      	beq.n	8007186 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	7a5b      	ldrb	r3, [r3, #9]
 800714e:	2b02      	cmp	r3, #2
 8007150:	d10c      	bne.n	800716c <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8007152:	4b10      	ldr	r3, [pc, #64]	@ (8007194 <MSC_BOT_CplClrFeature+0x6c>)
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	4619      	mov	r1, r3
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f005 fe84 	bl	800ce66 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800715e:	4b0e      	ldr	r3, [pc, #56]	@ (8007198 <MSC_BOT_CplClrFeature+0x70>)
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	4619      	mov	r1, r3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f005 fe7e 	bl	800ce66 <USBD_LL_StallEP>
 800716a:	e00f      	b.n	800718c <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800716c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007170:	2b00      	cmp	r3, #0
 8007172:	da0a      	bge.n	800718a <MSC_BOT_CplClrFeature+0x62>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	7a5b      	ldrb	r3, [r3, #9]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d006      	beq.n	800718a <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800717c:	2101      	movs	r1, #1
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7ff ff56 	bl	8007030 <MSC_BOT_SendCSW>
 8007184:	e002      	b.n	800718c <MSC_BOT_CplClrFeature+0x64>
    return;
 8007186:	bf00      	nop
 8007188:	e000      	b.n	800718c <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800718a:	bf00      	nop
  }
}
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	20000086 	.word	0x20000086
 8007198:	20000087 	.word	0x20000087

0800719c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	460b      	mov	r3, r1
 80071a6:	607a      	str	r2, [r7, #4]
 80071a8:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	32b0      	adds	r2, #176	@ 0xb0
 80071b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d102      	bne.n	80071c6 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 80071c0:	f04f 33ff 	mov.w	r3, #4294967295
 80071c4:	e18f      	b.n	80074e6 <SCSI_ProcessCmd+0x34a>
  }

  switch (cmd[0])
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	2b5a      	cmp	r3, #90	@ 0x5a
 80071cc:	f300 80e0 	bgt.w	8007390 <SCSI_ProcessCmd+0x1f4>
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	da21      	bge.n	8007218 <SCSI_ProcessCmd+0x7c>
 80071d4:	e17c      	b.n	80074d0 <SCSI_ProcessCmd+0x334>
 80071d6:	3b9e      	subs	r3, #158	@ 0x9e
 80071d8:	2b0c      	cmp	r3, #12
 80071da:	f200 8179 	bhi.w	80074d0 <SCSI_ProcessCmd+0x334>
 80071de:	a201      	add	r2, pc, #4	@ (adr r2, 80071e4 <SCSI_ProcessCmd+0x48>)
 80071e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e4:	08007441 	.word	0x08007441
 80071e8:	080074d1 	.word	0x080074d1
 80071ec:	080074ad 	.word	0x080074ad
 80071f0:	080074d1 	.word	0x080074d1
 80071f4:	080074d1 	.word	0x080074d1
 80071f8:	080074d1 	.word	0x080074d1
 80071fc:	080074d1 	.word	0x080074d1
 8007200:	080074d1 	.word	0x080074d1
 8007204:	080074d1 	.word	0x080074d1
 8007208:	080074d1 	.word	0x080074d1
 800720c:	08007465 	.word	0x08007465
 8007210:	080074d1 	.word	0x080074d1
 8007214:	08007489 	.word	0x08007489
 8007218:	2b5a      	cmp	r3, #90	@ 0x5a
 800721a:	f200 8159 	bhi.w	80074d0 <SCSI_ProcessCmd+0x334>
 800721e:	a201      	add	r2, pc, #4	@ (adr r2, 8007224 <SCSI_ProcessCmd+0x88>)
 8007220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007224:	0800739f 	.word	0x0800739f
 8007228:	080074d1 	.word	0x080074d1
 800722c:	080074d1 	.word	0x080074d1
 8007230:	080073b1 	.word	0x080073b1
 8007234:	080074d1 	.word	0x080074d1
 8007238:	080074d1 	.word	0x080074d1
 800723c:	080074d1 	.word	0x080074d1
 8007240:	080074d1 	.word	0x080074d1
 8007244:	080074d1 	.word	0x080074d1
 8007248:	080074d1 	.word	0x080074d1
 800724c:	080074d1 	.word	0x080074d1
 8007250:	080074d1 	.word	0x080074d1
 8007254:	080074d1 	.word	0x080074d1
 8007258:	080074d1 	.word	0x080074d1
 800725c:	080074d1 	.word	0x080074d1
 8007260:	080074d1 	.word	0x080074d1
 8007264:	080074d1 	.word	0x080074d1
 8007268:	080074d1 	.word	0x080074d1
 800726c:	080073c3 	.word	0x080073c3
 8007270:	080074d1 	.word	0x080074d1
 8007274:	080074d1 	.word	0x080074d1
 8007278:	080074d1 	.word	0x080074d1
 800727c:	080074d1 	.word	0x080074d1
 8007280:	080074d1 	.word	0x080074d1
 8007284:	080074d1 	.word	0x080074d1
 8007288:	080074d1 	.word	0x080074d1
 800728c:	080073f9 	.word	0x080073f9
 8007290:	080073d5 	.word	0x080073d5
 8007294:	080074bf 	.word	0x080074bf
 8007298:	080074d1 	.word	0x080074d1
 800729c:	080073e7 	.word	0x080073e7
 80072a0:	080074d1 	.word	0x080074d1
 80072a4:	080074d1 	.word	0x080074d1
 80072a8:	080074d1 	.word	0x080074d1
 80072ac:	080074d1 	.word	0x080074d1
 80072b0:	0800741d 	.word	0x0800741d
 80072b4:	080074d1 	.word	0x080074d1
 80072b8:	0800742f 	.word	0x0800742f
 80072bc:	080074d1 	.word	0x080074d1
 80072c0:	080074d1 	.word	0x080074d1
 80072c4:	08007453 	.word	0x08007453
 80072c8:	080074d1 	.word	0x080074d1
 80072cc:	08007477 	.word	0x08007477
 80072d0:	080074d1 	.word	0x080074d1
 80072d4:	080074d1 	.word	0x080074d1
 80072d8:	080074d1 	.word	0x080074d1
 80072dc:	080074d1 	.word	0x080074d1
 80072e0:	0800749b 	.word	0x0800749b
 80072e4:	080074d1 	.word	0x080074d1
 80072e8:	080074d1 	.word	0x080074d1
 80072ec:	080074d1 	.word	0x080074d1
 80072f0:	080074d1 	.word	0x080074d1
 80072f4:	080074d1 	.word	0x080074d1
 80072f8:	080074d1 	.word	0x080074d1
 80072fc:	080074d1 	.word	0x080074d1
 8007300:	080074d1 	.word	0x080074d1
 8007304:	080074d1 	.word	0x080074d1
 8007308:	080074d1 	.word	0x080074d1
 800730c:	080074d1 	.word	0x080074d1
 8007310:	080074d1 	.word	0x080074d1
 8007314:	080074d1 	.word	0x080074d1
 8007318:	080074d1 	.word	0x080074d1
 800731c:	080074d1 	.word	0x080074d1
 8007320:	080074d1 	.word	0x080074d1
 8007324:	080074d1 	.word	0x080074d1
 8007328:	080074d1 	.word	0x080074d1
 800732c:	080074d1 	.word	0x080074d1
 8007330:	080074d1 	.word	0x080074d1
 8007334:	080074d1 	.word	0x080074d1
 8007338:	080074d1 	.word	0x080074d1
 800733c:	080074d1 	.word	0x080074d1
 8007340:	080074d1 	.word	0x080074d1
 8007344:	080074d1 	.word	0x080074d1
 8007348:	080074d1 	.word	0x080074d1
 800734c:	080074d1 	.word	0x080074d1
 8007350:	080074d1 	.word	0x080074d1
 8007354:	080074d1 	.word	0x080074d1
 8007358:	080074d1 	.word	0x080074d1
 800735c:	080074d1 	.word	0x080074d1
 8007360:	080074d1 	.word	0x080074d1
 8007364:	080074d1 	.word	0x080074d1
 8007368:	080074d1 	.word	0x080074d1
 800736c:	080074d1 	.word	0x080074d1
 8007370:	080074d1 	.word	0x080074d1
 8007374:	080074d1 	.word	0x080074d1
 8007378:	080074d1 	.word	0x080074d1
 800737c:	080074d1 	.word	0x080074d1
 8007380:	080074d1 	.word	0x080074d1
 8007384:	080074d1 	.word	0x080074d1
 8007388:	080074d1 	.word	0x080074d1
 800738c:	0800740b 	.word	0x0800740b
 8007390:	2baa      	cmp	r3, #170	@ 0xaa
 8007392:	f300 809d 	bgt.w	80074d0 <SCSI_ProcessCmd+0x334>
 8007396:	2b9e      	cmp	r3, #158	@ 0x9e
 8007398:	f6bf af1d 	bge.w	80071d6 <SCSI_ProcessCmd+0x3a>
 800739c:	e098      	b.n	80074d0 <SCSI_ProcessCmd+0x334>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800739e:	7afb      	ldrb	r3, [r7, #11]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	4619      	mov	r1, r3
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 f8a3 	bl	80074f0 <SCSI_TestUnitReady>
 80073aa:	4603      	mov	r3, r0
 80073ac:	75fb      	strb	r3, [r7, #23]
      break;
 80073ae:	e098      	b.n	80074e2 <SCSI_ProcessCmd+0x346>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80073b0:	7afb      	ldrb	r3, [r7, #11]
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	4619      	mov	r1, r3
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f000 fbb4 	bl	8007b24 <SCSI_RequestSense>
 80073bc:	4603      	mov	r3, r0
 80073be:	75fb      	strb	r3, [r7, #23]
      break;
 80073c0:	e08f      	b.n	80074e2 <SCSI_ProcessCmd+0x346>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 80073c2:	7afb      	ldrb	r3, [r7, #11]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	4619      	mov	r1, r3
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f000 f8eb 	bl	80075a4 <SCSI_Inquiry>
 80073ce:	4603      	mov	r3, r0
 80073d0:	75fb      	strb	r3, [r7, #23]
      break;
 80073d2:	e086      	b.n	80074e2 <SCSI_ProcessCmd+0x346>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 80073d4:	7afb      	ldrb	r3, [r7, #11]
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	4619      	mov	r1, r3
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f000 fc70 	bl	8007cc0 <SCSI_StartStopUnit>
 80073e0:	4603      	mov	r3, r0
 80073e2:	75fb      	strb	r3, [r7, #23]
      break;
 80073e4:	e07d      	b.n	80074e2 <SCSI_ProcessCmd+0x346>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 80073e6:	7afb      	ldrb	r3, [r7, #11]
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	4619      	mov	r1, r3
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f000 fcbc 	bl	8007d6a <SCSI_AllowPreventRemovable>
 80073f2:	4603      	mov	r3, r0
 80073f4:	75fb      	strb	r3, [r7, #23]
      break;
 80073f6:	e074      	b.n	80074e2 <SCSI_ProcessCmd+0x346>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80073f8:	7afb      	ldrb	r3, [r7, #11]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	4619      	mov	r1, r3
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f000 faf2 	bl	80079e8 <SCSI_ModeSense6>
 8007404:	4603      	mov	r3, r0
 8007406:	75fb      	strb	r3, [r7, #23]
      break;
 8007408:	e06b      	b.n	80074e2 <SCSI_ProcessCmd+0x346>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800740a:	7afb      	ldrb	r3, [r7, #11]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	4619      	mov	r1, r3
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 fb39 	bl	8007a88 <SCSI_ModeSense10>
 8007416:	4603      	mov	r3, r0
 8007418:	75fb      	strb	r3, [r7, #23]
      break;
 800741a:	e062      	b.n	80074e2 <SCSI_ProcessCmd+0x346>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800741c:	7afb      	ldrb	r3, [r7, #11]
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	4619      	mov	r1, r3
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f000 fa64 	bl	80078f0 <SCSI_ReadFormatCapacity>
 8007428:	4603      	mov	r3, r0
 800742a:	75fb      	strb	r3, [r7, #23]
      break;
 800742c:	e059      	b.n	80074e2 <SCSI_ProcessCmd+0x346>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800742e:	7afb      	ldrb	r3, [r7, #11]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	4619      	mov	r1, r3
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f000 f931 	bl	800769c <SCSI_ReadCapacity10>
 800743a:	4603      	mov	r3, r0
 800743c:	75fb      	strb	r3, [r7, #23]
      break;
 800743e:	e050      	b.n	80074e2 <SCSI_ProcessCmd+0x346>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8007440:	7afb      	ldrb	r3, [r7, #11]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	4619      	mov	r1, r3
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f000 f9a2 	bl	8007790 <SCSI_ReadCapacity16>
 800744c:	4603      	mov	r3, r0
 800744e:	75fb      	strb	r3, [r7, #23]
      break;
 8007450:	e047      	b.n	80074e2 <SCSI_ProcessCmd+0x346>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8007452:	7afb      	ldrb	r3, [r7, #11]
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	4619      	mov	r1, r3
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f000 fcb3 	bl	8007dc4 <SCSI_Read10>
 800745e:	4603      	mov	r3, r0
 8007460:	75fb      	strb	r3, [r7, #23]
      break;
 8007462:	e03e      	b.n	80074e2 <SCSI_ProcessCmd+0x346>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8007464:	7afb      	ldrb	r3, [r7, #11]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	4619      	mov	r1, r3
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f000 fd54 	bl	8007f18 <SCSI_Read12>
 8007470:	4603      	mov	r3, r0
 8007472:	75fb      	strb	r3, [r7, #23]
      break;
 8007474:	e035      	b.n	80074e2 <SCSI_ProcessCmd+0x346>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8007476:	7afb      	ldrb	r3, [r7, #11]
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	4619      	mov	r1, r3
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f000 fe01 	bl	8008084 <SCSI_Write10>
 8007482:	4603      	mov	r3, r0
 8007484:	75fb      	strb	r3, [r7, #23]
      break;
 8007486:	e02c      	b.n	80074e2 <SCSI_ProcessCmd+0x346>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8007488:	7afb      	ldrb	r3, [r7, #11]
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	4619      	mov	r1, r3
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f000 fed0 	bl	8008234 <SCSI_Write12>
 8007494:	4603      	mov	r3, r0
 8007496:	75fb      	strb	r3, [r7, #23]
      break;
 8007498:	e023      	b.n	80074e2 <SCSI_ProcessCmd+0x346>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800749a:	7afb      	ldrb	r3, [r7, #11]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	4619      	mov	r1, r3
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f000 ffaf 	bl	8008404 <SCSI_Verify10>
 80074a6:	4603      	mov	r3, r0
 80074a8:	75fb      	strb	r3, [r7, #23]
      break;
 80074aa:	e01a      	b.n	80074e2 <SCSI_ProcessCmd+0x346>

    case SCSI_REPORT_LUNS:
      ret = SCSI_ReportLuns(pdev, lun, cmd);
 80074ac:	7afb      	ldrb	r3, [r7, #11]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	4619      	mov	r1, r3
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 ffe8 	bl	8008488 <SCSI_ReportLuns>
 80074b8:	4603      	mov	r3, r0
 80074ba:	75fb      	strb	r3, [r7, #23]
      break;
 80074bc:	e011      	b.n	80074e2 <SCSI_ProcessCmd+0x346>

    case SCSI_RECEIVE_DIAGNOSTIC_RESULTS:
      ret = SCSI_ReceiveDiagnosticResults(pdev, lun, cmd);
 80074be:	7afb      	ldrb	r3, [r7, #11]
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	4619      	mov	r1, r3
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f001 f833 	bl	8008530 <SCSI_ReceiveDiagnosticResults>
 80074ca:	4603      	mov	r3, r0
 80074cc:	75fb      	strb	r3, [r7, #23]
      break;
 80074ce:	e008      	b.n	80074e2 <SCSI_ProcessCmd+0x346>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80074d0:	7af9      	ldrb	r1, [r7, #11]
 80074d2:	2320      	movs	r3, #32
 80074d4:	2205      	movs	r2, #5
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f000 fba7 	bl	8007c2a <SCSI_SenseCode>
      ret = -1;
 80074dc:	23ff      	movs	r3, #255	@ 0xff
 80074de:	75fb      	strb	r3, [r7, #23]
      break;
 80074e0:	bf00      	nop
  }

  return ret;
 80074e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop

080074f0 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	460b      	mov	r3, r1
 80074fa:	607a      	str	r2, [r7, #4]
 80074fc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	32b0      	adds	r2, #176	@ 0xb0
 8007508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800750c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d102      	bne.n	800751a <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8007514:	f04f 33ff 	mov.w	r3, #4294967295
 8007518:	e03f      	b.n	800759a <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00a      	beq.n	800753a <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800752a:	2320      	movs	r3, #32
 800752c:	2205      	movs	r2, #5
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f000 fb7b 	bl	8007c2a <SCSI_SenseCode>

    return -1;
 8007534:	f04f 33ff 	mov.w	r3, #4294967295
 8007538:	e02f      	b.n	800759a <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8007540:	2b02      	cmp	r3, #2
 8007542:	d10b      	bne.n	800755c <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007544:	7af9      	ldrb	r1, [r7, #11]
 8007546:	233a      	movs	r3, #58	@ 0x3a
 8007548:	2202      	movs	r2, #2
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f000 fb6d 	bl	8007c2a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	2205      	movs	r2, #5
 8007554:	721a      	strb	r2, [r3, #8]
    return -1;
 8007556:	f04f 33ff 	mov.w	r3, #4294967295
 800755a:	e01e      	b.n	800759a <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	33b0      	adds	r3, #176	@ 0xb0
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	4413      	add	r3, r2
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	7afa      	ldrb	r2, [r7, #11]
 8007570:	4610      	mov	r0, r2
 8007572:	4798      	blx	r3
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00b      	beq.n	8007592 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800757a:	7af9      	ldrb	r1, [r7, #11]
 800757c:	233a      	movs	r3, #58	@ 0x3a
 800757e:	2202      	movs	r2, #2
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 fb52 	bl	8007c2a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	2205      	movs	r2, #5
 800758a:	721a      	strb	r2, [r3, #8]

    return -1;
 800758c:	f04f 33ff 	mov.w	r3, #4294967295
 8007590:	e003      	b.n	800759a <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	2200      	movs	r2, #0
 8007596:	60da      	str	r2, [r3, #12]

  return 0;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3718      	adds	r7, #24
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
	...

080075a4 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b088      	sub	sp, #32
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	460b      	mov	r3, r1
 80075ae:	607a      	str	r2, [r7, #4]
 80075b0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	32b0      	adds	r2, #176	@ 0xb0
 80075bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075c0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d102      	bne.n	80075ce <SCSI_Inquiry+0x2a>
  {
    return -1;
 80075c8:	f04f 33ff 	mov.w	r3, #4294967295
 80075cc:	e05e      	b.n	800768c <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10a      	bne.n	80075ee <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80075de:	2320      	movs	r3, #32
 80075e0:	2205      	movs	r2, #5
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f000 fb21 	bl	8007c2a <SCSI_SenseCode>
    return -1;
 80075e8:	f04f 33ff 	mov.w	r3, #4294967295
 80075ec:	e04e      	b.n	800768c <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	3301      	adds	r3, #1
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	f003 0301 	and.w	r3, r3, #1
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d020      	beq.n	800763e <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	3302      	adds	r3, #2
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d105      	bne.n	8007612 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8007606:	2206      	movs	r2, #6
 8007608:	4922      	ldr	r1, [pc, #136]	@ (8007694 <SCSI_Inquiry+0xf0>)
 800760a:	69b8      	ldr	r0, [r7, #24]
 800760c:	f001 f908 	bl	8008820 <SCSI_UpdateBotData>
 8007610:	e03b      	b.n	800768a <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	3302      	adds	r3, #2
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	2b80      	cmp	r3, #128	@ 0x80
 800761a:	d105      	bne.n	8007628 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800761c:	2208      	movs	r2, #8
 800761e:	491e      	ldr	r1, [pc, #120]	@ (8007698 <SCSI_Inquiry+0xf4>)
 8007620:	69b8      	ldr	r0, [r7, #24]
 8007622:	f001 f8fd 	bl	8008820 <SCSI_UpdateBotData>
 8007626:	e030      	b.n	800768a <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800762e:	2324      	movs	r3, #36	@ 0x24
 8007630:	2205      	movs	r2, #5
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f000 faf9 	bl	8007c2a <SCSI_SenseCode>
                     INVALID_FIELD_IN_COMMAND);

      return -1;
 8007638:	f04f 33ff 	mov.w	r3, #4294967295
 800763c:	e026      	b.n	800768c <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	33b0      	adds	r3, #176	@ 0xb0
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4413      	add	r3, r2
 800764c:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800764e:	69d9      	ldr	r1, [r3, #28]
 8007650:	7afa      	ldrb	r2, [r7, #11]
 8007652:	4613      	mov	r3, r2
 8007654:	00db      	lsls	r3, r3, #3
 8007656:	4413      	add	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800765a:	440b      	add	r3, r1
 800765c:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	3304      	adds	r3, #4
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	3305      	adds	r3, #5
 8007666:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	3304      	adds	r3, #4
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	461a      	mov	r2, r3
 8007670:	8bfb      	ldrh	r3, [r7, #30]
 8007672:	4293      	cmp	r3, r2
 8007674:	d303      	bcc.n	800767e <SCSI_Inquiry+0xda>
    {
      len = params[4];
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	3304      	adds	r3, #4
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800767e:	8bfb      	ldrh	r3, [r7, #30]
 8007680:	461a      	mov	r2, r3
 8007682:	6979      	ldr	r1, [r7, #20]
 8007684:	69b8      	ldr	r0, [r7, #24]
 8007686:	f001 f8cb 	bl	8008820 <SCSI_UpdateBotData>
  }

  return 0;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3720      	adds	r7, #32
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	20000088 	.word	0x20000088
 8007698:	20000090 	.word	0x20000090

0800769c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b088      	sub	sp, #32
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	460b      	mov	r3, r1
 80076a6:	607a      	str	r2, [r7, #4]
 80076a8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	32b0      	adds	r2, #176	@ 0xb0
 80076b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b8:	61fb      	str	r3, [r7, #28]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 80076ba:	7afb      	ldrb	r3, [r7, #11]
 80076bc:	3326      	adds	r3, #38	@ 0x26
 80076be:	011b      	lsls	r3, r3, #4
 80076c0:	69fa      	ldr	r2, [r7, #28]
 80076c2:	4413      	add	r3, r2
 80076c4:	3304      	adds	r3, #4
 80076c6:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d102      	bne.n	80076d4 <SCSI_ReadCapacity10+0x38>
  {
    return -1;
 80076ce:	f04f 33ff 	mov.w	r3, #4294967295
 80076d2:	e059      	b.n	8007788 <SCSI_ReadCapacity10+0xec>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &p_scsi_blk->nbr,
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	33b0      	adds	r3, #176	@ 0xb0
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	69ba      	ldr	r2, [r7, #24]
 80076e8:	1d11      	adds	r1, r2, #4
 80076ea:	69ba      	ldr	r2, [r7, #24]
 80076ec:	7af8      	ldrb	r0, [r7, #11]
 80076ee:	4798      	blx	r3
 80076f0:	4603      	mov	r3, r0
 80076f2:	75fb      	strb	r3, [r7, #23]
                                                                             &p_scsi_blk->size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80076f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d104      	bne.n	8007706 <SCSI_ReadCapacity10+0x6a>
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8007702:	2b02      	cmp	r3, #2
 8007704:	d108      	bne.n	8007718 <SCSI_ReadCapacity10+0x7c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007706:	7af9      	ldrb	r1, [r7, #11]
 8007708:	233a      	movs	r3, #58	@ 0x3a
 800770a:	2202      	movs	r2, #2
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f000 fa8c 	bl	8007c2a <SCSI_SenseCode>
    return -1;
 8007712:	f04f 33ff 	mov.w	r3, #4294967295
 8007716:	e037      	b.n	8007788 <SCSI_ReadCapacity10+0xec>
  }

  hmsc->bot_data[0] = (uint8_t)((p_scsi_blk->nbr - 1U) >> 24);
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	3b01      	subs	r3, #1
 800771e:	0e1b      	lsrs	r3, r3, #24
 8007720:	b2da      	uxtb	r2, r3
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((p_scsi_blk->nbr - 1U) >> 16);
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	3b01      	subs	r3, #1
 800772c:	0c1b      	lsrs	r3, r3, #16
 800772e:	b2da      	uxtb	r2, r3
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((p_scsi_blk->nbr - 1U) >>  8);
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	3b01      	subs	r3, #1
 800773a:	0a1b      	lsrs	r3, r3, #8
 800773c:	b2da      	uxtb	r2, r3
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(p_scsi_blk->nbr - 1U);
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	b2db      	uxtb	r3, r3
 8007748:	3b01      	subs	r3, #1
 800774a:	b2da      	uxtb	r2, r3
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(p_scsi_blk->size >> 24);
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	881b      	ldrh	r3, [r3, #0]
 8007754:	161b      	asrs	r3, r3, #24
 8007756:	b2da      	uxtb	r2, r3
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(p_scsi_blk->size >> 16);
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	141b      	asrs	r3, r3, #16
 8007762:	b2da      	uxtb	r2, r3
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(p_scsi_blk->size >> 8);
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	881b      	ldrh	r3, [r3, #0]
 800776c:	0a1b      	lsrs	r3, r3, #8
 800776e:	b29b      	uxth	r3, r3
 8007770:	b2da      	uxtb	r2, r3
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(p_scsi_blk->size);
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	881b      	ldrh	r3, [r3, #0]
 800777a:	b2da      	uxtb	r2, r3
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	2208      	movs	r2, #8
 8007784:	60da      	str	r2, [r3, #12]

  return 0;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3720      	adds	r7, #32
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b088      	sub	sp, #32
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	460b      	mov	r3, r1
 800779a:	607a      	str	r2, [r7, #4]
 800779c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	32b0      	adds	r2, #176	@ 0xb0
 80077a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ac:	61bb      	str	r3, [r7, #24]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 80077ae:	7afb      	ldrb	r3, [r7, #11]
 80077b0:	3326      	adds	r3, #38	@ 0x26
 80077b2:	011b      	lsls	r3, r3, #4
 80077b4:	69ba      	ldr	r2, [r7, #24]
 80077b6:	4413      	add	r3, r2
 80077b8:	3304      	adds	r3, #4
 80077ba:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d102      	bne.n	80077c8 <SCSI_ReadCapacity16+0x38>
  {
    return -1;
 80077c2:	f04f 33ff 	mov.w	r3, #4294967295
 80077c6:	e08f      	b.n	80078e8 <SCSI_ReadCapacity16+0x158>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &p_scsi_blk->nbr,
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	33b0      	adds	r3, #176	@ 0xb0
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	1d11      	adds	r1, r2, #4
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	7af8      	ldrb	r0, [r7, #11]
 80077e2:	4798      	blx	r3
 80077e4:	4603      	mov	r3, r0
 80077e6:	74fb      	strb	r3, [r7, #19]
                                                                             &p_scsi_blk->size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80077e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d104      	bne.n	80077fa <SCSI_ReadCapacity16+0x6a>
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d108      	bne.n	800780c <SCSI_ReadCapacity16+0x7c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80077fa:	7af9      	ldrb	r1, [r7, #11]
 80077fc:	233a      	movs	r3, #58	@ 0x3a
 80077fe:	2202      	movs	r2, #2
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 fa12 	bl	8007c2a <SCSI_SenseCode>
    return -1;
 8007806:	f04f 33ff 	mov.w	r3, #4294967295
 800780a:	e06d      	b.n	80078e8 <SCSI_ReadCapacity16+0x158>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	330a      	adds	r3, #10
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	330b      	adds	r3, #11
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800781c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	330c      	adds	r3, #12
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8007826:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	320d      	adds	r2, #13
 800782c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800782e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8007834:	2300      	movs	r3, #0
 8007836:	61fb      	str	r3, [r7, #28]
 8007838:	e008      	b.n	800784c <SCSI_ReadCapacity16+0xbc>
  {
    hmsc->bot_data[idx] = 0U;
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	4413      	add	r3, r2
 8007840:	3310      	adds	r3, #16
 8007842:	2200      	movs	r2, #0
 8007844:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	3301      	adds	r3, #1
 800784a:	61fb      	str	r3, [r7, #28]
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	69fa      	ldr	r2, [r7, #28]
 8007852:	429a      	cmp	r2, r3
 8007854:	d3f1      	bcc.n	800783a <SCSI_ReadCapacity16+0xaa>
  }

  hmsc->bot_data[4] = (uint8_t)((p_scsi_blk->nbr - 1U) >> 24);
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	3b01      	subs	r3, #1
 800785c:	0e1b      	lsrs	r3, r3, #24
 800785e:	b2da      	uxtb	r2, r3
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((p_scsi_blk->nbr - 1U) >> 16);
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	3b01      	subs	r3, #1
 800786a:	0c1b      	lsrs	r3, r3, #16
 800786c:	b2da      	uxtb	r2, r3
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((p_scsi_blk->nbr - 1U) >>  8);
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	3b01      	subs	r3, #1
 8007878:	0a1b      	lsrs	r3, r3, #8
 800787a:	b2da      	uxtb	r2, r3
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(p_scsi_blk->nbr - 1U);
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	b2db      	uxtb	r3, r3
 8007886:	3b01      	subs	r3, #1
 8007888:	b2da      	uxtb	r2, r3
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(p_scsi_blk->size >>  24);
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	881b      	ldrh	r3, [r3, #0]
 8007892:	161b      	asrs	r3, r3, #24
 8007894:	b2da      	uxtb	r2, r3
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(p_scsi_blk->size >>  16);
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	881b      	ldrh	r3, [r3, #0]
 800789e:	141b      	asrs	r3, r3, #16
 80078a0:	b2da      	uxtb	r2, r3
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(p_scsi_blk->size >>  8);
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	881b      	ldrh	r3, [r3, #0]
 80078aa:	0a1b      	lsrs	r3, r3, #8
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	b2da      	uxtb	r2, r3
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(p_scsi_blk->size);
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	881b      	ldrh	r3, [r3, #0]
 80078b8:	b2da      	uxtb	r2, r3
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	330a      	adds	r3, #10
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	330b      	adds	r3, #11
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80078ce:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	330c      	adds	r3, #12
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80078d8:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	320d      	adds	r2, #13
 80078de:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80078e0:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	60da      	str	r2, [r3, #12]

  return 0;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3720      	adds	r7, #32
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b088      	sub	sp, #32
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	460b      	mov	r3, r1
 80078fa:	607a      	str	r2, [r7, #4]
 80078fc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	32b0      	adds	r2, #176	@ 0xb0
 8007908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800790c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d102      	bne.n	800791a <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8007914:	f04f 33ff 	mov.w	r3, #4294967295
 8007918:	e061      	b.n	80079de <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	33b0      	adds	r3, #176	@ 0xb0
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	4413      	add	r3, r2
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f107 0214 	add.w	r2, r7, #20
 8007930:	f107 0110 	add.w	r1, r7, #16
 8007934:	7af8      	ldrb	r0, [r7, #11]
 8007936:	4798      	blx	r3
 8007938:	4603      	mov	r3, r0
 800793a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800793c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d104      	bne.n	800794e <SCSI_ReadFormatCapacity+0x5e>
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800794a:	2b02      	cmp	r3, #2
 800794c:	d108      	bne.n	8007960 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800794e:	7af9      	ldrb	r1, [r7, #11]
 8007950:	233a      	movs	r3, #58	@ 0x3a
 8007952:	2202      	movs	r2, #2
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 f968 	bl	8007c2a <SCSI_SenseCode>
    return -1;
 800795a:	f04f 33ff 	mov.w	r3, #4294967295
 800795e:	e03e      	b.n	80079de <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8007960:	2300      	movs	r3, #0
 8007962:	83fb      	strh	r3, [r7, #30]
 8007964:	e007      	b.n	8007976 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8007966:	8bfb      	ldrh	r3, [r7, #30]
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	4413      	add	r3, r2
 800796c:	2200      	movs	r2, #0
 800796e:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8007970:	8bfb      	ldrh	r3, [r7, #30]
 8007972:	3301      	adds	r3, #1
 8007974:	83fb      	strh	r3, [r7, #30]
 8007976:	8bfb      	ldrh	r3, [r7, #30]
 8007978:	2b0b      	cmp	r3, #11
 800797a:	d9f4      	bls.n	8007966 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	2208      	movs	r2, #8
 8007980:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	3b01      	subs	r3, #1
 8007986:	0e1b      	lsrs	r3, r3, #24
 8007988:	b2da      	uxtb	r2, r3
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	3b01      	subs	r3, #1
 8007992:	0c1b      	lsrs	r3, r3, #16
 8007994:	b2da      	uxtb	r2, r3
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	3b01      	subs	r3, #1
 800799e:	0a1b      	lsrs	r3, r3, #8
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	3b01      	subs	r3, #1
 80079ac:	b2da      	uxtb	r2, r3
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	2202      	movs	r2, #2
 80079b6:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80079b8:	8abb      	ldrh	r3, [r7, #20]
 80079ba:	141b      	asrs	r3, r3, #16
 80079bc:	b2da      	uxtb	r2, r3
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80079c2:	8abb      	ldrh	r3, [r7, #20]
 80079c4:	0a1b      	lsrs	r3, r3, #8
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80079ce:	8abb      	ldrh	r3, [r7, #20]
 80079d0:	b2da      	uxtb	r2, r3
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	220c      	movs	r2, #12
 80079da:	60da      	str	r2, [r3, #12]

  return 0;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3720      	adds	r7, #32
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
	...

080079e8 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	460b      	mov	r3, r1
 80079f2:	607a      	str	r2, [r7, #4]
 80079f4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	32b0      	adds	r2, #176	@ 0xb0
 8007a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a04:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8007a06:	2304      	movs	r3, #4
 8007a08:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d102      	bne.n	8007a16 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8007a10:	f04f 33ff 	mov.w	r3, #4294967295
 8007a14:	e02f      	b.n	8007a76 <SCSI_ModeSense6+0x8e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	33b0      	adds	r3, #176	@ 0xb0
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4413      	add	r3, r2
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	7afa      	ldrb	r2, [r7, #11]
 8007a2a:	4610      	mov	r0, r2
 8007a2c:	4798      	blx	r3
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d007      	beq.n	8007a44 <SCSI_ModeSense6+0x5c>
  {
    MSC_Mode_Sense6_data[2] |= (0x1U << 7); /* Set the WP (write protection) bit */
 8007a34:	4b12      	ldr	r3, [pc, #72]	@ (8007a80 <SCSI_ModeSense6+0x98>)
 8007a36:	789b      	ldrb	r3, [r3, #2]
 8007a38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	4b10      	ldr	r3, [pc, #64]	@ (8007a80 <SCSI_ModeSense6+0x98>)
 8007a40:	709a      	strb	r2, [r3, #2]
 8007a42:	e006      	b.n	8007a52 <SCSI_ModeSense6+0x6a>
  }
  else
  {
    MSC_Mode_Sense10_data[2] &= ~(0x1U << 7); /* Clear the WP (write protection) bit */
 8007a44:	4b0f      	ldr	r3, [pc, #60]	@ (8007a84 <SCSI_ModeSense6+0x9c>)
 8007a46:	789b      	ldrb	r3, [r3, #2]
 8007a48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a84 <SCSI_ModeSense6+0x9c>)
 8007a50:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	3304      	adds	r3, #4
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	8afb      	ldrh	r3, [r7, #22]
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d303      	bcc.n	8007a68 <SCSI_ModeSense6+0x80>
  {
    len = params[4];
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	3304      	adds	r3, #4
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8007a68:	8afb      	ldrh	r3, [r7, #22]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	4904      	ldr	r1, [pc, #16]	@ (8007a80 <SCSI_ModeSense6+0x98>)
 8007a6e:	6938      	ldr	r0, [r7, #16]
 8007a70:	f000 fed6 	bl	8008820 <SCSI_UpdateBotData>

  return 0;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3718      	adds	r7, #24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	20000098 	.word	0x20000098
 8007a84:	2000009c 	.word	0x2000009c

08007a88 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	460b      	mov	r3, r1
 8007a92:	607a      	str	r2, [r7, #4]
 8007a94:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	32b0      	adds	r2, #176	@ 0xb0
 8007aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8007aa6:	2308      	movs	r3, #8
 8007aa8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d102      	bne.n	8007ab6 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8007ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab4:	e02f      	b.n	8007b16 <SCSI_ModeSense10+0x8e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	33b0      	adds	r3, #176	@ 0xb0
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	7afa      	ldrb	r2, [r7, #11]
 8007aca:	4610      	mov	r0, r2
 8007acc:	4798      	blx	r3
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d007      	beq.n	8007ae4 <SCSI_ModeSense10+0x5c>
  {
    MSC_Mode_Sense10_data[3] |= (0x1U << 7); /* Set the WP (write protection) bit */
 8007ad4:	4b12      	ldr	r3, [pc, #72]	@ (8007b20 <SCSI_ModeSense10+0x98>)
 8007ad6:	78db      	ldrb	r3, [r3, #3]
 8007ad8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007adc:	b2da      	uxtb	r2, r3
 8007ade:	4b10      	ldr	r3, [pc, #64]	@ (8007b20 <SCSI_ModeSense10+0x98>)
 8007ae0:	70da      	strb	r2, [r3, #3]
 8007ae2:	e006      	b.n	8007af2 <SCSI_ModeSense10+0x6a>
  }
  else
  {
    MSC_Mode_Sense10_data[3] &= ~(0x1U << 7); /* Clear the WP (write protection) bit */
 8007ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8007b20 <SCSI_ModeSense10+0x98>)
 8007ae6:	78db      	ldrb	r3, [r3, #3]
 8007ae8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007aec:	b2da      	uxtb	r2, r3
 8007aee:	4b0c      	ldr	r3, [pc, #48]	@ (8007b20 <SCSI_ModeSense10+0x98>)
 8007af0:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	3308      	adds	r3, #8
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	461a      	mov	r2, r3
 8007afa:	8afb      	ldrh	r3, [r7, #22]
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d303      	bcc.n	8007b08 <SCSI_ModeSense10+0x80>
  {
    len = params[8];
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	3308      	adds	r3, #8
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8007b08:	8afb      	ldrh	r3, [r7, #22]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	4904      	ldr	r1, [pc, #16]	@ (8007b20 <SCSI_ModeSense10+0x98>)
 8007b0e:	6938      	ldr	r0, [r7, #16]
 8007b10:	f000 fe86 	bl	8008820 <SCSI_UpdateBotData>

  return 0;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3718      	adds	r7, #24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	2000009c 	.word	0x2000009c

08007b24 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b086      	sub	sp, #24
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	607a      	str	r2, [r7, #4]
 8007b30:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	32b0      	adds	r2, #176	@ 0xb0
 8007b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b40:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d102      	bne.n	8007b4e <SCSI_RequestSense+0x2a>
  {
    return -1;
 8007b48:	f04f 33ff 	mov.w	r3, #4294967295
 8007b4c:	e069      	b.n	8007c22 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10a      	bne.n	8007b6e <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007b5e:	2320      	movs	r3, #32
 8007b60:	2205      	movs	r2, #5
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 f861 	bl	8007c2a <SCSI_SenseCode>
    return -1;
 8007b68:	f04f 33ff 	mov.w	r3, #4294967295
 8007b6c:	e059      	b.n	8007c22 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8007b6e:	2300      	movs	r3, #0
 8007b70:	75fb      	strb	r3, [r7, #23]
 8007b72:	e007      	b.n	8007b84 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8007b74:	7dfb      	ldrb	r3, [r7, #23]
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	4413      	add	r3, r2
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8007b7e:	7dfb      	ldrb	r3, [r7, #23]
 8007b80:	3301      	adds	r3, #1
 8007b82:	75fb      	strb	r3, [r7, #23]
 8007b84:	7dfb      	ldrb	r3, [r7, #23]
 8007b86:	2b11      	cmp	r3, #17
 8007b88:	d9f4      	bls.n	8007b74 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	2270      	movs	r2, #112	@ 0x70
 8007b8e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	220c      	movs	r2, #12
 8007b94:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	f893 2260 	ldrb.w	r2, [r3, #608]	@ 0x260
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d02e      	beq.n	8007c04 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8007bac:	461a      	mov	r2, r3
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	3248      	adds	r2, #72	@ 0x48
 8007bb2:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	3348      	adds	r3, #72	@ 0x48
 8007bc4:	00db      	lsls	r3, r3, #3
 8007bc6:	4413      	add	r3, r2
 8007bc8:	791a      	ldrb	r2, [r3, #4]
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8007bd4:	693a      	ldr	r2, [r7, #16]
 8007bd6:	3348      	adds	r3, #72	@ 0x48
 8007bd8:	00db      	lsls	r3, r3, #3
 8007bda:	4413      	add	r3, r2
 8007bdc:	795a      	ldrb	r2, [r3, #5]
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8007be8:	3301      	adds	r3, #1
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8007bf8:	2b04      	cmp	r3, #4
 8007bfa:	d103      	bne.n	8007c04 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	2212      	movs	r2, #18
 8007c08:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	2b12      	cmp	r3, #18
 8007c12:	d805      	bhi.n	8007c20 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	3304      	adds	r3, #4
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3718      	adds	r7, #24
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b085      	sub	sp, #20
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	4608      	mov	r0, r1
 8007c34:	4611      	mov	r1, r2
 8007c36:	461a      	mov	r2, r3
 8007c38:	4603      	mov	r3, r0
 8007c3a:	70fb      	strb	r3, [r7, #3]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	70bb      	strb	r3, [r7, #2]
 8007c40:	4613      	mov	r3, r2
 8007c42:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	32b0      	adds	r2, #176	@ 0xb0
 8007c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c52:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d02c      	beq.n	8007cb4 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8007c60:	461a      	mov	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	3248      	adds	r2, #72	@ 0x48
 8007c66:	78b9      	ldrb	r1, [r7, #2]
 8007c68:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	3348      	adds	r3, #72	@ 0x48
 8007c76:	00db      	lsls	r3, r3, #3
 8007c78:	4413      	add	r3, r2
 8007c7a:	787a      	ldrb	r2, [r7, #1]
 8007c7c:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	3348      	adds	r3, #72	@ 0x48
 8007c88:	00db      	lsls	r3, r3, #3
 8007c8a:	4413      	add	r3, r2
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8007c96:	3301      	adds	r3, #1
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8007ca6:	2b04      	cmp	r3, #4
 8007ca8:	d105      	bne.n	8007cb6 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 8007cb2:	e000      	b.n	8007cb6 <SCSI_SenseCode+0x8c>
    return;
 8007cb4:	bf00      	nop
  }
}
 8007cb6:	3714      	adds	r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	607a      	str	r2, [r7, #4]
 8007ccc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	32b0      	adds	r2, #176	@ 0xb0
 8007cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cdc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d102      	bne.n	8007cea <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8007ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ce8:	e03b      	b.n	8007d62 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d10f      	bne.n	8007d14 <SCSI_StartStopUnit+0x54>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	3304      	adds	r3, #4
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	f003 0303 	and.w	r3, r3, #3
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d108      	bne.n	8007d14 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELD_IN_COMMAND);
 8007d02:	7af9      	ldrb	r1, [r7, #11]
 8007d04:	2324      	movs	r3, #36	@ 0x24
 8007d06:	2205      	movs	r2, #5
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f7ff ff8e 	bl	8007c2a <SCSI_SenseCode>

    return -1;
 8007d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d12:	e026      	b.n	8007d62 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	3304      	adds	r3, #4
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	f003 0303 	and.w	r3, r3, #3
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d104      	bne.n	8007d2c <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8007d2a:	e016      	b.n	8007d5a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	3304      	adds	r3, #4
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	f003 0303 	and.w	r3, r3, #3
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d104      	bne.n	8007d44 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8007d42:	e00a      	b.n	8007d5a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	3304      	adds	r3, #4
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	f003 0303 	and.w	r3, r3, #3
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	d103      	bne.n	8007d5a <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	60da      	str	r2, [r3, #12]

  return 0;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3718      	adds	r7, #24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b087      	sub	sp, #28
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	60f8      	str	r0, [r7, #12]
 8007d72:	460b      	mov	r3, r1
 8007d74:	607a      	str	r2, [r7, #4]
 8007d76:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	32b0      	adds	r2, #176	@ 0xb0
 8007d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d86:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d102      	bne.n	8007d94 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8007d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d92:	e011      	b.n	8007db8 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	3304      	adds	r3, #4
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d104      	bne.n	8007da8 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8007da6:	e003      	b.n	8007db0 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }

  hmsc->bot_data_length = 0U;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	2200      	movs	r2, #0
 8007db4:	60da      	str	r2, [r3, #12]

  return 0;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	371c      	adds	r7, #28
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	460b      	mov	r3, r1
 8007dce:	607a      	str	r2, [r7, #4]
 8007dd0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	32b0      	adds	r2, #176	@ 0xb0
 8007ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de0:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8007de2:	7afb      	ldrb	r3, [r7, #11]
 8007de4:	3326      	adds	r3, #38	@ 0x26
 8007de6:	011b      	lsls	r3, r3, #4
 8007de8:	697a      	ldr	r2, [r7, #20]
 8007dea:	4413      	add	r3, r2
 8007dec:	3304      	adds	r3, #4
 8007dee:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d102      	bne.n	8007dfc <SCSI_Read10+0x38>
  {
    return -1;
 8007df6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dfa:	e089      	b.n	8007f10 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	7a1b      	ldrb	r3, [r3, #8]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d17b      	bne.n	8007efc <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8007e0a:	b25b      	sxtb	r3, r3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	db0a      	blt.n	8007e26 <SCSI_Read10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007e16:	2320      	movs	r3, #32
 8007e18:	2205      	movs	r2, #5
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f7ff ff05 	bl	8007c2a <SCSI_SenseCode>
      return -1;
 8007e20:	f04f 33ff 	mov.w	r3, #4294967295
 8007e24:	e074      	b.n	8007f10 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d108      	bne.n	8007e42 <SCSI_Read10+0x7e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007e30:	7af9      	ldrb	r1, [r7, #11]
 8007e32:	233a      	movs	r3, #58	@ 0x3a
 8007e34:	2202      	movs	r2, #2
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f7ff fef7 	bl	8007c2a <SCSI_SenseCode>

      return -1;
 8007e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e40:	e066      	b.n	8007f10 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	33b0      	adds	r3, #176	@ 0xb0
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	7afa      	ldrb	r2, [r7, #11]
 8007e56:	4610      	mov	r0, r2
 8007e58:	4798      	blx	r3
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d008      	beq.n	8007e72 <SCSI_Read10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007e60:	7af9      	ldrb	r1, [r7, #11]
 8007e62:	233a      	movs	r3, #58	@ 0x3a
 8007e64:	2202      	movs	r2, #2
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f7ff fedf 	bl	8007c2a <SCSI_SenseCode>
      return -1;
 8007e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e70:	e04e      	b.n	8007f10 <SCSI_Read10+0x14c>
    }

    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	3302      	adds	r3, #2
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	061a      	lsls	r2, r3, #24
                       ((uint32_t)params[3] << 16) |
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	3303      	adds	r3, #3
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	041b      	lsls	r3, r3, #16
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8007e82:	431a      	orrs	r2, r3
                       ((uint32_t)params[4] <<  8) |
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	3304      	adds	r3, #4
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	021b      	lsls	r3, r3, #8
                       ((uint32_t)params[3] << 16) |
 8007e8c:	4313      	orrs	r3, r2
                       (uint32_t)params[5];
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	3205      	adds	r2, #5
 8007e92:	7812      	ldrb	r2, [r2, #0]
                       ((uint32_t)params[4] <<  8) |
 8007e94:	431a      	orrs	r2, r3
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	609a      	str	r2, [r3, #8]

    p_scsi_blk->len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	3307      	adds	r3, #7
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	021b      	lsls	r3, r3, #8
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	3208      	adds	r2, #8
 8007ea6:	7812      	ldrb	r2, [r2, #0]
 8007ea8:	431a      	orrs	r2, r3
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	60da      	str	r2, [r3, #12]

    if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	689a      	ldr	r2, [r3, #8]
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	7af9      	ldrb	r1, [r7, #11]
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f000 fb6d 	bl	8008598 <SCSI_CheckAddressRange>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	da02      	bge.n	8007eca <SCSI_Read10+0x106>
    {
      return -1; /* error */
 8007ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ec8:	e022      	b.n	8007f10 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (p_scsi_blk->len * p_scsi_blk->size))
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	6939      	ldr	r1, [r7, #16]
 8007ed6:	8809      	ldrh	r1, [r1, #0]
 8007ed8:	fb01 f303 	mul.w	r3, r1, r3
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d00a      	beq.n	8007ef6 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007ee6:	2320      	movs	r3, #32
 8007ee8:	2205      	movs	r2, #5
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f7ff fe9d 	bl	8007c2a <SCSI_SenseCode>
      return -1;
 8007ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef4:	e00c      	b.n	8007f10 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	2202      	movs	r2, #2
 8007efa:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f02:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8007f04:	7afb      	ldrb	r3, [r7, #11]
 8007f06:	4619      	mov	r1, r3
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f000 fb77 	bl	80085fc <SCSI_ProcessRead>
 8007f0e:	4603      	mov	r3, r0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3718      	adds	r7, #24
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b086      	sub	sp, #24
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	460b      	mov	r3, r1
 8007f22:	607a      	str	r2, [r7, #4]
 8007f24:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	32b0      	adds	r2, #176	@ 0xb0
 8007f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f34:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8007f36:	7afb      	ldrb	r3, [r7, #11]
 8007f38:	3326      	adds	r3, #38	@ 0x26
 8007f3a:	011b      	lsls	r3, r3, #4
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	4413      	add	r3, r2
 8007f40:	3304      	adds	r3, #4
 8007f42:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d102      	bne.n	8007f50 <SCSI_Read12+0x38>
  {
    return -1;
 8007f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f4e:	e094      	b.n	800807a <SCSI_Read12+0x162>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	7a1b      	ldrb	r3, [r3, #8]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f040 8086 	bne.w	8008066 <SCSI_Read12+0x14e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8007f60:	b25b      	sxtb	r3, r3
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	db0a      	blt.n	8007f7c <SCSI_Read12+0x64>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007f6c:	2320      	movs	r3, #32
 8007f6e:	2205      	movs	r2, #5
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f7ff fe5a 	bl	8007c2a <SCSI_SenseCode>
      return -1;
 8007f76:	f04f 33ff 	mov.w	r3, #4294967295
 8007f7a:	e07e      	b.n	800807a <SCSI_Read12+0x162>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d108      	bne.n	8007f98 <SCSI_Read12+0x80>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007f86:	7af9      	ldrb	r1, [r7, #11]
 8007f88:	233a      	movs	r3, #58	@ 0x3a
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f7ff fe4c 	bl	8007c2a <SCSI_SenseCode>
      return -1;
 8007f92:	f04f 33ff 	mov.w	r3, #4294967295
 8007f96:	e070      	b.n	800807a <SCSI_Read12+0x162>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	33b0      	adds	r3, #176	@ 0xb0
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	4413      	add	r3, r2
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	7afa      	ldrb	r2, [r7, #11]
 8007fac:	4610      	mov	r0, r2
 8007fae:	4798      	blx	r3
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d008      	beq.n	8007fc8 <SCSI_Read12+0xb0>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007fb6:	7af9      	ldrb	r1, [r7, #11]
 8007fb8:	233a      	movs	r3, #58	@ 0x3a
 8007fba:	2202      	movs	r2, #2
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f7ff fe34 	bl	8007c2a <SCSI_SenseCode>
      return -1;
 8007fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fc6:	e058      	b.n	800807a <SCSI_Read12+0x162>
    }

    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	3302      	adds	r3, #2
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	061a      	lsls	r2, r3, #24
                       ((uint32_t)params[3] << 16) |
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3303      	adds	r3, #3
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	041b      	lsls	r3, r3, #16
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8007fd8:	431a      	orrs	r2, r3
                       ((uint32_t)params[4] <<  8) |
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	3304      	adds	r3, #4
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	021b      	lsls	r3, r3, #8
                       ((uint32_t)params[3] << 16) |
 8007fe2:	4313      	orrs	r3, r2
                       (uint32_t)params[5];
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	3205      	adds	r2, #5
 8007fe8:	7812      	ldrb	r2, [r2, #0]
                       ((uint32_t)params[4] <<  8) |
 8007fea:	431a      	orrs	r2, r3
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	609a      	str	r2, [r3, #8]

    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	3306      	adds	r3, #6
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	061a      	lsls	r2, r3, #24
                      ((uint32_t)params[7] << 16) |
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	3307      	adds	r3, #7
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	041b      	lsls	r3, r3, #16
    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 8008000:	431a      	orrs	r2, r3
                      ((uint32_t)params[8] << 8) |
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	3308      	adds	r3, #8
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	021b      	lsls	r3, r3, #8
                      ((uint32_t)params[7] << 16) |
 800800a:	4313      	orrs	r3, r2
                      (uint32_t)params[9];
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	3209      	adds	r2, #9
 8008010:	7812      	ldrb	r2, [r2, #0]
                      ((uint32_t)params[8] << 8) |
 8008012:	431a      	orrs	r2, r3
    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	60da      	str	r2, [r3, #12]

    if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	689a      	ldr	r2, [r3, #8]
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	7af9      	ldrb	r1, [r7, #11]
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f000 fab8 	bl	8008598 <SCSI_CheckAddressRange>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	da02      	bge.n	8008034 <SCSI_Read12+0x11c>
    {
      return -1; /* error */
 800802e:	f04f 33ff 	mov.w	r3, #4294967295
 8008032:	e022      	b.n	800807a <SCSI_Read12+0x162>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (p_scsi_blk->len * p_scsi_blk->size))
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	6939      	ldr	r1, [r7, #16]
 8008040:	8809      	ldrh	r1, [r1, #0]
 8008042:	fb01 f303 	mul.w	r3, r1, r3
 8008046:	429a      	cmp	r2, r3
 8008048:	d00a      	beq.n	8008060 <SCSI_Read12+0x148>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008050:	2320      	movs	r3, #32
 8008052:	2205      	movs	r2, #5
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f7ff fde8 	bl	8007c2a <SCSI_SenseCode>
      return -1;
 800805a:	f04f 33ff 	mov.w	r3, #4294967295
 800805e:	e00c      	b.n	800807a <SCSI_Read12+0x162>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	2202      	movs	r2, #2
 8008064:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800806c:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800806e:	7afb      	ldrb	r3, [r7, #11]
 8008070:	4619      	mov	r1, r3
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f000 fac2 	bl	80085fc <SCSI_ProcessRead>
 8008078:	4603      	mov	r3, r0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3718      	adds	r7, #24
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
	...

08008084 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b088      	sub	sp, #32
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	460b      	mov	r3, r1
 800808e:	607a      	str	r2, [r7, #4]
 8008090:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	32b0      	adds	r2, #176	@ 0xb0
 800809c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a0:	61fb      	str	r3, [r7, #28]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 80080a2:	7afb      	ldrb	r3, [r7, #11]
 80080a4:	3326      	adds	r3, #38	@ 0x26
 80080a6:	011b      	lsls	r3, r3, #4
 80080a8:	69fa      	ldr	r2, [r7, #28]
 80080aa:	4413      	add	r3, r2
 80080ac:	3304      	adds	r3, #4
 80080ae:	61bb      	str	r3, [r7, #24]
  uint32_t len;

  if (hmsc == NULL)
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d102      	bne.n	80080bc <SCSI_Write10+0x38>
  {
    return -1;
 80080b6:	f04f 33ff 	mov.w	r3, #4294967295
 80080ba:	e0b4      	b.n	8008226 <SCSI_Write10+0x1a2>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	7a1b      	ldrb	r3, [r3, #8]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f040 80aa 	bne.w	800821a <SCSI_Write10+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10a      	bne.n	80080e6 <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80080d6:	2320      	movs	r3, #32
 80080d8:	2205      	movs	r2, #5
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f7ff fda5 	bl	8007c2a <SCSI_SenseCode>
      return -1;
 80080e0:	f04f 33ff 	mov.w	r3, #4294967295
 80080e4:	e09f      	b.n	8008226 <SCSI_Write10+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80080ec:	b25b      	sxtb	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	da0a      	bge.n	8008108 <SCSI_Write10+0x84>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80080f8:	2320      	movs	r3, #32
 80080fa:	2205      	movs	r2, #5
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f7ff fd94 	bl	8007c2a <SCSI_SenseCode>
      return -1;
 8008102:	f04f 33ff 	mov.w	r3, #4294967295
 8008106:	e08e      	b.n	8008226 <SCSI_Write10+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	33b0      	adds	r3, #176	@ 0xb0
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4413      	add	r3, r2
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	7afa      	ldrb	r2, [r7, #11]
 800811c:	4610      	mov	r0, r2
 800811e:	4798      	blx	r3
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d008      	beq.n	8008138 <SCSI_Write10+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008126:	7af9      	ldrb	r1, [r7, #11]
 8008128:	233a      	movs	r3, #58	@ 0x3a
 800812a:	2202      	movs	r2, #2
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f7ff fd7c 	bl	8007c2a <SCSI_SenseCode>
      return -1;
 8008132:	f04f 33ff 	mov.w	r3, #4294967295
 8008136:	e076      	b.n	8008226 <SCSI_Write10+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	33b0      	adds	r3, #176	@ 0xb0
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	4413      	add	r3, r2
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	7afa      	ldrb	r2, [r7, #11]
 800814c:	4610      	mov	r0, r2
 800814e:	4798      	blx	r3
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d008      	beq.n	8008168 <SCSI_Write10+0xe4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8008156:	7af9      	ldrb	r1, [r7, #11]
 8008158:	2327      	movs	r3, #39	@ 0x27
 800815a:	2202      	movs	r2, #2
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f7ff fd64 	bl	8007c2a <SCSI_SenseCode>
      return -1;
 8008162:	f04f 33ff 	mov.w	r3, #4294967295
 8008166:	e05e      	b.n	8008226 <SCSI_Write10+0x1a2>
    }

    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	3302      	adds	r3, #2
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	061a      	lsls	r2, r3, #24
                       ((uint32_t)params[3] << 16) |
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	3303      	adds	r3, #3
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	041b      	lsls	r3, r3, #16
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8008178:	431a      	orrs	r2, r3
                       ((uint32_t)params[4] << 8) |
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	3304      	adds	r3, #4
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	021b      	lsls	r3, r3, #8
                       ((uint32_t)params[3] << 16) |
 8008182:	4313      	orrs	r3, r2
                       (uint32_t)params[5];
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	3205      	adds	r2, #5
 8008188:	7812      	ldrb	r2, [r2, #0]
                       ((uint32_t)params[4] << 8) |
 800818a:	431a      	orrs	r2, r3
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	609a      	str	r2, [r3, #8]

    p_scsi_blk->len = ((uint32_t)params[7] << 8) |
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	3307      	adds	r3, #7
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	021b      	lsls	r3, r3, #8
                      (uint32_t)params[8];
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	3208      	adds	r2, #8
 800819c:	7812      	ldrb	r2, [r2, #0]
    p_scsi_blk->len = ((uint32_t)params[7] << 8) |
 800819e:	431a      	orrs	r2, r3
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	60da      	str	r2, [r3, #12]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	689a      	ldr	r2, [r3, #8]
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	7af9      	ldrb	r1, [r7, #11]
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f000 f9f2 	bl	8008598 <SCSI_CheckAddressRange>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	da02      	bge.n	80081c0 <SCSI_Write10+0x13c>
    {
      return -1; /* error */
 80081ba:	f04f 33ff 	mov.w	r3, #4294967295
 80081be:	e032      	b.n	8008226 <SCSI_Write10+0x1a2>
    }

    len = p_scsi_blk->len * p_scsi_blk->size;
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	69ba      	ldr	r2, [r7, #24]
 80081c6:	8812      	ldrh	r2, [r2, #0]
 80081c8:	fb02 f303 	mul.w	r3, r2, r3
 80081cc:	617b      	str	r3, [r7, #20]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d00a      	beq.n	80081f0 <SCSI_Write10+0x16c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80081e0:	2320      	movs	r3, #32
 80081e2:	2205      	movs	r2, #5
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f7ff fd20 	bl	8007c2a <SCSI_SenseCode>
      return -1;
 80081ea:	f04f 33ff 	mov.w	r3, #4294967295
 80081ee:	e01a      	b.n	8008226 <SCSI_Write10+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081f6:	bf28      	it	cs
 80081f8:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 80081fc:	617b      	str	r3, [r7, #20]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	2201      	movs	r2, #1
 8008202:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8008204:	4b0a      	ldr	r3, [pc, #40]	@ (8008230 <SCSI_Write10+0x1ac>)
 8008206:	7819      	ldrb	r1, [r3, #0]
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	f103 0210 	add.w	r2, r3, #16
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f004 fed2 	bl	800cfba <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8008216:	2300      	movs	r3, #0
 8008218:	e005      	b.n	8008226 <SCSI_Write10+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 800821a:	7afb      	ldrb	r3, [r7, #11]
 800821c:	4619      	mov	r1, r3
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f000 fa6e 	bl	8008700 <SCSI_ProcessWrite>
 8008224:	4603      	mov	r3, r0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3720      	adds	r7, #32
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	20000087 	.word	0x20000087

08008234 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b088      	sub	sp, #32
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	460b      	mov	r3, r1
 800823e:	607a      	str	r2, [r7, #4]
 8008240:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	32b0      	adds	r2, #176	@ 0xb0
 800824c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008250:	61fb      	str	r3, [r7, #28]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8008252:	7afb      	ldrb	r3, [r7, #11]
 8008254:	3326      	adds	r3, #38	@ 0x26
 8008256:	011b      	lsls	r3, r3, #4
 8008258:	69fa      	ldr	r2, [r7, #28]
 800825a:	4413      	add	r3, r2
 800825c:	3304      	adds	r3, #4
 800825e:	61bb      	str	r3, [r7, #24]
  uint32_t len;

  if (hmsc == NULL)
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d102      	bne.n	800826c <SCSI_Write12+0x38>
  {
    return -1;
 8008266:	f04f 33ff 	mov.w	r3, #4294967295
 800826a:	e0c4      	b.n	80083f6 <SCSI_Write12+0x1c2>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	7a1b      	ldrb	r3, [r3, #8]
 8008270:	2b00      	cmp	r3, #0
 8008272:	f040 80ba 	bne.w	80083ea <SCSI_Write12+0x1b6>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10a      	bne.n	8008296 <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008286:	2320      	movs	r3, #32
 8008288:	2205      	movs	r2, #5
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f7ff fccd 	bl	8007c2a <SCSI_SenseCode>
      return -1;
 8008290:	f04f 33ff 	mov.w	r3, #4294967295
 8008294:	e0af      	b.n	80083f6 <SCSI_Write12+0x1c2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800829c:	b25b      	sxtb	r3, r3
 800829e:	2b00      	cmp	r3, #0
 80082a0:	da0a      	bge.n	80082b8 <SCSI_Write12+0x84>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80082a8:	2320      	movs	r3, #32
 80082aa:	2205      	movs	r2, #5
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f7ff fcbc 	bl	8007c2a <SCSI_SenseCode>
      return -1;
 80082b2:	f04f 33ff 	mov.w	r3, #4294967295
 80082b6:	e09e      	b.n	80083f6 <SCSI_Write12+0x1c2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	33b0      	adds	r3, #176	@ 0xb0
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	4413      	add	r3, r2
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	7afa      	ldrb	r2, [r7, #11]
 80082cc:	4610      	mov	r0, r2
 80082ce:	4798      	blx	r3
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00b      	beq.n	80082ee <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80082d6:	7af9      	ldrb	r1, [r7, #11]
 80082d8:	233a      	movs	r3, #58	@ 0x3a
 80082da:	2202      	movs	r2, #2
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f7ff fca4 	bl	8007c2a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	2205      	movs	r2, #5
 80082e6:	721a      	strb	r2, [r3, #8]
      return -1;
 80082e8:	f04f 33ff 	mov.w	r3, #4294967295
 80082ec:	e083      	b.n	80083f6 <SCSI_Write12+0x1c2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	33b0      	adds	r3, #176	@ 0xb0
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4413      	add	r3, r2
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	7afa      	ldrb	r2, [r7, #11]
 8008302:	4610      	mov	r0, r2
 8008304:	4798      	blx	r3
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00b      	beq.n	8008324 <SCSI_Write12+0xf0>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800830c:	7af9      	ldrb	r1, [r7, #11]
 800830e:	2327      	movs	r3, #39	@ 0x27
 8008310:	2202      	movs	r2, #2
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f7ff fc89 	bl	8007c2a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	2205      	movs	r2, #5
 800831c:	721a      	strb	r2, [r3, #8]
      return -1;
 800831e:	f04f 33ff 	mov.w	r3, #4294967295
 8008322:	e068      	b.n	80083f6 <SCSI_Write12+0x1c2>
    }

    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	3302      	adds	r3, #2
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	061a      	lsls	r2, r3, #24
                       ((uint32_t)params[3] << 16) |
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	3303      	adds	r3, #3
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	041b      	lsls	r3, r3, #16
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8008334:	431a      	orrs	r2, r3
                       ((uint32_t)params[4] << 8) |
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	3304      	adds	r3, #4
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	021b      	lsls	r3, r3, #8
                       ((uint32_t)params[3] << 16) |
 800833e:	4313      	orrs	r3, r2
                       (uint32_t)params[5];
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	3205      	adds	r2, #5
 8008344:	7812      	ldrb	r2, [r2, #0]
                       ((uint32_t)params[4] << 8) |
 8008346:	431a      	orrs	r2, r3
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	609a      	str	r2, [r3, #8]

    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3306      	adds	r3, #6
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	061a      	lsls	r2, r3, #24
                      ((uint32_t)params[7] << 16) |
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	3307      	adds	r3, #7
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	041b      	lsls	r3, r3, #16
    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 800835c:	431a      	orrs	r2, r3
                      ((uint32_t)params[8] << 8) |
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	3308      	adds	r3, #8
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	021b      	lsls	r3, r3, #8
                      ((uint32_t)params[7] << 16) |
 8008366:	4313      	orrs	r3, r2
                      (uint32_t)params[9];
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	3209      	adds	r2, #9
 800836c:	7812      	ldrb	r2, [r2, #0]
                      ((uint32_t)params[8] << 8) |
 800836e:	431a      	orrs	r2, r3
    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	60da      	str	r2, [r3, #12]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	689a      	ldr	r2, [r3, #8]
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	7af9      	ldrb	r1, [r7, #11]
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f000 f90a 	bl	8008598 <SCSI_CheckAddressRange>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	da02      	bge.n	8008390 <SCSI_Write12+0x15c>
    {
      return -1; /* error */
 800838a:	f04f 33ff 	mov.w	r3, #4294967295
 800838e:	e032      	b.n	80083f6 <SCSI_Write12+0x1c2>
    }

    len = p_scsi_blk->len * p_scsi_blk->size;
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	69ba      	ldr	r2, [r7, #24]
 8008396:	8812      	ldrh	r2, [r2, #0]
 8008398:	fb02 f303 	mul.w	r3, r2, r3
 800839c:	617b      	str	r3, [r7, #20]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80083a4:	697a      	ldr	r2, [r7, #20]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d00a      	beq.n	80083c0 <SCSI_Write12+0x18c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80083b0:	2320      	movs	r3, #32
 80083b2:	2205      	movs	r2, #5
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f7ff fc38 	bl	8007c2a <SCSI_SenseCode>
      return -1;
 80083ba:	f04f 33ff 	mov.w	r3, #4294967295
 80083be:	e01a      	b.n	80083f6 <SCSI_Write12+0x1c2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083c6:	bf28      	it	cs
 80083c8:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 80083cc:	617b      	str	r3, [r7, #20]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	2201      	movs	r2, #1
 80083d2:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80083d4:	4b0a      	ldr	r3, [pc, #40]	@ (8008400 <SCSI_Write12+0x1cc>)
 80083d6:	7819      	ldrb	r1, [r3, #0]
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	f103 0210 	add.w	r2, r3, #16
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	f004 fdea 	bl	800cfba <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80083e6:	2300      	movs	r3, #0
 80083e8:	e005      	b.n	80083f6 <SCSI_Write12+0x1c2>
    return SCSI_ProcessWrite(pdev, lun);
 80083ea:	7afb      	ldrb	r3, [r7, #11]
 80083ec:	4619      	mov	r1, r3
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f000 f986 	bl	8008700 <SCSI_ProcessWrite>
 80083f4:	4603      	mov	r3, r0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3720      	adds	r7, #32
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	20000087 	.word	0x20000087

08008404 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b086      	sub	sp, #24
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	460b      	mov	r3, r1
 800840e:	607a      	str	r2, [r7, #4]
 8008410:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	32b0      	adds	r2, #176	@ 0xb0
 800841c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008420:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8008422:	7afb      	ldrb	r3, [r7, #11]
 8008424:	3326      	adds	r3, #38	@ 0x26
 8008426:	011b      	lsls	r3, r3, #4
 8008428:	697a      	ldr	r2, [r7, #20]
 800842a:	4413      	add	r3, r2
 800842c:	3304      	adds	r3, #4
 800842e:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d102      	bne.n	800843c <SCSI_Verify10+0x38>
  {
    return -1;
 8008436:	f04f 33ff 	mov.w	r3, #4294967295
 800843a:	e021      	b.n	8008480 <SCSI_Verify10+0x7c>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	3301      	adds	r3, #1
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	f003 0302 	and.w	r3, r3, #2
 8008446:	2b00      	cmp	r3, #0
 8008448:	d008      	beq.n	800845c <SCSI_Verify10+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELD_IN_COMMAND);
 800844a:	7af9      	ldrb	r1, [r7, #11]
 800844c:	2324      	movs	r3, #36	@ 0x24
 800844e:	2205      	movs	r2, #5
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	f7ff fbea 	bl	8007c2a <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8008456:	f04f 33ff 	mov.w	r3, #4294967295
 800845a:	e011      	b.n	8008480 <SCSI_Verify10+0x7c>
  }

  if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	689a      	ldr	r2, [r3, #8]
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	7af9      	ldrb	r1, [r7, #11]
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f000 f896 	bl	8008598 <SCSI_CheckAddressRange>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	da02      	bge.n	8008478 <SCSI_Verify10+0x74>
  {
    return -1; /* error */
 8008472:	f04f 33ff 	mov.w	r3, #4294967295
 8008476:	e003      	b.n	8008480 <SCSI_Verify10+0x7c>
  }

  hmsc->bot_data_length = 0U;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	2200      	movs	r2, #0
 800847c:	60da      	str	r2, [r3, #12]

  return 0;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3718      	adds	r7, #24
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <SCSI_ReportLuns>:
  * @brief  SCSI_ReportLuns12
  *         Process ReportLuns command
  * @retval status
  */
static int8_t SCSI_ReportLuns(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b088      	sub	sp, #32
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	460b      	mov	r3, r1
 8008492:	607a      	str	r2, [r7, #4]
 8008494:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);

  /* Define the report LUNs buffer Each LUN entry is 8 bytes */
  static uint8_t lun_report[8U * (MSC_BOT_MAX_LUN + 1U)];

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	32b0      	adds	r2, #176	@ 0xb0
 80084a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084a4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d102      	bne.n	80084b2 <SCSI_ReportLuns+0x2a>
  {
    return -1;
 80084ac:	f04f 33ff 	mov.w	r3, #4294967295
 80084b0:	e038      	b.n	8008524 <SCSI_ReportLuns+0x9c>
  }

  /* Initialize the report LUNs buffer */
  (void)USBD_memset(lun_report, 0, sizeof(lun_report));
 80084b2:	2218      	movs	r2, #24
 80084b4:	2100      	movs	r1, #0
 80084b6:	481d      	ldr	r0, [pc, #116]	@ (800852c <SCSI_ReportLuns+0xa4>)
 80084b8:	f004 fe34 	bl	800d124 <memset>

  /* Set the LUN list length in the first 4 bytes */
  lun_list_length = 8U * (hmsc->max_lun + 1U);
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3301      	adds	r3, #1
 80084c2:	00db      	lsls	r3, r3, #3
 80084c4:	617b      	str	r3, [r7, #20]
  lun_report[0] = (uint8_t)(lun_list_length >> 24);
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	0e1b      	lsrs	r3, r3, #24
 80084ca:	b2da      	uxtb	r2, r3
 80084cc:	4b17      	ldr	r3, [pc, #92]	@ (800852c <SCSI_ReportLuns+0xa4>)
 80084ce:	701a      	strb	r2, [r3, #0]
  lun_report[1] = (uint8_t)(lun_list_length >> 16);
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	0c1b      	lsrs	r3, r3, #16
 80084d4:	b2da      	uxtb	r2, r3
 80084d6:	4b15      	ldr	r3, [pc, #84]	@ (800852c <SCSI_ReportLuns+0xa4>)
 80084d8:	705a      	strb	r2, [r3, #1]
  lun_report[2] = (uint8_t)(lun_list_length >> 8);
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	0a1b      	lsrs	r3, r3, #8
 80084de:	b2da      	uxtb	r2, r3
 80084e0:	4b12      	ldr	r3, [pc, #72]	@ (800852c <SCSI_ReportLuns+0xa4>)
 80084e2:	709a      	strb	r2, [r3, #2]
  lun_report[3] = (uint8_t)(lun_list_length & 0xFFU);
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	b2da      	uxtb	r2, r3
 80084e8:	4b10      	ldr	r3, [pc, #64]	@ (800852c <SCSI_ReportLuns+0xa4>)
 80084ea:	70da      	strb	r2, [r3, #3]

  /* Update the LUN list */
  for (lun_idx = 0U; lun_idx <= hmsc->max_lun; lun_idx++)
 80084ec:	2300      	movs	r3, #0
 80084ee:	77fb      	strb	r3, [r7, #31]
 80084f0:	e008      	b.n	8008504 <SCSI_ReportLuns+0x7c>
  {
    /* LUN identifier is placed at the second byte of each 8-byte entry */
    lun_report[(8U * (lun_idx + 1U)) + 1U] = lun_idx;
 80084f2:	7ffb      	ldrb	r3, [r7, #31]
 80084f4:	00db      	lsls	r3, r3, #3
 80084f6:	3309      	adds	r3, #9
 80084f8:	490c      	ldr	r1, [pc, #48]	@ (800852c <SCSI_ReportLuns+0xa4>)
 80084fa:	7ffa      	ldrb	r2, [r7, #31]
 80084fc:	54ca      	strb	r2, [r1, r3]
  for (lun_idx = 0U; lun_idx <= hmsc->max_lun; lun_idx++)
 80084fe:	7ffb      	ldrb	r3, [r7, #31]
 8008500:	3301      	adds	r3, #1
 8008502:	77fb      	strb	r3, [r7, #31]
 8008504:	7ffa      	ldrb	r2, [r7, #31]
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	429a      	cmp	r2, r3
 800850c:	d9f1      	bls.n	80084f2 <SCSI_ReportLuns+0x6a>
  }

  /* Calculate the total length of the report LUNs buffer */
  total_length = lun_list_length + 8U;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	3308      	adds	r3, #8
 8008512:	613b      	str	r3, [r7, #16]

  /* Update the BOT data with the report LUNs buffer */
  (void)SCSI_UpdateBotData(hmsc, lun_report, (uint16_t)total_length);
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	b29b      	uxth	r3, r3
 8008518:	461a      	mov	r2, r3
 800851a:	4904      	ldr	r1, [pc, #16]	@ (800852c <SCSI_ReportLuns+0xa4>)
 800851c:	69b8      	ldr	r0, [r7, #24]
 800851e:	f000 f97f 	bl	8008820 <SCSI_UpdateBotData>

  return 0;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3720      	adds	r7, #32
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	20000344 	.word	0x20000344

08008530 <SCSI_ReceiveDiagnosticResults>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReceiveDiagnosticResults(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	460b      	mov	r3, r1
 800853a:	607a      	str	r2, [r7, #4]
 800853c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	32b0      	adds	r2, #176	@ 0xb0
 8008548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800854c:	613b      	str	r3, [r7, #16]
  uint16_t allocation_length;

  /* Extract the allocation length from the CDB */
  allocation_length = (((uint16_t)params[3] << 8) | (uint16_t)params[4]);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	3303      	adds	r3, #3
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	b21b      	sxth	r3, r3
 8008556:	021b      	lsls	r3, r3, #8
 8008558:	b21a      	sxth	r2, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	3304      	adds	r3, #4
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	b21b      	sxth	r3, r3
 8008562:	4313      	orrs	r3, r2
 8008564:	b21b      	sxth	r3, r3
 8008566:	82fb      	strh	r3, [r7, #22]

  if (allocation_length == 0U)
 8008568:	8afb      	ldrh	r3, [r7, #22]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d101      	bne.n	8008572 <SCSI_ReceiveDiagnosticResults+0x42>
  {
    return 0;
 800856e:	2300      	movs	r3, #0
 8008570:	e00b      	b.n	800858a <SCSI_ReceiveDiagnosticResults+0x5a>
  }

  /* Ensure the allocation length does not exceed the diagnostic data length */
  if (allocation_length > DIAGNOSTIC_DATA_LEN)
 8008572:	8afb      	ldrh	r3, [r7, #22]
 8008574:	2b08      	cmp	r3, #8
 8008576:	d901      	bls.n	800857c <SCSI_ReceiveDiagnosticResults+0x4c>
  {
    allocation_length = DIAGNOSTIC_DATA_LEN;
 8008578:	2308      	movs	r3, #8
 800857a:	82fb      	strh	r3, [r7, #22]
  }

  /* Send the diagnostic data to the host */
  (void)SCSI_UpdateBotData(hmsc, MSC_Diagnostic_Data, allocation_length);
 800857c:	8afb      	ldrh	r3, [r7, #22]
 800857e:	461a      	mov	r2, r3
 8008580:	4904      	ldr	r1, [pc, #16]	@ (8008594 <SCSI_ReceiveDiagnosticResults+0x64>)
 8008582:	6938      	ldr	r0, [r7, #16]
 8008584:	f000 f94c 	bl	8008820 <SCSI_UpdateBotData>

  return 0;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3718      	adds	r7, #24
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	2000033c 	.word	0x2000033c

08008598 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b086      	sub	sp, #24
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	607a      	str	r2, [r7, #4]
 80085a2:	603b      	str	r3, [r7, #0]
 80085a4:	460b      	mov	r3, r1
 80085a6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	32b0      	adds	r2, #176	@ 0xb0
 80085b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b6:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 80085b8:	7afb      	ldrb	r3, [r7, #11]
 80085ba:	3326      	adds	r3, #38	@ 0x26
 80085bc:	011b      	lsls	r3, r3, #4
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	4413      	add	r3, r2
 80085c2:	3304      	adds	r3, #4
 80085c4:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d102      	bne.n	80085d2 <SCSI_CheckAddressRange+0x3a>
  {
    return -1;
 80085cc:	f04f 33ff 	mov.w	r3, #4294967295
 80085d0:	e010      	b.n	80085f4 <SCSI_CheckAddressRange+0x5c>
  }

  if ((blk_offset + blk_nbr) > p_scsi_blk->nbr)
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	441a      	add	r2, r3
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d908      	bls.n	80085f2 <SCSI_CheckAddressRange+0x5a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80085e0:	7af9      	ldrb	r1, [r7, #11]
 80085e2:	2321      	movs	r3, #33	@ 0x21
 80085e4:	2205      	movs	r2, #5
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f7ff fb1f 	bl	8007c2a <SCSI_SenseCode>
    return -1;
 80085ec:	f04f 33ff 	mov.w	r3, #4294967295
 80085f0:	e000      	b.n	80085f4 <SCSI_CheckAddressRange+0x5c>
  }

  return 0;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3718      	adds	r7, #24
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80085fc:	b590      	push	{r4, r7, lr}
 80085fe:	b087      	sub	sp, #28
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	460b      	mov	r3, r1
 8008606:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	32b0      	adds	r2, #176	@ 0xb0
 8008612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008616:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8008618:	78fb      	ldrb	r3, [r7, #3]
 800861a:	3326      	adds	r3, #38	@ 0x26
 800861c:	011b      	lsls	r3, r3, #4
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	4413      	add	r3, r2
 8008622:	3304      	adds	r3, #4
 8008624:	613b      	str	r3, [r7, #16]
  uint32_t len;

  if (hmsc == NULL)
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d102      	bne.n	8008632 <SCSI_ProcessRead+0x36>
  {
    return -1;
 800862c:	f04f 33ff 	mov.w	r3, #4294967295
 8008630:	e05f      	b.n	80086f2 <SCSI_ProcessRead+0xf6>
  }

  len = p_scsi_blk->len * p_scsi_blk->size;
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	693a      	ldr	r2, [r7, #16]
 8008638:	8812      	ldrh	r2, [r2, #0]
 800863a:	fb02 f303 	mul.w	r3, r2, r3
 800863e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008646:	bf28      	it	cs
 8008648:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800864c:	60fb      	str	r3, [r7, #12]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	33b0      	adds	r3, #176	@ 0xb0
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	691c      	ldr	r4, [r3, #16]
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	f103 0110 	add.w	r1, r3, #16
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	689a      	ldr	r2, [r3, #8]
                                                                    p_scsi_blk->addr,
                                                                    (len / p_scsi_blk->size)) < 0)
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	881b      	ldrh	r3, [r3, #0]
 800866e:	4618      	mov	r0, r3
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8008676:	b29b      	uxth	r3, r3
 8008678:	78f8      	ldrb	r0, [r7, #3]
 800867a:	47a0      	blx	r4
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	da08      	bge.n	8008694 <SCSI_ProcessRead+0x98>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8008682:	78f9      	ldrb	r1, [r7, #3]
 8008684:	2311      	movs	r3, #17
 8008686:	2204      	movs	r2, #4
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f7ff face 	bl	8007c2a <SCSI_SenseCode>
    return -1;
 800868e:	f04f 33ff 	mov.w	r3, #4294967295
 8008692:	e02e      	b.n	80086f2 <SCSI_ProcessRead+0xf6>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8008694:	4b19      	ldr	r3, [pc, #100]	@ (80086fc <SCSI_ProcessRead+0x100>)
 8008696:	7819      	ldrb	r1, [r3, #0]
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	f103 0210 	add.w	r2, r3, #16
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f004 fc69 	bl	800cf78 <USBD_LL_Transmit>

  p_scsi_blk->addr += (len / p_scsi_blk->size);
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	689a      	ldr	r2, [r3, #8]
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	881b      	ldrh	r3, [r3, #0]
 80086ae:	4619      	mov	r1, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80086b6:	441a      	add	r2, r3
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	609a      	str	r2, [r3, #8]
  p_scsi_blk->len -= (len / p_scsi_blk->size);
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	68da      	ldr	r2, [r3, #12]
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	881b      	ldrh	r3, [r3, #0]
 80086c4:	4619      	mov	r1, r3
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80086cc:	1ad2      	subs	r2, r2, r3
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	60da      	str	r2, [r3, #12]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	1ad2      	subs	r2, r2, r3
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (p_scsi_blk->len == 0U)
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d102      	bne.n	80086f0 <SCSI_ProcessRead+0xf4>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	2203      	movs	r2, #3
 80086ee:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	371c      	adds	r7, #28
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd90      	pop	{r4, r7, pc}
 80086fa:	bf00      	nop
 80086fc:	20000086 	.word	0x20000086

08008700 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8008700:	b590      	push	{r4, r7, lr}
 8008702:	b087      	sub	sp, #28
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	460b      	mov	r3, r1
 800870a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	32b0      	adds	r2, #176	@ 0xb0
 8008716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800871a:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 800871c:	78fb      	ldrb	r3, [r7, #3]
 800871e:	3326      	adds	r3, #38	@ 0x26
 8008720:	011b      	lsls	r3, r3, #4
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	4413      	add	r3, r2
 8008726:	3304      	adds	r3, #4
 8008728:	613b      	str	r3, [r7, #16]
  uint32_t len;

  if (hmsc == NULL)
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d102      	bne.n	8008736 <SCSI_ProcessWrite+0x36>
  {
    return -1;
 8008730:	f04f 33ff 	mov.w	r3, #4294967295
 8008734:	e06d      	b.n	8008812 <SCSI_ProcessWrite+0x112>
  }

  len = p_scsi_blk->len * p_scsi_blk->size;
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	693a      	ldr	r2, [r7, #16]
 800873c:	8812      	ldrh	r2, [r2, #0]
 800873e:	fb02 f303 	mul.w	r3, r2, r3
 8008742:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800874a:	bf28      	it	cs
 800874c:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8008750:	60fb      	str	r3, [r7, #12]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data, p_scsi_blk->addr,
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	33b0      	adds	r3, #176	@ 0xb0
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4413      	add	r3, r2
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	695c      	ldr	r4, [r3, #20]
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	f103 0110 	add.w	r1, r3, #16
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	689a      	ldr	r2, [r3, #8]
                                                                     (len / p_scsi_blk->size)) < 0)
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	881b      	ldrh	r3, [r3, #0]
 8008772:	4618      	mov	r0, r3
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data, p_scsi_blk->addr,
 800877a:	b29b      	uxth	r3, r3
 800877c:	78f8      	ldrb	r0, [r7, #3]
 800877e:	47a0      	blx	r4
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	da08      	bge.n	8008798 <SCSI_ProcessWrite+0x98>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8008786:	78f9      	ldrb	r1, [r7, #3]
 8008788:	2303      	movs	r3, #3
 800878a:	2204      	movs	r2, #4
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7ff fa4c 	bl	8007c2a <SCSI_SenseCode>
    return -1;
 8008792:	f04f 33ff 	mov.w	r3, #4294967295
 8008796:	e03c      	b.n	8008812 <SCSI_ProcessWrite+0x112>
  }

  p_scsi_blk->addr += (len / p_scsi_blk->size);
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	689a      	ldr	r2, [r3, #8]
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	4619      	mov	r1, r3
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80087a8:	441a      	add	r2, r3
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	609a      	str	r2, [r3, #8]
  p_scsi_blk->len -= (len / p_scsi_blk->size);
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	68da      	ldr	r2, [r3, #12]
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	881b      	ldrh	r3, [r3, #0]
 80087b6:	4619      	mov	r1, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80087be:	1ad2      	subs	r2, r2, r3
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	60da      	str	r2, [r3, #12]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	1ad2      	subs	r2, r2, r3
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (p_scsi_blk->len == 0U)
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d104      	bne.n	80087e6 <SCSI_ProcessWrite+0xe6>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80087dc:	2100      	movs	r1, #0
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f7fe fc26 	bl	8007030 <MSC_BOT_SendCSW>
 80087e4:	e014      	b.n	8008810 <SCSI_ProcessWrite+0x110>
  }
  else
  {
    len = MIN((p_scsi_blk->len * p_scsi_blk->size), MSC_MEDIA_PACKET);
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	693a      	ldr	r2, [r7, #16]
 80087ec:	8812      	ldrh	r2, [r2, #0]
 80087ee:	fb02 f303 	mul.w	r3, r2, r3
 80087f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087f6:	bf28      	it	cs
 80087f8:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 80087fc:	60fb      	str	r3, [r7, #12]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80087fe:	4b07      	ldr	r3, [pc, #28]	@ (800881c <SCSI_ProcessWrite+0x11c>)
 8008800:	7819      	ldrb	r1, [r3, #0]
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	f103 0210 	add.w	r2, r3, #16
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f004 fbd5 	bl	800cfba <USBD_LL_PrepareReceive>
  }

  return 0;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	371c      	adds	r7, #28
 8008816:	46bd      	mov	sp, r7
 8008818:	bd90      	pop	{r4, r7, pc}
 800881a:	bf00      	nop
 800881c:	20000087 	.word	0x20000087

08008820 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8008820:	b480      	push	{r7}
 8008822:	b087      	sub	sp, #28
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	4613      	mov	r3, r2
 800882c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800882e:	88fb      	ldrh	r3, [r7, #6]
 8008830:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d102      	bne.n	800883e <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8008838:	f04f 33ff 	mov.w	r3, #4294967295
 800883c:	e013      	b.n	8008866 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800883e:	8afa      	ldrh	r2, [r7, #22]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8008844:	e00b      	b.n	800885e <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8008846:	8afb      	ldrh	r3, [r7, #22]
 8008848:	3b01      	subs	r3, #1
 800884a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800884c:	8afb      	ldrh	r3, [r7, #22]
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	441a      	add	r2, r3
 8008852:	8afb      	ldrh	r3, [r7, #22]
 8008854:	7811      	ldrb	r1, [r2, #0]
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	4413      	add	r3, r2
 800885a:	460a      	mov	r2, r1
 800885c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800885e:	8afb      	ldrh	r3, [r7, #22]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1f0      	bne.n	8008846 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	371c      	adds	r7, #28
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr

08008872 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b086      	sub	sp, #24
 8008876:	af00      	add	r7, sp, #0
 8008878:	60f8      	str	r0, [r7, #12]
 800887a:	60b9      	str	r1, [r7, #8]
 800887c:	4613      	mov	r3, r2
 800887e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d101      	bne.n	800888a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008886:	2303      	movs	r3, #3
 8008888:	e01f      	b.n	80088ca <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2200      	movs	r2, #0
 800888e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d003      	beq.n	80088b0 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	79fa      	ldrb	r2, [r7, #7]
 80088bc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	f004 fa00 	bl	800ccc4 <USBD_LL_Init>
 80088c4:	4603      	mov	r3, r0
 80088c6:	75fb      	strb	r3, [r7, #23]

  return ret;
 80088c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3718      	adds	r7, #24
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088dc:	2300      	movs	r3, #0
 80088de:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d101      	bne.n	80088ea <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80088e6:	2303      	movs	r3, #3
 80088e8:	e025      	b.n	8008936 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	683a      	ldr	r2, [r7, #0]
 80088ee:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	32ae      	adds	r2, #174	@ 0xae
 80088fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00f      	beq.n	8008926 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	32ae      	adds	r2, #174	@ 0xae
 8008910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008916:	f107 020e 	add.w	r2, r7, #14
 800891a:	4610      	mov	r0, r2
 800891c:	4798      	blx	r3
 800891e:	4602      	mov	r2, r0
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800892c:	1c5a      	adds	r2, r3, #1
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b082      	sub	sp, #8
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f004 fa0e 	bl	800cd68 <USBD_LL_Start>
 800894c:	4603      	mov	r3, r0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3708      	adds	r7, #8
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008956:	b480      	push	{r7}
 8008958:	b083      	sub	sp, #12
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800895e:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008960:	4618      	mov	r0, r3
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	460b      	mov	r3, r1
 8008976:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008978:	2300      	movs	r3, #0
 800897a:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008982:	2b00      	cmp	r3, #0
 8008984:	d009      	beq.n	800899a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	78fa      	ldrb	r2, [r7, #3]
 8008990:	4611      	mov	r1, r2
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	4798      	blx	r3
 8008996:	4603      	mov	r3, r0
 8008998:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800899a:	7bfb      	ldrb	r3, [r7, #15]
}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	460b      	mov	r3, r1
 80089ae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80089b0:	2300      	movs	r3, #0
 80089b2:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	78fa      	ldrb	r2, [r7, #3]
 80089be:	4611      	mov	r1, r2
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	4798      	blx	r3
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80089ca:	2303      	movs	r3, #3
 80089cc:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80089e8:	6839      	ldr	r1, [r7, #0]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f001 f921 	bl	8009c32 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80089fe:	461a      	mov	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008a0c:	f003 031f 	and.w	r3, r3, #31
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d01a      	beq.n	8008a4a <USBD_LL_SetupStage+0x72>
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	d822      	bhi.n	8008a5e <USBD_LL_SetupStage+0x86>
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d002      	beq.n	8008a22 <USBD_LL_SetupStage+0x4a>
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d00a      	beq.n	8008a36 <USBD_LL_SetupStage+0x5e>
 8008a20:	e01d      	b.n	8008a5e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a28:	4619      	mov	r1, r3
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fb76 	bl	800911c <USBD_StdDevReq>
 8008a30:	4603      	mov	r3, r0
 8008a32:	73fb      	strb	r3, [r7, #15]
      break;
 8008a34:	e020      	b.n	8008a78 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 fbde 	bl	8009200 <USBD_StdItfReq>
 8008a44:	4603      	mov	r3, r0
 8008a46:	73fb      	strb	r3, [r7, #15]
      break;
 8008a48:	e016      	b.n	8008a78 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a50:	4619      	mov	r1, r3
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fc40 	bl	80092d8 <USBD_StdEPReq>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a5c:	e00c      	b.n	8008a78 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008a64:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f004 f9fa 	bl	800ce66 <USBD_LL_StallEP>
 8008a72:	4603      	mov	r3, r0
 8008a74:	73fb      	strb	r3, [r7, #15]
      break;
 8008a76:	bf00      	nop
  }

  return ret;
 8008a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b086      	sub	sp, #24
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	60f8      	str	r0, [r7, #12]
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	607a      	str	r2, [r7, #4]
 8008a8e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a90:	2300      	movs	r3, #0
 8008a92:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8008a94:	7afb      	ldrb	r3, [r7, #11]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d177      	bne.n	8008b8a <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008aa0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008aa8:	2b03      	cmp	r3, #3
 8008aaa:	f040 80a1 	bne.w	8008bf0 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	693a      	ldr	r2, [r7, #16]
 8008ab4:	8992      	ldrh	r2, [r2, #12]
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d91c      	bls.n	8008af4 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	8992      	ldrh	r2, [r2, #12]
 8008ac2:	1a9a      	subs	r2, r3, r2
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	693a      	ldr	r2, [r7, #16]
 8008ace:	8992      	ldrh	r2, [r2, #12]
 8008ad0:	441a      	add	r2, r3
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	6919      	ldr	r1, [r3, #16]
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	899b      	ldrh	r3, [r3, #12]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	bf38      	it	cc
 8008ae8:	4613      	movcc	r3, r2
 8008aea:	461a      	mov	r2, r3
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f001 f986 	bl	8009dfe <USBD_CtlContinueRx>
 8008af2:	e07d      	b.n	8008bf0 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008afa:	f003 031f 	and.w	r3, r3, #31
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d014      	beq.n	8008b2c <USBD_LL_DataOutStage+0xaa>
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d81d      	bhi.n	8008b42 <USBD_LL_DataOutStage+0xc0>
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d002      	beq.n	8008b10 <USBD_LL_DataOutStage+0x8e>
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d003      	beq.n	8008b16 <USBD_LL_DataOutStage+0x94>
 8008b0e:	e018      	b.n	8008b42 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008b10:	2300      	movs	r3, #0
 8008b12:	75bb      	strb	r3, [r7, #22]
            break;
 8008b14:	e018      	b.n	8008b48 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	4619      	mov	r1, r3
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f000 fa6e 	bl	8009002 <USBD_CoreFindIF>
 8008b26:	4603      	mov	r3, r0
 8008b28:	75bb      	strb	r3, [r7, #22]
            break;
 8008b2a:	e00d      	b.n	8008b48 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	4619      	mov	r1, r3
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f000 fa70 	bl	800901c <USBD_CoreFindEP>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	75bb      	strb	r3, [r7, #22]
            break;
 8008b40:	e002      	b.n	8008b48 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008b42:	2300      	movs	r3, #0
 8008b44:	75bb      	strb	r3, [r7, #22]
            break;
 8008b46:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008b48:	7dbb      	ldrb	r3, [r7, #22]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d119      	bne.n	8008b82 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d113      	bne.n	8008b82 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008b5a:	7dba      	ldrb	r2, [r7, #22]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	32ae      	adds	r2, #174	@ 0xae
 8008b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00b      	beq.n	8008b82 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8008b6a:	7dba      	ldrb	r2, [r7, #22]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008b72:	7dba      	ldrb	r2, [r7, #22]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	32ae      	adds	r2, #174	@ 0xae
 8008b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f001 f94c 	bl	8009e20 <USBD_CtlSendStatus>
 8008b88:	e032      	b.n	8008bf0 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008b8a:	7afb      	ldrb	r3, [r7, #11]
 8008b8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	4619      	mov	r1, r3
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	f000 fa41 	bl	800901c <USBD_CoreFindEP>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b9e:	7dbb      	ldrb	r3, [r7, #22]
 8008ba0:	2bff      	cmp	r3, #255	@ 0xff
 8008ba2:	d025      	beq.n	8008bf0 <USBD_LL_DataOutStage+0x16e>
 8008ba4:	7dbb      	ldrb	r3, [r7, #22]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d122      	bne.n	8008bf0 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	2b03      	cmp	r3, #3
 8008bb4:	d117      	bne.n	8008be6 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008bb6:	7dba      	ldrb	r2, [r7, #22]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	32ae      	adds	r2, #174	@ 0xae
 8008bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d00f      	beq.n	8008be6 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8008bc6:	7dba      	ldrb	r2, [r7, #22]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008bce:	7dba      	ldrb	r2, [r7, #22]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	32ae      	adds	r2, #174	@ 0xae
 8008bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd8:	699b      	ldr	r3, [r3, #24]
 8008bda:	7afa      	ldrb	r2, [r7, #11]
 8008bdc:	4611      	mov	r1, r2
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	4798      	blx	r3
 8008be2:	4603      	mov	r3, r0
 8008be4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008be6:	7dfb      	ldrb	r3, [r7, #23]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d001      	beq.n	8008bf0 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8008bec:	7dfb      	ldrb	r3, [r7, #23]
 8008bee:	e000      	b.n	8008bf2 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3718      	adds	r7, #24
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b086      	sub	sp, #24
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	60f8      	str	r0, [r7, #12]
 8008c02:	460b      	mov	r3, r1
 8008c04:	607a      	str	r2, [r7, #4]
 8008c06:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8008c08:	7afb      	ldrb	r3, [r7, #11]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d178      	bne.n	8008d00 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	3314      	adds	r3, #20
 8008c12:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d163      	bne.n	8008ce6 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	693a      	ldr	r2, [r7, #16]
 8008c24:	8992      	ldrh	r2, [r2, #12]
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d91c      	bls.n	8008c64 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	693a      	ldr	r2, [r7, #16]
 8008c30:	8992      	ldrh	r2, [r2, #12]
 8008c32:	1a9a      	subs	r2, r3, r2
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	693a      	ldr	r2, [r7, #16]
 8008c3e:	8992      	ldrh	r2, [r2, #12]
 8008c40:	441a      	add	r2, r3
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	6919      	ldr	r1, [r3, #16]
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f001 f8c3 	bl	8009ddc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c56:	2300      	movs	r3, #0
 8008c58:	2200      	movs	r2, #0
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f004 f9ac 	bl	800cfba <USBD_LL_PrepareReceive>
 8008c62:	e040      	b.n	8008ce6 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	899b      	ldrh	r3, [r3, #12]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d11c      	bne.n	8008cac <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d316      	bcc.n	8008cac <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d20f      	bcs.n	8008cac <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	2100      	movs	r1, #0
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f001 f8a3 	bl	8009ddc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f004 f988 	bl	800cfba <USBD_LL_PrepareReceive>
 8008caa:	e01c      	b.n	8008ce6 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	2b03      	cmp	r3, #3
 8008cb6:	d10f      	bne.n	8008cd8 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d009      	beq.n	8008cd8 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	68f8      	ldr	r0, [r7, #12]
 8008cd6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cd8:	2180      	movs	r1, #128	@ 0x80
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f004 f8c3 	bl	800ce66 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f001 f8b0 	bl	8009e46 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d03a      	beq.n	8008d66 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f7ff fe30 	bl	8008956 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008cfe:	e032      	b.n	8008d66 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008d00:	7afb      	ldrb	r3, [r7, #11]
 8008d02:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	4619      	mov	r1, r3
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f000 f986 	bl	800901c <USBD_CoreFindEP>
 8008d10:	4603      	mov	r3, r0
 8008d12:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d14:	7dfb      	ldrb	r3, [r7, #23]
 8008d16:	2bff      	cmp	r3, #255	@ 0xff
 8008d18:	d025      	beq.n	8008d66 <USBD_LL_DataInStage+0x16c>
 8008d1a:	7dfb      	ldrb	r3, [r7, #23]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d122      	bne.n	8008d66 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	2b03      	cmp	r3, #3
 8008d2a:	d11c      	bne.n	8008d66 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008d2c:	7dfa      	ldrb	r2, [r7, #23]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	32ae      	adds	r2, #174	@ 0xae
 8008d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d014      	beq.n	8008d66 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8008d3c:	7dfa      	ldrb	r2, [r7, #23]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008d44:	7dfa      	ldrb	r2, [r7, #23]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	32ae      	adds	r2, #174	@ 0xae
 8008d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d4e:	695b      	ldr	r3, [r3, #20]
 8008d50:	7afa      	ldrb	r2, [r7, #11]
 8008d52:	4611      	mov	r1, r2
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	4798      	blx	r3
 8008d58:	4603      	mov	r3, r0
 8008d5a:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008d5c:	7dbb      	ldrb	r3, [r7, #22]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d001      	beq.n	8008d66 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8008d62:	7dbb      	ldrb	r3, [r7, #22]
 8008d64:	e000      	b.n	8008d68 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3718      	adds	r7, #24
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d014      	beq.n	8008dd6 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d00e      	beq.n	8008dd6 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	6852      	ldr	r2, [r2, #4]
 8008dc4:	b2d2      	uxtb	r2, r2
 8008dc6:	4611      	mov	r1, r2
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	4798      	blx	r3
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d001      	beq.n	8008dd6 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008dd6:	2340      	movs	r3, #64	@ 0x40
 8008dd8:	2200      	movs	r2, #0
 8008dda:	2100      	movs	r1, #0
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f003 ffde 	bl	800cd9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2240      	movs	r2, #64	@ 0x40
 8008dee:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008df2:	2340      	movs	r3, #64	@ 0x40
 8008df4:	2200      	movs	r2, #0
 8008df6:	2180      	movs	r1, #128	@ 0x80
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f003 ffd0 	bl	800cd9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2201      	movs	r2, #1
 8008e02:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2240      	movs	r2, #64	@ 0x40
 8008e0a:	841a      	strh	r2, [r3, #32]

  return ret;
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008e16:	b480      	push	{r7}
 8008e18:	b083      	sub	sp, #12
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	460b      	mov	r3, r1
 8008e20:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	78fa      	ldrb	r2, [r7, #3]
 8008e26:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	370c      	adds	r7, #12
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr

08008e36 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e36:	b480      	push	{r7}
 8008e38:	b083      	sub	sp, #12
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	2b04      	cmp	r3, #4
 8008e48:	d006      	beq.n	8008e58 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e50:	b2da      	uxtb	r2, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2204      	movs	r2, #4
 8008e5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	370c      	adds	r7, #12
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008e6e:	b480      	push	{r7}
 8008e70:	b083      	sub	sp, #12
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	2b04      	cmp	r3, #4
 8008e80:	d106      	bne.n	8008e90 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008e88:	b2da      	uxtb	r2, r3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	370c      	adds	r7, #12
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr

08008e9e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b082      	sub	sp, #8
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	2b03      	cmp	r3, #3
 8008eb0:	d110      	bne.n	8008ed4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00b      	beq.n	8008ed4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ec2:	69db      	ldr	r3, [r3, #28]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d005      	beq.n	8008ed4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ece:	69db      	ldr	r3, [r3, #28]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b082      	sub	sp, #8
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	32ae      	adds	r2, #174	@ 0xae
 8008ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d101      	bne.n	8008f00 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008efc:	2303      	movs	r3, #3
 8008efe:	e01c      	b.n	8008f3a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	2b03      	cmp	r3, #3
 8008f0a:	d115      	bne.n	8008f38 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	32ae      	adds	r2, #174	@ 0xae
 8008f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f1a:	6a1b      	ldr	r3, [r3, #32]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00b      	beq.n	8008f38 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	32ae      	adds	r2, #174	@ 0xae
 8008f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f2e:	6a1b      	ldr	r3, [r3, #32]
 8008f30:	78fa      	ldrb	r2, [r7, #3]
 8008f32:	4611      	mov	r1, r2
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b082      	sub	sp, #8
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	32ae      	adds	r2, #174	@ 0xae
 8008f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d101      	bne.n	8008f64 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f60:	2303      	movs	r3, #3
 8008f62:	e01c      	b.n	8008f9e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b03      	cmp	r3, #3
 8008f6e:	d115      	bne.n	8008f9c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	32ae      	adds	r2, #174	@ 0xae
 8008f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d00b      	beq.n	8008f9c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	32ae      	adds	r2, #174	@ 0xae
 8008f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f94:	78fa      	ldrb	r2, [r7, #3]
 8008f96:	4611      	mov	r1, r2
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b083      	sub	sp, #12
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00e      	beq.n	8008ff8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	6852      	ldr	r2, [r2, #4]
 8008fe6:	b2d2      	uxtb	r2, r2
 8008fe8:	4611      	mov	r1, r2
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	4798      	blx	r3
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d001      	beq.n	8008ff8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009002:	b480      	push	{r7}
 8009004:	b083      	sub	sp, #12
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
 800900a:	460b      	mov	r3, r1
 800900c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800900e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009010:	4618      	mov	r0, r3
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	460b      	mov	r3, r1
 8009026:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009028:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800902a:	4618      	mov	r0, r3
 800902c:	370c      	adds	r7, #12
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr

08009036 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b086      	sub	sp, #24
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
 800903e:	460b      	mov	r3, r1
 8009040:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800904a:	2300      	movs	r3, #0
 800904c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	885b      	ldrh	r3, [r3, #2]
 8009052:	b29b      	uxth	r3, r3
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	7812      	ldrb	r2, [r2, #0]
 8009058:	4293      	cmp	r3, r2
 800905a:	d91f      	bls.n	800909c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009062:	e013      	b.n	800908c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009064:	f107 030a 	add.w	r3, r7, #10
 8009068:	4619      	mov	r1, r3
 800906a:	6978      	ldr	r0, [r7, #20]
 800906c:	f000 f81b 	bl	80090a6 <USBD_GetNextDesc>
 8009070:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	785b      	ldrb	r3, [r3, #1]
 8009076:	2b05      	cmp	r3, #5
 8009078:	d108      	bne.n	800908c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	789b      	ldrb	r3, [r3, #2]
 8009082:	78fa      	ldrb	r2, [r7, #3]
 8009084:	429a      	cmp	r2, r3
 8009086:	d008      	beq.n	800909a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009088:	2300      	movs	r3, #0
 800908a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	885b      	ldrh	r3, [r3, #2]
 8009090:	b29a      	uxth	r2, r3
 8009092:	897b      	ldrh	r3, [r7, #10]
 8009094:	429a      	cmp	r2, r3
 8009096:	d8e5      	bhi.n	8009064 <USBD_GetEpDesc+0x2e>
 8009098:	e000      	b.n	800909c <USBD_GetEpDesc+0x66>
          break;
 800909a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800909c:	693b      	ldr	r3, [r7, #16]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3718      	adds	r7, #24
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80090a6:	b480      	push	{r7}
 80090a8:	b085      	sub	sp, #20
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	881b      	ldrh	r3, [r3, #0]
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	7812      	ldrb	r2, [r2, #0]
 80090bc:	4413      	add	r3, r2
 80090be:	b29a      	uxth	r2, r3
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	461a      	mov	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4413      	add	r3, r2
 80090ce:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80090d0:	68fb      	ldr	r3, [r7, #12]
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3714      	adds	r7, #20
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr

080090de <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80090de:	b480      	push	{r7}
 80090e0:	b087      	sub	sp, #28
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	3301      	adds	r3, #1
 80090f4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80090fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009100:	021b      	lsls	r3, r3, #8
 8009102:	b21a      	sxth	r2, r3
 8009104:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009108:	4313      	orrs	r3, r2
 800910a:	b21b      	sxth	r3, r3
 800910c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800910e:	89fb      	ldrh	r3, [r7, #14]
}
 8009110:	4618      	mov	r0, r3
 8009112:	371c      	adds	r7, #28
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009126:	2300      	movs	r3, #0
 8009128:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009132:	2b40      	cmp	r3, #64	@ 0x40
 8009134:	d005      	beq.n	8009142 <USBD_StdDevReq+0x26>
 8009136:	2b40      	cmp	r3, #64	@ 0x40
 8009138:	d857      	bhi.n	80091ea <USBD_StdDevReq+0xce>
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00f      	beq.n	800915e <USBD_StdDevReq+0x42>
 800913e:	2b20      	cmp	r3, #32
 8009140:	d153      	bne.n	80091ea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	32ae      	adds	r2, #174	@ 0xae
 800914c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	6839      	ldr	r1, [r7, #0]
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	4798      	blx	r3
 8009158:	4603      	mov	r3, r0
 800915a:	73fb      	strb	r3, [r7, #15]
      break;
 800915c:	e04a      	b.n	80091f4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	785b      	ldrb	r3, [r3, #1]
 8009162:	2b09      	cmp	r3, #9
 8009164:	d83b      	bhi.n	80091de <USBD_StdDevReq+0xc2>
 8009166:	a201      	add	r2, pc, #4	@ (adr r2, 800916c <USBD_StdDevReq+0x50>)
 8009168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916c:	080091c1 	.word	0x080091c1
 8009170:	080091d5 	.word	0x080091d5
 8009174:	080091df 	.word	0x080091df
 8009178:	080091cb 	.word	0x080091cb
 800917c:	080091df 	.word	0x080091df
 8009180:	0800919f 	.word	0x0800919f
 8009184:	08009195 	.word	0x08009195
 8009188:	080091df 	.word	0x080091df
 800918c:	080091b7 	.word	0x080091b7
 8009190:	080091a9 	.word	0x080091a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fa3e 	bl	8009618 <USBD_GetDescriptor>
          break;
 800919c:	e024      	b.n	80091e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800919e:	6839      	ldr	r1, [r7, #0]
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fba3 	bl	80098ec <USBD_SetAddress>
          break;
 80091a6:	e01f      	b.n	80091e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80091a8:	6839      	ldr	r1, [r7, #0]
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fbe2 	bl	8009974 <USBD_SetConfig>
 80091b0:	4603      	mov	r3, r0
 80091b2:	73fb      	strb	r3, [r7, #15]
          break;
 80091b4:	e018      	b.n	80091e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80091b6:	6839      	ldr	r1, [r7, #0]
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fc85 	bl	8009ac8 <USBD_GetConfig>
          break;
 80091be:	e013      	b.n	80091e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 fcb6 	bl	8009b34 <USBD_GetStatus>
          break;
 80091c8:	e00e      	b.n	80091e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80091ca:	6839      	ldr	r1, [r7, #0]
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 fce5 	bl	8009b9c <USBD_SetFeature>
          break;
 80091d2:	e009      	b.n	80091e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fd09 	bl	8009bee <USBD_ClrFeature>
          break;
 80091dc:	e004      	b.n	80091e8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80091de:	6839      	ldr	r1, [r7, #0]
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fd60 	bl	8009ca6 <USBD_CtlError>
          break;
 80091e6:	bf00      	nop
      }
      break;
 80091e8:	e004      	b.n	80091f4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80091ea:	6839      	ldr	r1, [r7, #0]
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 fd5a 	bl	8009ca6 <USBD_CtlError>
      break;
 80091f2:	bf00      	nop
  }

  return ret;
 80091f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop

08009200 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009216:	2b40      	cmp	r3, #64	@ 0x40
 8009218:	d005      	beq.n	8009226 <USBD_StdItfReq+0x26>
 800921a:	2b40      	cmp	r3, #64	@ 0x40
 800921c:	d852      	bhi.n	80092c4 <USBD_StdItfReq+0xc4>
 800921e:	2b00      	cmp	r3, #0
 8009220:	d001      	beq.n	8009226 <USBD_StdItfReq+0x26>
 8009222:	2b20      	cmp	r3, #32
 8009224:	d14e      	bne.n	80092c4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800922c:	b2db      	uxtb	r3, r3
 800922e:	3b01      	subs	r3, #1
 8009230:	2b02      	cmp	r3, #2
 8009232:	d840      	bhi.n	80092b6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	889b      	ldrh	r3, [r3, #4]
 8009238:	b2db      	uxtb	r3, r3
 800923a:	2b01      	cmp	r3, #1
 800923c:	d836      	bhi.n	80092ac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	889b      	ldrh	r3, [r3, #4]
 8009242:	b2db      	uxtb	r3, r3
 8009244:	4619      	mov	r1, r3
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f7ff fedb 	bl	8009002 <USBD_CoreFindIF>
 800924c:	4603      	mov	r3, r0
 800924e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009250:	7bbb      	ldrb	r3, [r7, #14]
 8009252:	2bff      	cmp	r3, #255	@ 0xff
 8009254:	d01d      	beq.n	8009292 <USBD_StdItfReq+0x92>
 8009256:	7bbb      	ldrb	r3, [r7, #14]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d11a      	bne.n	8009292 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800925c:	7bba      	ldrb	r2, [r7, #14]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	32ae      	adds	r2, #174	@ 0xae
 8009262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00f      	beq.n	800928c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800926c:	7bba      	ldrb	r2, [r7, #14]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009274:	7bba      	ldrb	r2, [r7, #14]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	32ae      	adds	r2, #174	@ 0xae
 800927a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	6839      	ldr	r1, [r7, #0]
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	4798      	blx	r3
 8009286:	4603      	mov	r3, r0
 8009288:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800928a:	e004      	b.n	8009296 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800928c:	2303      	movs	r3, #3
 800928e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009290:	e001      	b.n	8009296 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009292:	2303      	movs	r3, #3
 8009294:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	88db      	ldrh	r3, [r3, #6]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d110      	bne.n	80092c0 <USBD_StdItfReq+0xc0>
 800929e:	7bfb      	ldrb	r3, [r7, #15]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10d      	bne.n	80092c0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 fdbb 	bl	8009e20 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80092aa:	e009      	b.n	80092c0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 fcf9 	bl	8009ca6 <USBD_CtlError>
          break;
 80092b4:	e004      	b.n	80092c0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80092b6:	6839      	ldr	r1, [r7, #0]
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 fcf4 	bl	8009ca6 <USBD_CtlError>
          break;
 80092be:	e000      	b.n	80092c2 <USBD_StdItfReq+0xc2>
          break;
 80092c0:	bf00      	nop
      }
      break;
 80092c2:	e004      	b.n	80092ce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80092c4:	6839      	ldr	r1, [r7, #0]
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 fced 	bl	8009ca6 <USBD_CtlError>
      break;
 80092cc:	bf00      	nop
  }

  return ret;
 80092ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80092e2:	2300      	movs	r3, #0
 80092e4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	889b      	ldrh	r3, [r3, #4]
 80092ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80092f4:	2b40      	cmp	r3, #64	@ 0x40
 80092f6:	d007      	beq.n	8009308 <USBD_StdEPReq+0x30>
 80092f8:	2b40      	cmp	r3, #64	@ 0x40
 80092fa:	f200 8181 	bhi.w	8009600 <USBD_StdEPReq+0x328>
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d02a      	beq.n	8009358 <USBD_StdEPReq+0x80>
 8009302:	2b20      	cmp	r3, #32
 8009304:	f040 817c 	bne.w	8009600 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009308:	7bbb      	ldrb	r3, [r7, #14]
 800930a:	4619      	mov	r1, r3
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f7ff fe85 	bl	800901c <USBD_CoreFindEP>
 8009312:	4603      	mov	r3, r0
 8009314:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009316:	7b7b      	ldrb	r3, [r7, #13]
 8009318:	2bff      	cmp	r3, #255	@ 0xff
 800931a:	f000 8176 	beq.w	800960a <USBD_StdEPReq+0x332>
 800931e:	7b7b      	ldrb	r3, [r7, #13]
 8009320:	2b00      	cmp	r3, #0
 8009322:	f040 8172 	bne.w	800960a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8009326:	7b7a      	ldrb	r2, [r7, #13]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800932e:	7b7a      	ldrb	r2, [r7, #13]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	32ae      	adds	r2, #174	@ 0xae
 8009334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	2b00      	cmp	r3, #0
 800933c:	f000 8165 	beq.w	800960a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009340:	7b7a      	ldrb	r2, [r7, #13]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	32ae      	adds	r2, #174	@ 0xae
 8009346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	6839      	ldr	r1, [r7, #0]
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	4798      	blx	r3
 8009352:	4603      	mov	r3, r0
 8009354:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009356:	e158      	b.n	800960a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	785b      	ldrb	r3, [r3, #1]
 800935c:	2b03      	cmp	r3, #3
 800935e:	d008      	beq.n	8009372 <USBD_StdEPReq+0x9a>
 8009360:	2b03      	cmp	r3, #3
 8009362:	f300 8147 	bgt.w	80095f4 <USBD_StdEPReq+0x31c>
 8009366:	2b00      	cmp	r3, #0
 8009368:	f000 809b 	beq.w	80094a2 <USBD_StdEPReq+0x1ca>
 800936c:	2b01      	cmp	r3, #1
 800936e:	d03c      	beq.n	80093ea <USBD_StdEPReq+0x112>
 8009370:	e140      	b.n	80095f4 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009378:	b2db      	uxtb	r3, r3
 800937a:	2b02      	cmp	r3, #2
 800937c:	d002      	beq.n	8009384 <USBD_StdEPReq+0xac>
 800937e:	2b03      	cmp	r3, #3
 8009380:	d016      	beq.n	80093b0 <USBD_StdEPReq+0xd8>
 8009382:	e02c      	b.n	80093de <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009384:	7bbb      	ldrb	r3, [r7, #14]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00d      	beq.n	80093a6 <USBD_StdEPReq+0xce>
 800938a:	7bbb      	ldrb	r3, [r7, #14]
 800938c:	2b80      	cmp	r3, #128	@ 0x80
 800938e:	d00a      	beq.n	80093a6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009390:	7bbb      	ldrb	r3, [r7, #14]
 8009392:	4619      	mov	r1, r3
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f003 fd66 	bl	800ce66 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800939a:	2180      	movs	r1, #128	@ 0x80
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f003 fd62 	bl	800ce66 <USBD_LL_StallEP>
 80093a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093a4:	e020      	b.n	80093e8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80093a6:	6839      	ldr	r1, [r7, #0]
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 fc7c 	bl	8009ca6 <USBD_CtlError>
              break;
 80093ae:	e01b      	b.n	80093e8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	885b      	ldrh	r3, [r3, #2]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d10e      	bne.n	80093d6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80093b8:	7bbb      	ldrb	r3, [r7, #14]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00b      	beq.n	80093d6 <USBD_StdEPReq+0xfe>
 80093be:	7bbb      	ldrb	r3, [r7, #14]
 80093c0:	2b80      	cmp	r3, #128	@ 0x80
 80093c2:	d008      	beq.n	80093d6 <USBD_StdEPReq+0xfe>
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	88db      	ldrh	r3, [r3, #6]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d104      	bne.n	80093d6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80093cc:	7bbb      	ldrb	r3, [r7, #14]
 80093ce:	4619      	mov	r1, r3
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f003 fd48 	bl	800ce66 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 fd22 	bl	8009e20 <USBD_CtlSendStatus>

              break;
 80093dc:	e004      	b.n	80093e8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80093de:	6839      	ldr	r1, [r7, #0]
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 fc60 	bl	8009ca6 <USBD_CtlError>
              break;
 80093e6:	bf00      	nop
          }
          break;
 80093e8:	e109      	b.n	80095fe <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d002      	beq.n	80093fc <USBD_StdEPReq+0x124>
 80093f6:	2b03      	cmp	r3, #3
 80093f8:	d016      	beq.n	8009428 <USBD_StdEPReq+0x150>
 80093fa:	e04b      	b.n	8009494 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093fc:	7bbb      	ldrb	r3, [r7, #14]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00d      	beq.n	800941e <USBD_StdEPReq+0x146>
 8009402:	7bbb      	ldrb	r3, [r7, #14]
 8009404:	2b80      	cmp	r3, #128	@ 0x80
 8009406:	d00a      	beq.n	800941e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009408:	7bbb      	ldrb	r3, [r7, #14]
 800940a:	4619      	mov	r1, r3
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f003 fd2a 	bl	800ce66 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009412:	2180      	movs	r1, #128	@ 0x80
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f003 fd26 	bl	800ce66 <USBD_LL_StallEP>
 800941a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800941c:	e040      	b.n	80094a0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800941e:	6839      	ldr	r1, [r7, #0]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 fc40 	bl	8009ca6 <USBD_CtlError>
              break;
 8009426:	e03b      	b.n	80094a0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	885b      	ldrh	r3, [r3, #2]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d136      	bne.n	800949e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009430:	7bbb      	ldrb	r3, [r7, #14]
 8009432:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009436:	2b00      	cmp	r3, #0
 8009438:	d004      	beq.n	8009444 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800943a:	7bbb      	ldrb	r3, [r7, #14]
 800943c:	4619      	mov	r1, r3
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f003 fd30 	bl	800cea4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 fceb 	bl	8009e20 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800944a:	7bbb      	ldrb	r3, [r7, #14]
 800944c:	4619      	mov	r1, r3
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f7ff fde4 	bl	800901c <USBD_CoreFindEP>
 8009454:	4603      	mov	r3, r0
 8009456:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009458:	7b7b      	ldrb	r3, [r7, #13]
 800945a:	2bff      	cmp	r3, #255	@ 0xff
 800945c:	d01f      	beq.n	800949e <USBD_StdEPReq+0x1c6>
 800945e:	7b7b      	ldrb	r3, [r7, #13]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d11c      	bne.n	800949e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009464:	7b7a      	ldrb	r2, [r7, #13]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800946c:	7b7a      	ldrb	r2, [r7, #13]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	32ae      	adds	r2, #174	@ 0xae
 8009472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d010      	beq.n	800949e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800947c:	7b7a      	ldrb	r2, [r7, #13]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	32ae      	adds	r2, #174	@ 0xae
 8009482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	4798      	blx	r3
 800948e:	4603      	mov	r3, r0
 8009490:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009492:	e004      	b.n	800949e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009494:	6839      	ldr	r1, [r7, #0]
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 fc05 	bl	8009ca6 <USBD_CtlError>
              break;
 800949c:	e000      	b.n	80094a0 <USBD_StdEPReq+0x1c8>
              break;
 800949e:	bf00      	nop
          }
          break;
 80094a0:	e0ad      	b.n	80095fe <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d002      	beq.n	80094b4 <USBD_StdEPReq+0x1dc>
 80094ae:	2b03      	cmp	r3, #3
 80094b0:	d033      	beq.n	800951a <USBD_StdEPReq+0x242>
 80094b2:	e099      	b.n	80095e8 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094b4:	7bbb      	ldrb	r3, [r7, #14]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d007      	beq.n	80094ca <USBD_StdEPReq+0x1f2>
 80094ba:	7bbb      	ldrb	r3, [r7, #14]
 80094bc:	2b80      	cmp	r3, #128	@ 0x80
 80094be:	d004      	beq.n	80094ca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80094c0:	6839      	ldr	r1, [r7, #0]
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 fbef 	bl	8009ca6 <USBD_CtlError>
                break;
 80094c8:	e093      	b.n	80095f2 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	da0b      	bge.n	80094ea <USBD_StdEPReq+0x212>
 80094d2:	7bbb      	ldrb	r3, [r7, #14]
 80094d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094d8:	4613      	mov	r3, r2
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	4413      	add	r3, r2
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	3310      	adds	r3, #16
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	4413      	add	r3, r2
 80094e6:	3304      	adds	r3, #4
 80094e8:	e00b      	b.n	8009502 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094ea:	7bbb      	ldrb	r3, [r7, #14]
 80094ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094f0:	4613      	mov	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	4413      	add	r3, r2
 8009500:	3304      	adds	r3, #4
 8009502:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	2200      	movs	r2, #0
 8009508:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	330e      	adds	r3, #14
 800950e:	2202      	movs	r2, #2
 8009510:	4619      	mov	r1, r3
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fc44 	bl	8009da0 <USBD_CtlSendData>
              break;
 8009518:	e06b      	b.n	80095f2 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800951a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800951e:	2b00      	cmp	r3, #0
 8009520:	da11      	bge.n	8009546 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009522:	7bbb      	ldrb	r3, [r7, #14]
 8009524:	f003 020f 	and.w	r2, r3, #15
 8009528:	6879      	ldr	r1, [r7, #4]
 800952a:	4613      	mov	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	4413      	add	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	440b      	add	r3, r1
 8009534:	3323      	adds	r3, #35	@ 0x23
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d117      	bne.n	800956c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 fbb1 	bl	8009ca6 <USBD_CtlError>
                  break;
 8009544:	e055      	b.n	80095f2 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009546:	7bbb      	ldrb	r3, [r7, #14]
 8009548:	f003 020f 	and.w	r2, r3, #15
 800954c:	6879      	ldr	r1, [r7, #4]
 800954e:	4613      	mov	r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	4413      	add	r3, r2
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	440b      	add	r3, r1
 8009558:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d104      	bne.n	800956c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009562:	6839      	ldr	r1, [r7, #0]
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fb9e 	bl	8009ca6 <USBD_CtlError>
                  break;
 800956a:	e042      	b.n	80095f2 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800956c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009570:	2b00      	cmp	r3, #0
 8009572:	da0b      	bge.n	800958c <USBD_StdEPReq+0x2b4>
 8009574:	7bbb      	ldrb	r3, [r7, #14]
 8009576:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800957a:	4613      	mov	r3, r2
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	4413      	add	r3, r2
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	3310      	adds	r3, #16
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	4413      	add	r3, r2
 8009588:	3304      	adds	r3, #4
 800958a:	e00b      	b.n	80095a4 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800958c:	7bbb      	ldrb	r3, [r7, #14]
 800958e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009592:	4613      	mov	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4413      	add	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	4413      	add	r3, r2
 80095a2:	3304      	adds	r3, #4
 80095a4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80095a6:	7bbb      	ldrb	r3, [r7, #14]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d002      	beq.n	80095b2 <USBD_StdEPReq+0x2da>
 80095ac:	7bbb      	ldrb	r3, [r7, #14]
 80095ae:	2b80      	cmp	r3, #128	@ 0x80
 80095b0:	d103      	bne.n	80095ba <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	2200      	movs	r2, #0
 80095b6:	739a      	strb	r2, [r3, #14]
 80095b8:	e00e      	b.n	80095d8 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80095ba:	7bbb      	ldrb	r3, [r7, #14]
 80095bc:	4619      	mov	r1, r3
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f003 fc8f 	bl	800cee2 <USBD_LL_IsStallEP>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d003      	beq.n	80095d2 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	2201      	movs	r2, #1
 80095ce:	739a      	strb	r2, [r3, #14]
 80095d0:	e002      	b.n	80095d8 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2200      	movs	r2, #0
 80095d6:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	330e      	adds	r3, #14
 80095dc:	2202      	movs	r2, #2
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 fbdd 	bl	8009da0 <USBD_CtlSendData>
              break;
 80095e6:	e004      	b.n	80095f2 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80095e8:	6839      	ldr	r1, [r7, #0]
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 fb5b 	bl	8009ca6 <USBD_CtlError>
              break;
 80095f0:	bf00      	nop
          }
          break;
 80095f2:	e004      	b.n	80095fe <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80095f4:	6839      	ldr	r1, [r7, #0]
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 fb55 	bl	8009ca6 <USBD_CtlError>
          break;
 80095fc:	bf00      	nop
      }
      break;
 80095fe:	e005      	b.n	800960c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8009600:	6839      	ldr	r1, [r7, #0]
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fb4f 	bl	8009ca6 <USBD_CtlError>
      break;
 8009608:	e000      	b.n	800960c <USBD_StdEPReq+0x334>
      break;
 800960a:	bf00      	nop
  }

  return ret;
 800960c:	7bfb      	ldrb	r3, [r7, #15]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
	...

08009618 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009622:	2300      	movs	r3, #0
 8009624:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009626:	2300      	movs	r3, #0
 8009628:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800962a:	2300      	movs	r3, #0
 800962c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	885b      	ldrh	r3, [r3, #2]
 8009632:	0a1b      	lsrs	r3, r3, #8
 8009634:	b29b      	uxth	r3, r3
 8009636:	3b01      	subs	r3, #1
 8009638:	2b06      	cmp	r3, #6
 800963a:	f200 8128 	bhi.w	800988e <USBD_GetDescriptor+0x276>
 800963e:	a201      	add	r2, pc, #4	@ (adr r2, 8009644 <USBD_GetDescriptor+0x2c>)
 8009640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009644:	08009661 	.word	0x08009661
 8009648:	08009679 	.word	0x08009679
 800964c:	080096b9 	.word	0x080096b9
 8009650:	0800988f 	.word	0x0800988f
 8009654:	0800988f 	.word	0x0800988f
 8009658:	0800982f 	.word	0x0800982f
 800965c:	0800985b 	.word	0x0800985b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	7c12      	ldrb	r2, [r2, #16]
 800966c:	f107 0108 	add.w	r1, r7, #8
 8009670:	4610      	mov	r0, r2
 8009672:	4798      	blx	r3
 8009674:	60f8      	str	r0, [r7, #12]
      break;
 8009676:	e112      	b.n	800989e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	7c1b      	ldrb	r3, [r3, #16]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d10d      	bne.n	800969c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009688:	f107 0208 	add.w	r2, r7, #8
 800968c:	4610      	mov	r0, r2
 800968e:	4798      	blx	r3
 8009690:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	3301      	adds	r3, #1
 8009696:	2202      	movs	r2, #2
 8009698:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800969a:	e100      	b.n	800989e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a4:	f107 0208 	add.w	r2, r7, #8
 80096a8:	4610      	mov	r0, r2
 80096aa:	4798      	blx	r3
 80096ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	3301      	adds	r3, #1
 80096b2:	2202      	movs	r2, #2
 80096b4:	701a      	strb	r2, [r3, #0]
      break;
 80096b6:	e0f2      	b.n	800989e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	885b      	ldrh	r3, [r3, #2]
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	2b05      	cmp	r3, #5
 80096c0:	f200 80ac 	bhi.w	800981c <USBD_GetDescriptor+0x204>
 80096c4:	a201      	add	r2, pc, #4	@ (adr r2, 80096cc <USBD_GetDescriptor+0xb4>)
 80096c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ca:	bf00      	nop
 80096cc:	080096e5 	.word	0x080096e5
 80096d0:	08009719 	.word	0x08009719
 80096d4:	0800974d 	.word	0x0800974d
 80096d8:	08009781 	.word	0x08009781
 80096dc:	080097b5 	.word	0x080097b5
 80096e0:	080097e9 	.word	0x080097e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d00b      	beq.n	8009708 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	7c12      	ldrb	r2, [r2, #16]
 80096fc:	f107 0108 	add.w	r1, r7, #8
 8009700:	4610      	mov	r0, r2
 8009702:	4798      	blx	r3
 8009704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009706:	e091      	b.n	800982c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009708:	6839      	ldr	r1, [r7, #0]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 facb 	bl	8009ca6 <USBD_CtlError>
            err++;
 8009710:	7afb      	ldrb	r3, [r7, #11]
 8009712:	3301      	adds	r3, #1
 8009714:	72fb      	strb	r3, [r7, #11]
          break;
 8009716:	e089      	b.n	800982c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00b      	beq.n	800973c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	7c12      	ldrb	r2, [r2, #16]
 8009730:	f107 0108 	add.w	r1, r7, #8
 8009734:	4610      	mov	r0, r2
 8009736:	4798      	blx	r3
 8009738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800973a:	e077      	b.n	800982c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800973c:	6839      	ldr	r1, [r7, #0]
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 fab1 	bl	8009ca6 <USBD_CtlError>
            err++;
 8009744:	7afb      	ldrb	r3, [r7, #11]
 8009746:	3301      	adds	r3, #1
 8009748:	72fb      	strb	r3, [r7, #11]
          break;
 800974a:	e06f      	b.n	800982c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d00b      	beq.n	8009770 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	7c12      	ldrb	r2, [r2, #16]
 8009764:	f107 0108 	add.w	r1, r7, #8
 8009768:	4610      	mov	r0, r2
 800976a:	4798      	blx	r3
 800976c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800976e:	e05d      	b.n	800982c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009770:	6839      	ldr	r1, [r7, #0]
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 fa97 	bl	8009ca6 <USBD_CtlError>
            err++;
 8009778:	7afb      	ldrb	r3, [r7, #11]
 800977a:	3301      	adds	r3, #1
 800977c:	72fb      	strb	r3, [r7, #11]
          break;
 800977e:	e055      	b.n	800982c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009786:	691b      	ldr	r3, [r3, #16]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00b      	beq.n	80097a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009792:	691b      	ldr	r3, [r3, #16]
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	7c12      	ldrb	r2, [r2, #16]
 8009798:	f107 0108 	add.w	r1, r7, #8
 800979c:	4610      	mov	r0, r2
 800979e:	4798      	blx	r3
 80097a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097a2:	e043      	b.n	800982c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097a4:	6839      	ldr	r1, [r7, #0]
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 fa7d 	bl	8009ca6 <USBD_CtlError>
            err++;
 80097ac:	7afb      	ldrb	r3, [r7, #11]
 80097ae:	3301      	adds	r3, #1
 80097b0:	72fb      	strb	r3, [r7, #11]
          break;
 80097b2:	e03b      	b.n	800982c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097ba:	695b      	ldr	r3, [r3, #20]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00b      	beq.n	80097d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097c6:	695b      	ldr	r3, [r3, #20]
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	7c12      	ldrb	r2, [r2, #16]
 80097cc:	f107 0108 	add.w	r1, r7, #8
 80097d0:	4610      	mov	r0, r2
 80097d2:	4798      	blx	r3
 80097d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097d6:	e029      	b.n	800982c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097d8:	6839      	ldr	r1, [r7, #0]
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 fa63 	bl	8009ca6 <USBD_CtlError>
            err++;
 80097e0:	7afb      	ldrb	r3, [r7, #11]
 80097e2:	3301      	adds	r3, #1
 80097e4:	72fb      	strb	r3, [r7, #11]
          break;
 80097e6:	e021      	b.n	800982c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097ee:	699b      	ldr	r3, [r3, #24]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00b      	beq.n	800980c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097fa:	699b      	ldr	r3, [r3, #24]
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	7c12      	ldrb	r2, [r2, #16]
 8009800:	f107 0108 	add.w	r1, r7, #8
 8009804:	4610      	mov	r0, r2
 8009806:	4798      	blx	r3
 8009808:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800980a:	e00f      	b.n	800982c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 fa49 	bl	8009ca6 <USBD_CtlError>
            err++;
 8009814:	7afb      	ldrb	r3, [r7, #11]
 8009816:	3301      	adds	r3, #1
 8009818:	72fb      	strb	r3, [r7, #11]
          break;
 800981a:	e007      	b.n	800982c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800981c:	6839      	ldr	r1, [r7, #0]
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 fa41 	bl	8009ca6 <USBD_CtlError>
          err++;
 8009824:	7afb      	ldrb	r3, [r7, #11]
 8009826:	3301      	adds	r3, #1
 8009828:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800982a:	bf00      	nop
      }
      break;
 800982c:	e037      	b.n	800989e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	7c1b      	ldrb	r3, [r3, #16]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d109      	bne.n	800984a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800983c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800983e:	f107 0208 	add.w	r2, r7, #8
 8009842:	4610      	mov	r0, r2
 8009844:	4798      	blx	r3
 8009846:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009848:	e029      	b.n	800989e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800984a:	6839      	ldr	r1, [r7, #0]
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fa2a 	bl	8009ca6 <USBD_CtlError>
        err++;
 8009852:	7afb      	ldrb	r3, [r7, #11]
 8009854:	3301      	adds	r3, #1
 8009856:	72fb      	strb	r3, [r7, #11]
      break;
 8009858:	e021      	b.n	800989e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	7c1b      	ldrb	r3, [r3, #16]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10d      	bne.n	800987e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800986a:	f107 0208 	add.w	r2, r7, #8
 800986e:	4610      	mov	r0, r2
 8009870:	4798      	blx	r3
 8009872:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	3301      	adds	r3, #1
 8009878:	2207      	movs	r2, #7
 800987a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800987c:	e00f      	b.n	800989e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800987e:	6839      	ldr	r1, [r7, #0]
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 fa10 	bl	8009ca6 <USBD_CtlError>
        err++;
 8009886:	7afb      	ldrb	r3, [r7, #11]
 8009888:	3301      	adds	r3, #1
 800988a:	72fb      	strb	r3, [r7, #11]
      break;
 800988c:	e007      	b.n	800989e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800988e:	6839      	ldr	r1, [r7, #0]
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 fa08 	bl	8009ca6 <USBD_CtlError>
      err++;
 8009896:	7afb      	ldrb	r3, [r7, #11]
 8009898:	3301      	adds	r3, #1
 800989a:	72fb      	strb	r3, [r7, #11]
      break;
 800989c:	bf00      	nop
  }

  if (err != 0U)
 800989e:	7afb      	ldrb	r3, [r7, #11]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d11e      	bne.n	80098e2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	88db      	ldrh	r3, [r3, #6]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d016      	beq.n	80098da <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80098ac:	893b      	ldrh	r3, [r7, #8]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00e      	beq.n	80098d0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	88da      	ldrh	r2, [r3, #6]
 80098b6:	893b      	ldrh	r3, [r7, #8]
 80098b8:	4293      	cmp	r3, r2
 80098ba:	bf28      	it	cs
 80098bc:	4613      	movcs	r3, r2
 80098be:	b29b      	uxth	r3, r3
 80098c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80098c2:	893b      	ldrh	r3, [r7, #8]
 80098c4:	461a      	mov	r2, r3
 80098c6:	68f9      	ldr	r1, [r7, #12]
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 fa69 	bl	8009da0 <USBD_CtlSendData>
 80098ce:	e009      	b.n	80098e4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80098d0:	6839      	ldr	r1, [r7, #0]
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 f9e7 	bl	8009ca6 <USBD_CtlError>
 80098d8:	e004      	b.n	80098e4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 faa0 	bl	8009e20 <USBD_CtlSendStatus>
 80098e0:	e000      	b.n	80098e4 <USBD_GetDescriptor+0x2cc>
    return;
 80098e2:	bf00      	nop
  }
}
 80098e4:	3710      	adds	r7, #16
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop

080098ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	889b      	ldrh	r3, [r3, #4]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d131      	bne.n	8009962 <USBD_SetAddress+0x76>
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	88db      	ldrh	r3, [r3, #6]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d12d      	bne.n	8009962 <USBD_SetAddress+0x76>
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	885b      	ldrh	r3, [r3, #2]
 800990a:	2b7f      	cmp	r3, #127	@ 0x7f
 800990c:	d829      	bhi.n	8009962 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	885b      	ldrh	r3, [r3, #2]
 8009912:	b2db      	uxtb	r3, r3
 8009914:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009918:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b03      	cmp	r3, #3
 8009924:	d104      	bne.n	8009930 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009926:	6839      	ldr	r1, [r7, #0]
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 f9bc 	bl	8009ca6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800992e:	e01d      	b.n	800996c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	7bfa      	ldrb	r2, [r7, #15]
 8009934:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009938:	7bfb      	ldrb	r3, [r7, #15]
 800993a:	4619      	mov	r1, r3
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f003 fafc 	bl	800cf3a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 fa6c 	bl	8009e20 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009948:	7bfb      	ldrb	r3, [r7, #15]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d004      	beq.n	8009958 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2202      	movs	r2, #2
 8009952:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009956:	e009      	b.n	800996c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009960:	e004      	b.n	800996c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009962:	6839      	ldr	r1, [r7, #0]
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 f99e 	bl	8009ca6 <USBD_CtlError>
  }
}
 800996a:	bf00      	nop
 800996c:	bf00      	nop
 800996e:	3710      	adds	r7, #16
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800997e:	2300      	movs	r3, #0
 8009980:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	885b      	ldrh	r3, [r3, #2]
 8009986:	b2da      	uxtb	r2, r3
 8009988:	4b4e      	ldr	r3, [pc, #312]	@ (8009ac4 <USBD_SetConfig+0x150>)
 800998a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800998c:	4b4d      	ldr	r3, [pc, #308]	@ (8009ac4 <USBD_SetConfig+0x150>)
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	2b01      	cmp	r3, #1
 8009992:	d905      	bls.n	80099a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009994:	6839      	ldr	r1, [r7, #0]
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 f985 	bl	8009ca6 <USBD_CtlError>
    return USBD_FAIL;
 800999c:	2303      	movs	r3, #3
 800999e:	e08c      	b.n	8009aba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	2b02      	cmp	r3, #2
 80099aa:	d002      	beq.n	80099b2 <USBD_SetConfig+0x3e>
 80099ac:	2b03      	cmp	r3, #3
 80099ae:	d029      	beq.n	8009a04 <USBD_SetConfig+0x90>
 80099b0:	e075      	b.n	8009a9e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80099b2:	4b44      	ldr	r3, [pc, #272]	@ (8009ac4 <USBD_SetConfig+0x150>)
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d020      	beq.n	80099fc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80099ba:	4b42      	ldr	r3, [pc, #264]	@ (8009ac4 <USBD_SetConfig+0x150>)
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	461a      	mov	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80099c4:	4b3f      	ldr	r3, [pc, #252]	@ (8009ac4 <USBD_SetConfig+0x150>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	4619      	mov	r1, r3
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7fe ffce 	bl	800896c <USBD_SetClassConfig>
 80099d0:	4603      	mov	r3, r0
 80099d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80099d4:	7bfb      	ldrb	r3, [r7, #15]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d008      	beq.n	80099ec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80099da:	6839      	ldr	r1, [r7, #0]
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 f962 	bl	8009ca6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2202      	movs	r2, #2
 80099e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80099ea:	e065      	b.n	8009ab8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 fa17 	bl	8009e20 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2203      	movs	r2, #3
 80099f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80099fa:	e05d      	b.n	8009ab8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 fa0f 	bl	8009e20 <USBD_CtlSendStatus>
      break;
 8009a02:	e059      	b.n	8009ab8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009a04:	4b2f      	ldr	r3, [pc, #188]	@ (8009ac4 <USBD_SetConfig+0x150>)
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d112      	bne.n	8009a32 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2202      	movs	r2, #2
 8009a10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009a14:	4b2b      	ldr	r3, [pc, #172]	@ (8009ac4 <USBD_SetConfig+0x150>)
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	461a      	mov	r2, r3
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a1e:	4b29      	ldr	r3, [pc, #164]	@ (8009ac4 <USBD_SetConfig+0x150>)
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	4619      	mov	r1, r3
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f7fe ffbd 	bl	80089a4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 f9f8 	bl	8009e20 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a30:	e042      	b.n	8009ab8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009a32:	4b24      	ldr	r3, [pc, #144]	@ (8009ac4 <USBD_SetConfig+0x150>)
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	461a      	mov	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d02a      	beq.n	8009a96 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	4619      	mov	r1, r3
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f7fe ffab 	bl	80089a4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8009ac4 <USBD_SetConfig+0x150>)
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	461a      	mov	r2, r3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a58:	4b1a      	ldr	r3, [pc, #104]	@ (8009ac4 <USBD_SetConfig+0x150>)
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f7fe ff84 	bl	800896c <USBD_SetClassConfig>
 8009a64:	4603      	mov	r3, r0
 8009a66:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009a68:	7bfb      	ldrb	r3, [r7, #15]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00f      	beq.n	8009a8e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 f918 	bl	8009ca6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f7fe ff90 	bl	80089a4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2202      	movs	r2, #2
 8009a88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009a8c:	e014      	b.n	8009ab8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 f9c6 	bl	8009e20 <USBD_CtlSendStatus>
      break;
 8009a94:	e010      	b.n	8009ab8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f9c2 	bl	8009e20 <USBD_CtlSendStatus>
      break;
 8009a9c:	e00c      	b.n	8009ab8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009a9e:	6839      	ldr	r1, [r7, #0]
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 f900 	bl	8009ca6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009aa6:	4b07      	ldr	r3, [pc, #28]	@ (8009ac4 <USBD_SetConfig+0x150>)
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	4619      	mov	r1, r3
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f7fe ff79 	bl	80089a4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	73fb      	strb	r3, [r7, #15]
      break;
 8009ab6:	bf00      	nop
  }

  return ret;
 8009ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	2000035c 	.word	0x2000035c

08009ac8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	88db      	ldrh	r3, [r3, #6]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d004      	beq.n	8009ae4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009ada:	6839      	ldr	r1, [r7, #0]
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 f8e2 	bl	8009ca6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009ae2:	e023      	b.n	8009b2c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	dc02      	bgt.n	8009af6 <USBD_GetConfig+0x2e>
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	dc03      	bgt.n	8009afc <USBD_GetConfig+0x34>
 8009af4:	e015      	b.n	8009b22 <USBD_GetConfig+0x5a>
 8009af6:	2b03      	cmp	r3, #3
 8009af8:	d00b      	beq.n	8009b12 <USBD_GetConfig+0x4a>
 8009afa:	e012      	b.n	8009b22 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	3308      	adds	r3, #8
 8009b06:	2201      	movs	r2, #1
 8009b08:	4619      	mov	r1, r3
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f948 	bl	8009da0 <USBD_CtlSendData>
        break;
 8009b10:	e00c      	b.n	8009b2c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	3304      	adds	r3, #4
 8009b16:	2201      	movs	r2, #1
 8009b18:	4619      	mov	r1, r3
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 f940 	bl	8009da0 <USBD_CtlSendData>
        break;
 8009b20:	e004      	b.n	8009b2c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009b22:	6839      	ldr	r1, [r7, #0]
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 f8be 	bl	8009ca6 <USBD_CtlError>
        break;
 8009b2a:	bf00      	nop
}
 8009b2c:	bf00      	nop
 8009b2e:	3708      	adds	r7, #8
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	3b01      	subs	r3, #1
 8009b48:	2b02      	cmp	r3, #2
 8009b4a:	d81e      	bhi.n	8009b8a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	88db      	ldrh	r3, [r3, #6]
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	d004      	beq.n	8009b5e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009b54:	6839      	ldr	r1, [r7, #0]
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f8a5 	bl	8009ca6 <USBD_CtlError>
        break;
 8009b5c:	e01a      	b.n	8009b94 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2201      	movs	r2, #1
 8009b62:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d005      	beq.n	8009b7a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	f043 0202 	orr.w	r2, r3, #2
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	330c      	adds	r3, #12
 8009b7e:	2202      	movs	r2, #2
 8009b80:	4619      	mov	r1, r3
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 f90c 	bl	8009da0 <USBD_CtlSendData>
      break;
 8009b88:	e004      	b.n	8009b94 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009b8a:	6839      	ldr	r1, [r7, #0]
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 f88a 	bl	8009ca6 <USBD_CtlError>
      break;
 8009b92:	bf00      	nop
  }
}
 8009b94:	bf00      	nop
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	885b      	ldrh	r3, [r3, #2]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d107      	bne.n	8009bbe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f932 	bl	8009e20 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009bbc:	e013      	b.n	8009be6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	885b      	ldrh	r3, [r3, #2]
 8009bc2:	2b02      	cmp	r3, #2
 8009bc4:	d10b      	bne.n	8009bde <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	889b      	ldrh	r3, [r3, #4]
 8009bca:	0a1b      	lsrs	r3, r3, #8
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	b2da      	uxtb	r2, r3
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 f922 	bl	8009e20 <USBD_CtlSendStatus>
}
 8009bdc:	e003      	b.n	8009be6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009bde:	6839      	ldr	r1, [r7, #0]
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 f860 	bl	8009ca6 <USBD_CtlError>
}
 8009be6:	bf00      	nop
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b082      	sub	sp, #8
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	3b01      	subs	r3, #1
 8009c02:	2b02      	cmp	r3, #2
 8009c04:	d80b      	bhi.n	8009c1e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	885b      	ldrh	r3, [r3, #2]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d10c      	bne.n	8009c28 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f902 	bl	8009e20 <USBD_CtlSendStatus>
      }
      break;
 8009c1c:	e004      	b.n	8009c28 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009c1e:	6839      	ldr	r1, [r7, #0]
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 f840 	bl	8009ca6 <USBD_CtlError>
      break;
 8009c26:	e000      	b.n	8009c2a <USBD_ClrFeature+0x3c>
      break;
 8009c28:	bf00      	nop
  }
}
 8009c2a:	bf00      	nop
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b084      	sub	sp, #16
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
 8009c3a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	781a      	ldrb	r2, [r3, #0]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	781a      	ldrb	r2, [r3, #0]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009c5c:	68f8      	ldr	r0, [r7, #12]
 8009c5e:	f7ff fa3e 	bl	80090de <SWAPBYTE>
 8009c62:	4603      	mov	r3, r0
 8009c64:	461a      	mov	r2, r3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	3301      	adds	r3, #1
 8009c74:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f7ff fa31 	bl	80090de <SWAPBYTE>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	461a      	mov	r2, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	3301      	adds	r3, #1
 8009c88:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009c90:	68f8      	ldr	r0, [r7, #12]
 8009c92:	f7ff fa24 	bl	80090de <SWAPBYTE>
 8009c96:	4603      	mov	r3, r0
 8009c98:	461a      	mov	r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	80da      	strh	r2, [r3, #6]
}
 8009c9e:	bf00      	nop
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b082      	sub	sp, #8
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
 8009cae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cb0:	2180      	movs	r1, #128	@ 0x80
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f003 f8d7 	bl	800ce66 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009cb8:	2100      	movs	r1, #0
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f003 f8d3 	bl	800ce66 <USBD_LL_StallEP>
}
 8009cc0:	bf00      	nop
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b086      	sub	sp, #24
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d042      	beq.n	8009d64 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009ce2:	6938      	ldr	r0, [r7, #16]
 8009ce4:	f000 f842 	bl	8009d6c <USBD_GetLen>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	3301      	adds	r3, #1
 8009cec:	005b      	lsls	r3, r3, #1
 8009cee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cf2:	d808      	bhi.n	8009d06 <USBD_GetString+0x3e>
 8009cf4:	6938      	ldr	r0, [r7, #16]
 8009cf6:	f000 f839 	bl	8009d6c <USBD_GetLen>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	005b      	lsls	r3, r3, #1
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	e001      	b.n	8009d0a <USBD_GetString+0x42>
 8009d06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009d0e:	7dfb      	ldrb	r3, [r7, #23]
 8009d10:	68ba      	ldr	r2, [r7, #8]
 8009d12:	4413      	add	r3, r2
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	7812      	ldrb	r2, [r2, #0]
 8009d18:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d1a:	7dfb      	ldrb	r3, [r7, #23]
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009d20:	7dfb      	ldrb	r3, [r7, #23]
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	4413      	add	r3, r2
 8009d26:	2203      	movs	r2, #3
 8009d28:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d2a:	7dfb      	ldrb	r3, [r7, #23]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009d30:	e013      	b.n	8009d5a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009d32:	7dfb      	ldrb	r3, [r7, #23]
 8009d34:	68ba      	ldr	r2, [r7, #8]
 8009d36:	4413      	add	r3, r2
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	7812      	ldrb	r2, [r2, #0]
 8009d3c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	3301      	adds	r3, #1
 8009d42:	613b      	str	r3, [r7, #16]
    idx++;
 8009d44:	7dfb      	ldrb	r3, [r7, #23]
 8009d46:	3301      	adds	r3, #1
 8009d48:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009d4a:	7dfb      	ldrb	r3, [r7, #23]
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	4413      	add	r3, r2
 8009d50:	2200      	movs	r2, #0
 8009d52:	701a      	strb	r2, [r3, #0]
    idx++;
 8009d54:	7dfb      	ldrb	r3, [r7, #23]
 8009d56:	3301      	adds	r3, #1
 8009d58:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1e7      	bne.n	8009d32 <USBD_GetString+0x6a>
 8009d62:	e000      	b.n	8009d66 <USBD_GetString+0x9e>
    return;
 8009d64:	bf00      	nop
  }
}
 8009d66:	3718      	adds	r7, #24
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b085      	sub	sp, #20
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009d74:	2300      	movs	r3, #0
 8009d76:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009d7c:	e005      	b.n	8009d8a <USBD_GetLen+0x1e>
  {
    len++;
 8009d7e:	7bfb      	ldrb	r3, [r7, #15]
 8009d80:	3301      	adds	r3, #1
 8009d82:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	3301      	adds	r3, #1
 8009d88:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1f5      	bne.n	8009d7e <USBD_GetLen+0x12>
  }

  return len;
 8009d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3714      	adds	r7, #20
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2202      	movs	r2, #2
 8009db0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	68ba      	ldr	r2, [r7, #8]
 8009dbe:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	68ba      	ldr	r2, [r7, #8]
 8009dca:	2100      	movs	r1, #0
 8009dcc:	68f8      	ldr	r0, [r7, #12]
 8009dce:	f003 f8d3 	bl	800cf78 <USBD_LL_Transmit>

  return USBD_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3710      	adds	r7, #16
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	68ba      	ldr	r2, [r7, #8]
 8009dec:	2100      	movs	r1, #0
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f003 f8c2 	bl	800cf78 <USBD_LL_Transmit>

  return USBD_OK;
 8009df4:	2300      	movs	r3, #0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3710      	adds	r7, #16
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}

08009dfe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009dfe:	b580      	push	{r7, lr}
 8009e00:	b084      	sub	sp, #16
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	60f8      	str	r0, [r7, #12]
 8009e06:	60b9      	str	r1, [r7, #8]
 8009e08:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	2100      	movs	r1, #0
 8009e10:	68f8      	ldr	r0, [r7, #12]
 8009e12:	f003 f8d2 	bl	800cfba <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2204      	movs	r2, #4
 8009e2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009e30:	2300      	movs	r3, #0
 8009e32:	2200      	movs	r2, #0
 8009e34:	2100      	movs	r1, #0
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f003 f89e 	bl	800cf78 <USBD_LL_Transmit>

  return USBD_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3708      	adds	r7, #8
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e46:	b580      	push	{r7, lr}
 8009e48:	b082      	sub	sp, #8
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2205      	movs	r2, #5
 8009e52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e56:	2300      	movs	r3, #0
 8009e58:	2200      	movs	r2, #0
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f003 f8ac 	bl	800cfba <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e62:	2300      	movs	r3, #0
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	4603      	mov	r3, r0
 8009e74:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009e76:	79fb      	ldrb	r3, [r7, #7]
 8009e78:	4a08      	ldr	r2, [pc, #32]	@ (8009e9c <disk_status+0x30>)
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	4413      	add	r3, r2
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	79fa      	ldrb	r2, [r7, #7]
 8009e84:	4905      	ldr	r1, [pc, #20]	@ (8009e9c <disk_status+0x30>)
 8009e86:	440a      	add	r2, r1
 8009e88:	7a12      	ldrb	r2, [r2, #8]
 8009e8a:	4610      	mov	r0, r2
 8009e8c:	4798      	blx	r3
 8009e8e:	4603      	mov	r3, r0
 8009e90:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3710      	adds	r7, #16
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	20000388 	.word	0x20000388

08009ea0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009eae:	79fb      	ldrb	r3, [r7, #7]
 8009eb0:	4a0e      	ldr	r2, [pc, #56]	@ (8009eec <disk_initialize+0x4c>)
 8009eb2:	5cd3      	ldrb	r3, [r2, r3]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d114      	bne.n	8009ee2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009eb8:	79fb      	ldrb	r3, [r7, #7]
 8009eba:	4a0c      	ldr	r2, [pc, #48]	@ (8009eec <disk_initialize+0x4c>)
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	4413      	add	r3, r2
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	79fa      	ldrb	r2, [r7, #7]
 8009ec6:	4909      	ldr	r1, [pc, #36]	@ (8009eec <disk_initialize+0x4c>)
 8009ec8:	440a      	add	r2, r1
 8009eca:	7a12      	ldrb	r2, [r2, #8]
 8009ecc:	4610      	mov	r0, r2
 8009ece:	4798      	blx	r3
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8009ed4:	7bfb      	ldrb	r3, [r7, #15]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d103      	bne.n	8009ee2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8009eda:	79fb      	ldrb	r3, [r7, #7]
 8009edc:	4a03      	ldr	r2, [pc, #12]	@ (8009eec <disk_initialize+0x4c>)
 8009ede:	2101      	movs	r1, #1
 8009ee0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8009ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3710      	adds	r7, #16
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	20000388 	.word	0x20000388

08009ef0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009ef0:	b590      	push	{r4, r7, lr}
 8009ef2:	b087      	sub	sp, #28
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	60b9      	str	r1, [r7, #8]
 8009ef8:	607a      	str	r2, [r7, #4]
 8009efa:	603b      	str	r3, [r7, #0]
 8009efc:	4603      	mov	r3, r0
 8009efe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009f00:	7bfb      	ldrb	r3, [r7, #15]
 8009f02:	4a0a      	ldr	r2, [pc, #40]	@ (8009f2c <disk_read+0x3c>)
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	4413      	add	r3, r2
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	689c      	ldr	r4, [r3, #8]
 8009f0c:	7bfb      	ldrb	r3, [r7, #15]
 8009f0e:	4a07      	ldr	r2, [pc, #28]	@ (8009f2c <disk_read+0x3c>)
 8009f10:	4413      	add	r3, r2
 8009f12:	7a18      	ldrb	r0, [r3, #8]
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	68b9      	ldr	r1, [r7, #8]
 8009f1a:	47a0      	blx	r4
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	371c      	adds	r7, #28
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd90      	pop	{r4, r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	20000388 	.word	0x20000388

08009f30 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009f30:	b590      	push	{r4, r7, lr}
 8009f32:	b087      	sub	sp, #28
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60b9      	str	r1, [r7, #8]
 8009f38:	607a      	str	r2, [r7, #4]
 8009f3a:	603b      	str	r3, [r7, #0]
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009f40:	7bfb      	ldrb	r3, [r7, #15]
 8009f42:	4a0a      	ldr	r2, [pc, #40]	@ (8009f6c <disk_write+0x3c>)
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	4413      	add	r3, r2
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	68dc      	ldr	r4, [r3, #12]
 8009f4c:	7bfb      	ldrb	r3, [r7, #15]
 8009f4e:	4a07      	ldr	r2, [pc, #28]	@ (8009f6c <disk_write+0x3c>)
 8009f50:	4413      	add	r3, r2
 8009f52:	7a18      	ldrb	r0, [r3, #8]
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	68b9      	ldr	r1, [r7, #8]
 8009f5a:	47a0      	blx	r4
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	371c      	adds	r7, #28
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd90      	pop	{r4, r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	20000388 	.word	0x20000388

08009f70 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	4603      	mov	r3, r0
 8009f78:	603a      	str	r2, [r7, #0]
 8009f7a:	71fb      	strb	r3, [r7, #7]
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009f80:	79fb      	ldrb	r3, [r7, #7]
 8009f82:	4a09      	ldr	r2, [pc, #36]	@ (8009fa8 <disk_ioctl+0x38>)
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	4413      	add	r3, r2
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	691b      	ldr	r3, [r3, #16]
 8009f8c:	79fa      	ldrb	r2, [r7, #7]
 8009f8e:	4906      	ldr	r1, [pc, #24]	@ (8009fa8 <disk_ioctl+0x38>)
 8009f90:	440a      	add	r2, r1
 8009f92:	7a10      	ldrb	r0, [r2, #8]
 8009f94:	79b9      	ldrb	r1, [r7, #6]
 8009f96:	683a      	ldr	r2, [r7, #0]
 8009f98:	4798      	blx	r3
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	73fb      	strb	r3, [r7, #15]
  return res;
 8009f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3710      	adds	r7, #16
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	20000388 	.word	0x20000388

08009fac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009fac:	b480      	push	{r7}
 8009fae:	b085      	sub	sp, #20
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009fbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009fc0:	021b      	lsls	r3, r3, #8
 8009fc2:	b21a      	sxth	r2, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	b21b      	sxth	r3, r3
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	b21b      	sxth	r3, r3
 8009fce:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009fd0:	89fb      	ldrh	r3, [r7, #14]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3714      	adds	r7, #20
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr

08009fde <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009fde:	b480      	push	{r7}
 8009fe0:	b085      	sub	sp, #20
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	3303      	adds	r3, #3
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	021b      	lsls	r3, r3, #8
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	3202      	adds	r2, #2
 8009ff6:	7812      	ldrb	r2, [r2, #0]
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	021b      	lsls	r3, r3, #8
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	3201      	adds	r2, #1
 800a004:	7812      	ldrb	r2, [r2, #0]
 800a006:	4313      	orrs	r3, r2
 800a008:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	021b      	lsls	r3, r3, #8
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	7812      	ldrb	r2, [r2, #0]
 800a012:	4313      	orrs	r3, r2
 800a014:	60fb      	str	r3, [r7, #12]
	return rv;
 800a016:	68fb      	ldr	r3, [r7, #12]
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3714      	adds	r7, #20
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	460b      	mov	r3, r1
 800a02e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	1c5a      	adds	r2, r3, #1
 800a034:	607a      	str	r2, [r7, #4]
 800a036:	887a      	ldrh	r2, [r7, #2]
 800a038:	b2d2      	uxtb	r2, r2
 800a03a:	701a      	strb	r2, [r3, #0]
 800a03c:	887b      	ldrh	r3, [r7, #2]
 800a03e:	0a1b      	lsrs	r3, r3, #8
 800a040:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	1c5a      	adds	r2, r3, #1
 800a046:	607a      	str	r2, [r7, #4]
 800a048:	887a      	ldrh	r2, [r7, #2]
 800a04a:	b2d2      	uxtb	r2, r2
 800a04c:	701a      	strb	r2, [r3, #0]
}
 800a04e:	bf00      	nop
 800a050:	370c      	adds	r7, #12
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr

0800a05a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a05a:	b480      	push	{r7}
 800a05c:	b083      	sub	sp, #12
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
 800a062:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	1c5a      	adds	r2, r3, #1
 800a068:	607a      	str	r2, [r7, #4]
 800a06a:	683a      	ldr	r2, [r7, #0]
 800a06c:	b2d2      	uxtb	r2, r2
 800a06e:	701a      	strb	r2, [r3, #0]
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	0a1b      	lsrs	r3, r3, #8
 800a074:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	1c5a      	adds	r2, r3, #1
 800a07a:	607a      	str	r2, [r7, #4]
 800a07c:	683a      	ldr	r2, [r7, #0]
 800a07e:	b2d2      	uxtb	r2, r2
 800a080:	701a      	strb	r2, [r3, #0]
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	0a1b      	lsrs	r3, r3, #8
 800a086:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	1c5a      	adds	r2, r3, #1
 800a08c:	607a      	str	r2, [r7, #4]
 800a08e:	683a      	ldr	r2, [r7, #0]
 800a090:	b2d2      	uxtb	r2, r2
 800a092:	701a      	strb	r2, [r3, #0]
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	0a1b      	lsrs	r3, r3, #8
 800a098:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	1c5a      	adds	r2, r3, #1
 800a09e:	607a      	str	r2, [r7, #4]
 800a0a0:	683a      	ldr	r2, [r7, #0]
 800a0a2:	b2d2      	uxtb	r2, r2
 800a0a4:	701a      	strb	r2, [r3, #0]
}
 800a0a6:	bf00      	nop
 800a0a8:	370c      	adds	r7, #12
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr

0800a0b2 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a0b2:	b480      	push	{r7}
 800a0b4:	b087      	sub	sp, #28
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	60f8      	str	r0, [r7, #12]
 800a0ba:	60b9      	str	r1, [r7, #8]
 800a0bc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00d      	beq.n	800a0e8 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a0cc:	693a      	ldr	r2, [r7, #16]
 800a0ce:	1c53      	adds	r3, r2, #1
 800a0d0:	613b      	str	r3, [r7, #16]
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	1c59      	adds	r1, r3, #1
 800a0d6:	6179      	str	r1, [r7, #20]
 800a0d8:	7812      	ldrb	r2, [r2, #0]
 800a0da:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	607b      	str	r3, [r7, #4]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d1f1      	bne.n	800a0cc <mem_cpy+0x1a>
	}
}
 800a0e8:	bf00      	nop
 800a0ea:	371c      	adds	r7, #28
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a0f4:	b480      	push	{r7}
 800a0f6:	b087      	sub	sp, #28
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	1c5a      	adds	r2, r3, #1
 800a108:	617a      	str	r2, [r7, #20]
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	b2d2      	uxtb	r2, r2
 800a10e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	3b01      	subs	r3, #1
 800a114:	607b      	str	r3, [r7, #4]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d1f3      	bne.n	800a104 <mem_set+0x10>
}
 800a11c:	bf00      	nop
 800a11e:	bf00      	nop
 800a120:	371c      	adds	r7, #28
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr

0800a12a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a12a:	b480      	push	{r7}
 800a12c:	b089      	sub	sp, #36	@ 0x24
 800a12e:	af00      	add	r7, sp, #0
 800a130:	60f8      	str	r0, [r7, #12]
 800a132:	60b9      	str	r1, [r7, #8]
 800a134:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	61fb      	str	r3, [r7, #28]
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a13e:	2300      	movs	r3, #0
 800a140:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	1c5a      	adds	r2, r3, #1
 800a146:	61fa      	str	r2, [r7, #28]
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	4619      	mov	r1, r3
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	1c5a      	adds	r2, r3, #1
 800a150:	61ba      	str	r2, [r7, #24]
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	1acb      	subs	r3, r1, r3
 800a156:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	3b01      	subs	r3, #1
 800a15c:	607b      	str	r3, [r7, #4]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d002      	beq.n	800a16a <mem_cmp+0x40>
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d0eb      	beq.n	800a142 <mem_cmp+0x18>

	return r;
 800a16a:	697b      	ldr	r3, [r7, #20]
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3724      	adds	r7, #36	@ 0x24
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a182:	e002      	b.n	800a18a <chk_chr+0x12>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	3301      	adds	r3, #1
 800a188:	607b      	str	r3, [r7, #4]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d005      	beq.n	800a19e <chk_chr+0x26>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	461a      	mov	r2, r3
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d1f2      	bne.n	800a184 <chk_chr+0xc>
	return *str;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	781b      	ldrb	r3, [r3, #0]
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	370c      	adds	r7, #12
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr
	...

0800a1b0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b085      	sub	sp, #20
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	60bb      	str	r3, [r7, #8]
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	60fb      	str	r3, [r7, #12]
 800a1c2:	e029      	b.n	800a218 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a1c4:	4a27      	ldr	r2, [pc, #156]	@ (800a264 <chk_lock+0xb4>)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	011b      	lsls	r3, r3, #4
 800a1ca:	4413      	add	r3, r2
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d01d      	beq.n	800a20e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a1d2:	4a24      	ldr	r2, [pc, #144]	@ (800a264 <chk_lock+0xb4>)
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	011b      	lsls	r3, r3, #4
 800a1d8:	4413      	add	r3, r2
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d116      	bne.n	800a212 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a1e4:	4a1f      	ldr	r2, [pc, #124]	@ (800a264 <chk_lock+0xb4>)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	011b      	lsls	r3, r3, #4
 800a1ea:	4413      	add	r3, r2
 800a1ec:	3304      	adds	r3, #4
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d10c      	bne.n	800a212 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a1f8:	4a1a      	ldr	r2, [pc, #104]	@ (800a264 <chk_lock+0xb4>)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	011b      	lsls	r3, r3, #4
 800a1fe:	4413      	add	r3, r2
 800a200:	3308      	adds	r3, #8
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a208:	429a      	cmp	r2, r3
 800a20a:	d102      	bne.n	800a212 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a20c:	e007      	b.n	800a21e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a20e:	2301      	movs	r3, #1
 800a210:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	3301      	adds	r3, #1
 800a216:	60fb      	str	r3, [r7, #12]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d9d2      	bls.n	800a1c4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2b02      	cmp	r3, #2
 800a222:	d109      	bne.n	800a238 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d102      	bne.n	800a230 <chk_lock+0x80>
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	2b02      	cmp	r3, #2
 800a22e:	d101      	bne.n	800a234 <chk_lock+0x84>
 800a230:	2300      	movs	r3, #0
 800a232:	e010      	b.n	800a256 <chk_lock+0xa6>
 800a234:	2312      	movs	r3, #18
 800a236:	e00e      	b.n	800a256 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d108      	bne.n	800a250 <chk_lock+0xa0>
 800a23e:	4a09      	ldr	r2, [pc, #36]	@ (800a264 <chk_lock+0xb4>)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	011b      	lsls	r3, r3, #4
 800a244:	4413      	add	r3, r2
 800a246:	330c      	adds	r3, #12
 800a248:	881b      	ldrh	r3, [r3, #0]
 800a24a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a24e:	d101      	bne.n	800a254 <chk_lock+0xa4>
 800a250:	2310      	movs	r3, #16
 800a252:	e000      	b.n	800a256 <chk_lock+0xa6>
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3714      	adds	r7, #20
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	20000368 	.word	0x20000368

0800a268 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a26e:	2300      	movs	r3, #0
 800a270:	607b      	str	r3, [r7, #4]
 800a272:	e002      	b.n	800a27a <enq_lock+0x12>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	3301      	adds	r3, #1
 800a278:	607b      	str	r3, [r7, #4]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d806      	bhi.n	800a28e <enq_lock+0x26>
 800a280:	4a09      	ldr	r2, [pc, #36]	@ (800a2a8 <enq_lock+0x40>)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	011b      	lsls	r3, r3, #4
 800a286:	4413      	add	r3, r2
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d1f2      	bne.n	800a274 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2b02      	cmp	r3, #2
 800a292:	bf14      	ite	ne
 800a294:	2301      	movne	r3, #1
 800a296:	2300      	moveq	r3, #0
 800a298:	b2db      	uxtb	r3, r3
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	370c      	adds	r7, #12
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr
 800a2a6:	bf00      	nop
 800a2a8:	20000368 	.word	0x20000368

0800a2ac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b085      	sub	sp, #20
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	60fb      	str	r3, [r7, #12]
 800a2ba:	e01f      	b.n	800a2fc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a2bc:	4a41      	ldr	r2, [pc, #260]	@ (800a3c4 <inc_lock+0x118>)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	011b      	lsls	r3, r3, #4
 800a2c2:	4413      	add	r3, r2
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d113      	bne.n	800a2f6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a2ce:	4a3d      	ldr	r2, [pc, #244]	@ (800a3c4 <inc_lock+0x118>)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	011b      	lsls	r3, r3, #4
 800a2d4:	4413      	add	r3, r2
 800a2d6:	3304      	adds	r3, #4
 800a2d8:	681a      	ldr	r2, [r3, #0]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d109      	bne.n	800a2f6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a2e2:	4a38      	ldr	r2, [pc, #224]	@ (800a3c4 <inc_lock+0x118>)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	011b      	lsls	r3, r3, #4
 800a2e8:	4413      	add	r3, r2
 800a2ea:	3308      	adds	r3, #8
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d006      	beq.n	800a304 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	60fb      	str	r3, [r7, #12]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d9dc      	bls.n	800a2bc <inc_lock+0x10>
 800a302:	e000      	b.n	800a306 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a304:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d132      	bne.n	800a372 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a30c:	2300      	movs	r3, #0
 800a30e:	60fb      	str	r3, [r7, #12]
 800a310:	e002      	b.n	800a318 <inc_lock+0x6c>
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	3301      	adds	r3, #1
 800a316:	60fb      	str	r3, [r7, #12]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d806      	bhi.n	800a32c <inc_lock+0x80>
 800a31e:	4a29      	ldr	r2, [pc, #164]	@ (800a3c4 <inc_lock+0x118>)
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	011b      	lsls	r3, r3, #4
 800a324:	4413      	add	r3, r2
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d1f2      	bne.n	800a312 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2b02      	cmp	r3, #2
 800a330:	d101      	bne.n	800a336 <inc_lock+0x8a>
 800a332:	2300      	movs	r3, #0
 800a334:	e040      	b.n	800a3b8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	4922      	ldr	r1, [pc, #136]	@ (800a3c4 <inc_lock+0x118>)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	011b      	lsls	r3, r3, #4
 800a340:	440b      	add	r3, r1
 800a342:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	689a      	ldr	r2, [r3, #8]
 800a348:	491e      	ldr	r1, [pc, #120]	@ (800a3c4 <inc_lock+0x118>)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	011b      	lsls	r3, r3, #4
 800a34e:	440b      	add	r3, r1
 800a350:	3304      	adds	r3, #4
 800a352:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	695a      	ldr	r2, [r3, #20]
 800a358:	491a      	ldr	r1, [pc, #104]	@ (800a3c4 <inc_lock+0x118>)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	011b      	lsls	r3, r3, #4
 800a35e:	440b      	add	r3, r1
 800a360:	3308      	adds	r3, #8
 800a362:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a364:	4a17      	ldr	r2, [pc, #92]	@ (800a3c4 <inc_lock+0x118>)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	011b      	lsls	r3, r3, #4
 800a36a:	4413      	add	r3, r2
 800a36c:	330c      	adds	r3, #12
 800a36e:	2200      	movs	r2, #0
 800a370:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d009      	beq.n	800a38c <inc_lock+0xe0>
 800a378:	4a12      	ldr	r2, [pc, #72]	@ (800a3c4 <inc_lock+0x118>)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	011b      	lsls	r3, r3, #4
 800a37e:	4413      	add	r3, r2
 800a380:	330c      	adds	r3, #12
 800a382:	881b      	ldrh	r3, [r3, #0]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d001      	beq.n	800a38c <inc_lock+0xe0>
 800a388:	2300      	movs	r3, #0
 800a38a:	e015      	b.n	800a3b8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d108      	bne.n	800a3a4 <inc_lock+0xf8>
 800a392:	4a0c      	ldr	r2, [pc, #48]	@ (800a3c4 <inc_lock+0x118>)
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	011b      	lsls	r3, r3, #4
 800a398:	4413      	add	r3, r2
 800a39a:	330c      	adds	r3, #12
 800a39c:	881b      	ldrh	r3, [r3, #0]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	b29a      	uxth	r2, r3
 800a3a2:	e001      	b.n	800a3a8 <inc_lock+0xfc>
 800a3a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a3a8:	4906      	ldr	r1, [pc, #24]	@ (800a3c4 <inc_lock+0x118>)
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	011b      	lsls	r3, r3, #4
 800a3ae:	440b      	add	r3, r1
 800a3b0:	330c      	adds	r3, #12
 800a3b2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	3301      	adds	r3, #1
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3714      	adds	r7, #20
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr
 800a3c4:	20000368 	.word	0x20000368

0800a3c8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b085      	sub	sp, #20
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	3b01      	subs	r3, #1
 800a3d4:	607b      	str	r3, [r7, #4]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d825      	bhi.n	800a428 <dec_lock+0x60>
		n = Files[i].ctr;
 800a3dc:	4a17      	ldr	r2, [pc, #92]	@ (800a43c <dec_lock+0x74>)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	011b      	lsls	r3, r3, #4
 800a3e2:	4413      	add	r3, r2
 800a3e4:	330c      	adds	r3, #12
 800a3e6:	881b      	ldrh	r3, [r3, #0]
 800a3e8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a3ea:	89fb      	ldrh	r3, [r7, #14]
 800a3ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3f0:	d101      	bne.n	800a3f6 <dec_lock+0x2e>
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a3f6:	89fb      	ldrh	r3, [r7, #14]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d002      	beq.n	800a402 <dec_lock+0x3a>
 800a3fc:	89fb      	ldrh	r3, [r7, #14]
 800a3fe:	3b01      	subs	r3, #1
 800a400:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a402:	4a0e      	ldr	r2, [pc, #56]	@ (800a43c <dec_lock+0x74>)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	011b      	lsls	r3, r3, #4
 800a408:	4413      	add	r3, r2
 800a40a:	330c      	adds	r3, #12
 800a40c:	89fa      	ldrh	r2, [r7, #14]
 800a40e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a410:	89fb      	ldrh	r3, [r7, #14]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d105      	bne.n	800a422 <dec_lock+0x5a>
 800a416:	4a09      	ldr	r2, [pc, #36]	@ (800a43c <dec_lock+0x74>)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	011b      	lsls	r3, r3, #4
 800a41c:	4413      	add	r3, r2
 800a41e:	2200      	movs	r2, #0
 800a420:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a422:	2300      	movs	r3, #0
 800a424:	737b      	strb	r3, [r7, #13]
 800a426:	e001      	b.n	800a42c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a428:	2302      	movs	r3, #2
 800a42a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a42c:	7b7b      	ldrb	r3, [r7, #13]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3714      	adds	r7, #20
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	20000368 	.word	0x20000368

0800a440 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a440:	b480      	push	{r7}
 800a442:	b085      	sub	sp, #20
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a448:	2300      	movs	r3, #0
 800a44a:	60fb      	str	r3, [r7, #12]
 800a44c:	e010      	b.n	800a470 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a44e:	4a0d      	ldr	r2, [pc, #52]	@ (800a484 <clear_lock+0x44>)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	011b      	lsls	r3, r3, #4
 800a454:	4413      	add	r3, r2
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d105      	bne.n	800a46a <clear_lock+0x2a>
 800a45e:	4a09      	ldr	r2, [pc, #36]	@ (800a484 <clear_lock+0x44>)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	011b      	lsls	r3, r3, #4
 800a464:	4413      	add	r3, r2
 800a466:	2200      	movs	r2, #0
 800a468:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	3301      	adds	r3, #1
 800a46e:	60fb      	str	r3, [r7, #12]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2b01      	cmp	r3, #1
 800a474:	d9eb      	bls.n	800a44e <clear_lock+0xe>
	}
}
 800a476:	bf00      	nop
 800a478:	bf00      	nop
 800a47a:	3714      	adds	r7, #20
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr
 800a484:	20000368 	.word	0x20000368

0800a488 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b086      	sub	sp, #24
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a490:	2300      	movs	r3, #0
 800a492:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	78db      	ldrb	r3, [r3, #3]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d034      	beq.n	800a506 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4a0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	7858      	ldrb	r0, [r3, #1]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	697a      	ldr	r2, [r7, #20]
 800a4b0:	f7ff fd3e 	bl	8009f30 <disk_write>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d002      	beq.n	800a4c0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	73fb      	strb	r3, [r7, #15]
 800a4be:	e022      	b.n	800a506 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6a1b      	ldr	r3, [r3, #32]
 800a4ca:	697a      	ldr	r2, [r7, #20]
 800a4cc:	1ad2      	subs	r2, r2, r3
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	699b      	ldr	r3, [r3, #24]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d217      	bcs.n	800a506 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	789b      	ldrb	r3, [r3, #2]
 800a4da:	613b      	str	r3, [r7, #16]
 800a4dc:	e010      	b.n	800a500 <sync_window+0x78>
					wsect += fs->fsize;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	699b      	ldr	r3, [r3, #24]
 800a4e2:	697a      	ldr	r2, [r7, #20]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	7858      	ldrb	r0, [r3, #1]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	697a      	ldr	r2, [r7, #20]
 800a4f6:	f7ff fd1b 	bl	8009f30 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	613b      	str	r3, [r7, #16]
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	2b01      	cmp	r3, #1
 800a504:	d8eb      	bhi.n	800a4de <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a506:	7bfb      	ldrb	r3, [r7, #15]
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3718      	adds	r7, #24
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a51a:	2300      	movs	r3, #0
 800a51c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a522:	683a      	ldr	r2, [r7, #0]
 800a524:	429a      	cmp	r2, r3
 800a526:	d01b      	beq.n	800a560 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f7ff ffad 	bl	800a488 <sync_window>
 800a52e:	4603      	mov	r3, r0
 800a530:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a532:	7bfb      	ldrb	r3, [r7, #15]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d113      	bne.n	800a560 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	7858      	ldrb	r0, [r3, #1]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a542:	2301      	movs	r3, #1
 800a544:	683a      	ldr	r2, [r7, #0]
 800a546:	f7ff fcd3 	bl	8009ef0 <disk_read>
 800a54a:	4603      	mov	r3, r0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d004      	beq.n	800a55a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a550:	f04f 33ff 	mov.w	r3, #4294967295
 800a554:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a556:	2301      	movs	r3, #1
 800a558:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	683a      	ldr	r2, [r7, #0]
 800a55e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800a560:	7bfb      	ldrb	r3, [r7, #15]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
	...

0800a56c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f7ff ff87 	bl	800a488 <sync_window>
 800a57a:	4603      	mov	r3, r0
 800a57c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a57e:	7bfb      	ldrb	r3, [r7, #15]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d158      	bne.n	800a636 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	2b03      	cmp	r3, #3
 800a58a:	d148      	bne.n	800a61e <sync_fs+0xb2>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	791b      	ldrb	r3, [r3, #4]
 800a590:	2b01      	cmp	r3, #1
 800a592:	d144      	bne.n	800a61e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	3330      	adds	r3, #48	@ 0x30
 800a598:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a59c:	2100      	movs	r1, #0
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7ff fda8 	bl	800a0f4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	3330      	adds	r3, #48	@ 0x30
 800a5a8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a5ac:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7ff fd37 	bl	800a024 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	3330      	adds	r3, #48	@ 0x30
 800a5ba:	4921      	ldr	r1, [pc, #132]	@ (800a640 <sync_fs+0xd4>)
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7ff fd4c 	bl	800a05a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	3330      	adds	r3, #48	@ 0x30
 800a5c6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a5ca:	491e      	ldr	r1, [pc, #120]	@ (800a644 <sync_fs+0xd8>)
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7ff fd44 	bl	800a05a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	3330      	adds	r3, #48	@ 0x30
 800a5d6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	691b      	ldr	r3, [r3, #16]
 800a5de:	4619      	mov	r1, r3
 800a5e0:	4610      	mov	r0, r2
 800a5e2:	f7ff fd3a 	bl	800a05a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	3330      	adds	r3, #48	@ 0x30
 800a5ea:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	f7ff fd30 	bl	800a05a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	69db      	ldr	r3, [r3, #28]
 800a5fe:	1c5a      	adds	r2, r3, #1
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	7858      	ldrb	r0, [r3, #1]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a612:	2301      	movs	r3, #1
 800a614:	f7ff fc8c 	bl	8009f30 <disk_write>
			fs->fsi_flag = 0;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	785b      	ldrb	r3, [r3, #1]
 800a622:	2200      	movs	r2, #0
 800a624:	2100      	movs	r1, #0
 800a626:	4618      	mov	r0, r3
 800a628:	f7ff fca2 	bl	8009f70 <disk_ioctl>
 800a62c:	4603      	mov	r3, r0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d001      	beq.n	800a636 <sync_fs+0xca>
 800a632:	2301      	movs	r3, #1
 800a634:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a636:	7bfb      	ldrb	r3, [r7, #15]
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3710      	adds	r7, #16
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	41615252 	.word	0x41615252
 800a644:	61417272 	.word	0x61417272

0800a648 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	3b02      	subs	r3, #2
 800a656:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	695b      	ldr	r3, [r3, #20]
 800a65c:	3b02      	subs	r3, #2
 800a65e:	683a      	ldr	r2, [r7, #0]
 800a660:	429a      	cmp	r2, r3
 800a662:	d301      	bcc.n	800a668 <clust2sect+0x20>
 800a664:	2300      	movs	r3, #0
 800a666:	e008      	b.n	800a67a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	895b      	ldrh	r3, [r3, #10]
 800a66c:	461a      	mov	r2, r3
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	fb03 f202 	mul.w	r2, r3, r2
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a678:	4413      	add	r3, r2
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	370c      	adds	r7, #12
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr

0800a686 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b086      	sub	sp, #24
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d904      	bls.n	800a6a6 <get_fat+0x20>
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	695b      	ldr	r3, [r3, #20]
 800a6a0:	683a      	ldr	r2, [r7, #0]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d302      	bcc.n	800a6ac <get_fat+0x26>
		val = 1;	/* Internal error */
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	617b      	str	r3, [r7, #20]
 800a6aa:	e08e      	b.n	800a7ca <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a6ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a6b0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	2b03      	cmp	r3, #3
 800a6b8:	d061      	beq.n	800a77e <get_fat+0xf8>
 800a6ba:	2b03      	cmp	r3, #3
 800a6bc:	dc7b      	bgt.n	800a7b6 <get_fat+0x130>
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d002      	beq.n	800a6c8 <get_fat+0x42>
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	d041      	beq.n	800a74a <get_fat+0xc4>
 800a6c6:	e076      	b.n	800a7b6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	60fb      	str	r3, [r7, #12]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	085b      	lsrs	r3, r3, #1
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	6a1a      	ldr	r2, [r3, #32]
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	0a5b      	lsrs	r3, r3, #9
 800a6de:	4413      	add	r3, r2
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	6938      	ldr	r0, [r7, #16]
 800a6e4:	f7ff ff14 	bl	800a510 <move_window>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d166      	bne.n	800a7bc <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	1c5a      	adds	r2, r3, #1
 800a6f2:	60fa      	str	r2, [r7, #12]
 800a6f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6f8:	693a      	ldr	r2, [r7, #16]
 800a6fa:	4413      	add	r3, r2
 800a6fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a700:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	6a1a      	ldr	r2, [r3, #32]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	0a5b      	lsrs	r3, r3, #9
 800a70a:	4413      	add	r3, r2
 800a70c:	4619      	mov	r1, r3
 800a70e:	6938      	ldr	r0, [r7, #16]
 800a710:	f7ff fefe 	bl	800a510 <move_window>
 800a714:	4603      	mov	r3, r0
 800a716:	2b00      	cmp	r3, #0
 800a718:	d152      	bne.n	800a7c0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a720:	693a      	ldr	r2, [r7, #16]
 800a722:	4413      	add	r3, r2
 800a724:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a728:	021b      	lsls	r3, r3, #8
 800a72a:	68ba      	ldr	r2, [r7, #8]
 800a72c:	4313      	orrs	r3, r2
 800a72e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	f003 0301 	and.w	r3, r3, #1
 800a736:	2b00      	cmp	r3, #0
 800a738:	d002      	beq.n	800a740 <get_fat+0xba>
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	091b      	lsrs	r3, r3, #4
 800a73e:	e002      	b.n	800a746 <get_fat+0xc0>
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a746:	617b      	str	r3, [r7, #20]
			break;
 800a748:	e03f      	b.n	800a7ca <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	6a1a      	ldr	r2, [r3, #32]
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	0a1b      	lsrs	r3, r3, #8
 800a752:	4413      	add	r3, r2
 800a754:	4619      	mov	r1, r3
 800a756:	6938      	ldr	r0, [r7, #16]
 800a758:	f7ff feda 	bl	800a510 <move_window>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d130      	bne.n	800a7c4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	005b      	lsls	r3, r3, #1
 800a76c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a770:	4413      	add	r3, r2
 800a772:	4618      	mov	r0, r3
 800a774:	f7ff fc1a 	bl	8009fac <ld_word>
 800a778:	4603      	mov	r3, r0
 800a77a:	617b      	str	r3, [r7, #20]
			break;
 800a77c:	e025      	b.n	800a7ca <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	6a1a      	ldr	r2, [r3, #32]
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	09db      	lsrs	r3, r3, #7
 800a786:	4413      	add	r3, r2
 800a788:	4619      	mov	r1, r3
 800a78a:	6938      	ldr	r0, [r7, #16]
 800a78c:	f7ff fec0 	bl	800a510 <move_window>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d118      	bne.n	800a7c8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a7a4:	4413      	add	r3, r2
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7ff fc19 	bl	8009fde <ld_dword>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a7b2:	617b      	str	r3, [r7, #20]
			break;
 800a7b4:	e009      	b.n	800a7ca <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	617b      	str	r3, [r7, #20]
 800a7ba:	e006      	b.n	800a7ca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a7bc:	bf00      	nop
 800a7be:	e004      	b.n	800a7ca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a7c0:	bf00      	nop
 800a7c2:	e002      	b.n	800a7ca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a7c4:	bf00      	nop
 800a7c6:	e000      	b.n	800a7ca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a7c8:	bf00      	nop
		}
	}

	return val;
 800a7ca:	697b      	ldr	r3, [r7, #20]
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3718      	adds	r7, #24
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a7d4:	b590      	push	{r4, r7, lr}
 800a7d6:	b089      	sub	sp, #36	@ 0x24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a7e0:	2302      	movs	r3, #2
 800a7e2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	f240 80d9 	bls.w	800a99e <put_fat+0x1ca>
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	695b      	ldr	r3, [r3, #20]
 800a7f0:	68ba      	ldr	r2, [r7, #8]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	f080 80d3 	bcs.w	800a99e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	2b03      	cmp	r3, #3
 800a7fe:	f000 8096 	beq.w	800a92e <put_fat+0x15a>
 800a802:	2b03      	cmp	r3, #3
 800a804:	f300 80cb 	bgt.w	800a99e <put_fat+0x1ca>
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d002      	beq.n	800a812 <put_fat+0x3e>
 800a80c:	2b02      	cmp	r3, #2
 800a80e:	d06e      	beq.n	800a8ee <put_fat+0x11a>
 800a810:	e0c5      	b.n	800a99e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	61bb      	str	r3, [r7, #24]
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	085b      	lsrs	r3, r3, #1
 800a81a:	69ba      	ldr	r2, [r7, #24]
 800a81c:	4413      	add	r3, r2
 800a81e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6a1a      	ldr	r2, [r3, #32]
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	0a5b      	lsrs	r3, r3, #9
 800a828:	4413      	add	r3, r2
 800a82a:	4619      	mov	r1, r3
 800a82c:	68f8      	ldr	r0, [r7, #12]
 800a82e:	f7ff fe6f 	bl	800a510 <move_window>
 800a832:	4603      	mov	r3, r0
 800a834:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a836:	7ffb      	ldrb	r3, [r7, #31]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	f040 80a9 	bne.w	800a990 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	1c59      	adds	r1, r3, #1
 800a848:	61b9      	str	r1, [r7, #24]
 800a84a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a84e:	4413      	add	r3, r2
 800a850:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	f003 0301 	and.w	r3, r3, #1
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d00d      	beq.n	800a878 <put_fat+0xa4>
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	b25b      	sxtb	r3, r3
 800a862:	f003 030f 	and.w	r3, r3, #15
 800a866:	b25a      	sxtb	r2, r3
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	b25b      	sxtb	r3, r3
 800a86c:	011b      	lsls	r3, r3, #4
 800a86e:	b25b      	sxtb	r3, r3
 800a870:	4313      	orrs	r3, r2
 800a872:	b25b      	sxtb	r3, r3
 800a874:	b2db      	uxtb	r3, r3
 800a876:	e001      	b.n	800a87c <put_fat+0xa8>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	697a      	ldr	r2, [r7, #20]
 800a87e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2201      	movs	r2, #1
 800a884:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	6a1a      	ldr	r2, [r3, #32]
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	0a5b      	lsrs	r3, r3, #9
 800a88e:	4413      	add	r3, r2
 800a890:	4619      	mov	r1, r3
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	f7ff fe3c 	bl	800a510 <move_window>
 800a898:	4603      	mov	r3, r0
 800a89a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a89c:	7ffb      	ldrb	r3, [r7, #31]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d178      	bne.n	800a994 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8ae:	4413      	add	r3, r2
 800a8b0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	f003 0301 	and.w	r3, r3, #1
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d003      	beq.n	800a8c4 <put_fat+0xf0>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	091b      	lsrs	r3, r3, #4
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	e00e      	b.n	800a8e2 <put_fat+0x10e>
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	b25b      	sxtb	r3, r3
 800a8ca:	f023 030f 	bic.w	r3, r3, #15
 800a8ce:	b25a      	sxtb	r2, r3
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	0a1b      	lsrs	r3, r3, #8
 800a8d4:	b25b      	sxtb	r3, r3
 800a8d6:	f003 030f 	and.w	r3, r3, #15
 800a8da:	b25b      	sxtb	r3, r3
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	b25b      	sxtb	r3, r3
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	697a      	ldr	r2, [r7, #20]
 800a8e4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	70da      	strb	r2, [r3, #3]
			break;
 800a8ec:	e057      	b.n	800a99e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	6a1a      	ldr	r2, [r3, #32]
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	0a1b      	lsrs	r3, r3, #8
 800a8f6:	4413      	add	r3, r2
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	68f8      	ldr	r0, [r7, #12]
 800a8fc:	f7ff fe08 	bl	800a510 <move_window>
 800a900:	4603      	mov	r3, r0
 800a902:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a904:	7ffb      	ldrb	r3, [r7, #31]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d146      	bne.n	800a998 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	005b      	lsls	r3, r3, #1
 800a914:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a918:	4413      	add	r3, r2
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	b292      	uxth	r2, r2
 800a91e:	4611      	mov	r1, r2
 800a920:	4618      	mov	r0, r3
 800a922:	f7ff fb7f 	bl	800a024 <st_word>
			fs->wflag = 1;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2201      	movs	r2, #1
 800a92a:	70da      	strb	r2, [r3, #3]
			break;
 800a92c:	e037      	b.n	800a99e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	6a1a      	ldr	r2, [r3, #32]
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	09db      	lsrs	r3, r3, #7
 800a936:	4413      	add	r3, r2
 800a938:	4619      	mov	r1, r3
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	f7ff fde8 	bl	800a510 <move_window>
 800a940:	4603      	mov	r3, r0
 800a942:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a944:	7ffb      	ldrb	r3, [r7, #31]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d128      	bne.n	800a99c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a95e:	4413      	add	r3, r2
 800a960:	4618      	mov	r0, r3
 800a962:	f7ff fb3c 	bl	8009fde <ld_dword>
 800a966:	4603      	mov	r3, r0
 800a968:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a96c:	4323      	orrs	r3, r4
 800a96e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	009b      	lsls	r3, r3, #2
 800a97a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a97e:	4413      	add	r3, r2
 800a980:	6879      	ldr	r1, [r7, #4]
 800a982:	4618      	mov	r0, r3
 800a984:	f7ff fb69 	bl	800a05a <st_dword>
			fs->wflag = 1;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2201      	movs	r2, #1
 800a98c:	70da      	strb	r2, [r3, #3]
			break;
 800a98e:	e006      	b.n	800a99e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a990:	bf00      	nop
 800a992:	e004      	b.n	800a99e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a994:	bf00      	nop
 800a996:	e002      	b.n	800a99e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a998:	bf00      	nop
 800a99a:	e000      	b.n	800a99e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a99c:	bf00      	nop
		}
	}
	return res;
 800a99e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3724      	adds	r7, #36	@ 0x24
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd90      	pop	{r4, r7, pc}

0800a9a8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b088      	sub	sp, #32
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d904      	bls.n	800a9ce <remove_chain+0x26>
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	695b      	ldr	r3, [r3, #20]
 800a9c8:	68ba      	ldr	r2, [r7, #8]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d301      	bcc.n	800a9d2 <remove_chain+0x2a>
 800a9ce:	2302      	movs	r3, #2
 800a9d0:	e04b      	b.n	800aa6a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d00c      	beq.n	800a9f2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a9d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a9dc:	6879      	ldr	r1, [r7, #4]
 800a9de:	69b8      	ldr	r0, [r7, #24]
 800a9e0:	f7ff fef8 	bl	800a7d4 <put_fat>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a9e8:	7ffb      	ldrb	r3, [r7, #31]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d001      	beq.n	800a9f2 <remove_chain+0x4a>
 800a9ee:	7ffb      	ldrb	r3, [r7, #31]
 800a9f0:	e03b      	b.n	800aa6a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a9f2:	68b9      	ldr	r1, [r7, #8]
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f7ff fe46 	bl	800a686 <get_fat>
 800a9fa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d031      	beq.n	800aa66 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d101      	bne.n	800aa0c <remove_chain+0x64>
 800aa08:	2302      	movs	r3, #2
 800aa0a:	e02e      	b.n	800aa6a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa12:	d101      	bne.n	800aa18 <remove_chain+0x70>
 800aa14:	2301      	movs	r3, #1
 800aa16:	e028      	b.n	800aa6a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800aa18:	2200      	movs	r2, #0
 800aa1a:	68b9      	ldr	r1, [r7, #8]
 800aa1c:	69b8      	ldr	r0, [r7, #24]
 800aa1e:	f7ff fed9 	bl	800a7d4 <put_fat>
 800aa22:	4603      	mov	r3, r0
 800aa24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800aa26:	7ffb      	ldrb	r3, [r7, #31]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d001      	beq.n	800aa30 <remove_chain+0x88>
 800aa2c:	7ffb      	ldrb	r3, [r7, #31]
 800aa2e:	e01c      	b.n	800aa6a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	691a      	ldr	r2, [r3, #16]
 800aa34:	69bb      	ldr	r3, [r7, #24]
 800aa36:	695b      	ldr	r3, [r3, #20]
 800aa38:	3b02      	subs	r3, #2
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d20b      	bcs.n	800aa56 <remove_chain+0xae>
			fs->free_clst++;
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	1c5a      	adds	r2, r3, #1
 800aa44:	69bb      	ldr	r3, [r7, #24]
 800aa46:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800aa48:	69bb      	ldr	r3, [r7, #24]
 800aa4a:	791b      	ldrb	r3, [r3, #4]
 800aa4c:	f043 0301 	orr.w	r3, r3, #1
 800aa50:	b2da      	uxtb	r2, r3
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	695b      	ldr	r3, [r3, #20]
 800aa5e:	68ba      	ldr	r2, [r7, #8]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d3c6      	bcc.n	800a9f2 <remove_chain+0x4a>
 800aa64:	e000      	b.n	800aa68 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800aa66:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800aa68:	2300      	movs	r3, #0
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3720      	adds	r7, #32
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}

0800aa72 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b088      	sub	sp, #32
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
 800aa7a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d10d      	bne.n	800aaa4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	68db      	ldr	r3, [r3, #12]
 800aa8c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800aa8e:	69bb      	ldr	r3, [r7, #24]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d004      	beq.n	800aa9e <create_chain+0x2c>
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	695b      	ldr	r3, [r3, #20]
 800aa98:	69ba      	ldr	r2, [r7, #24]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d31b      	bcc.n	800aad6 <create_chain+0x64>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	61bb      	str	r3, [r7, #24]
 800aaa2:	e018      	b.n	800aad6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800aaa4:	6839      	ldr	r1, [r7, #0]
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f7ff fded 	bl	800a686 <get_fat>
 800aaac:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d801      	bhi.n	800aab8 <create_chain+0x46>
 800aab4:	2301      	movs	r3, #1
 800aab6:	e070      	b.n	800ab9a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aabe:	d101      	bne.n	800aac4 <create_chain+0x52>
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	e06a      	b.n	800ab9a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	695b      	ldr	r3, [r3, #20]
 800aac8:	68fa      	ldr	r2, [r7, #12]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d201      	bcs.n	800aad2 <create_chain+0x60>
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	e063      	b.n	800ab9a <create_chain+0x128>
		scl = clst;
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	3301      	adds	r3, #1
 800aade:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	695b      	ldr	r3, [r3, #20]
 800aae4:	69fa      	ldr	r2, [r7, #28]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d307      	bcc.n	800aafa <create_chain+0x88>
				ncl = 2;
 800aaea:	2302      	movs	r3, #2
 800aaec:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800aaee:	69fa      	ldr	r2, [r7, #28]
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d901      	bls.n	800aafa <create_chain+0x88>
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	e04f      	b.n	800ab9a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800aafa:	69f9      	ldr	r1, [r7, #28]
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f7ff fdc2 	bl	800a686 <get_fat>
 800ab02:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00e      	beq.n	800ab28 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d003      	beq.n	800ab18 <create_chain+0xa6>
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab16:	d101      	bne.n	800ab1c <create_chain+0xaa>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	e03e      	b.n	800ab9a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ab1c:	69fa      	ldr	r2, [r7, #28]
 800ab1e:	69bb      	ldr	r3, [r7, #24]
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d1da      	bne.n	800aada <create_chain+0x68>
 800ab24:	2300      	movs	r3, #0
 800ab26:	e038      	b.n	800ab9a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ab28:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ab2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab2e:	69f9      	ldr	r1, [r7, #28]
 800ab30:	6938      	ldr	r0, [r7, #16]
 800ab32:	f7ff fe4f 	bl	800a7d4 <put_fat>
 800ab36:	4603      	mov	r3, r0
 800ab38:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ab3a:	7dfb      	ldrb	r3, [r7, #23]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d109      	bne.n	800ab54 <create_chain+0xe2>
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d006      	beq.n	800ab54 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ab46:	69fa      	ldr	r2, [r7, #28]
 800ab48:	6839      	ldr	r1, [r7, #0]
 800ab4a:	6938      	ldr	r0, [r7, #16]
 800ab4c:	f7ff fe42 	bl	800a7d4 <put_fat>
 800ab50:	4603      	mov	r3, r0
 800ab52:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ab54:	7dfb      	ldrb	r3, [r7, #23]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d116      	bne.n	800ab88 <create_chain+0x116>
		fs->last_clst = ncl;
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	69fa      	ldr	r2, [r7, #28]
 800ab5e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	691a      	ldr	r2, [r3, #16]
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	695b      	ldr	r3, [r3, #20]
 800ab68:	3b02      	subs	r3, #2
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d804      	bhi.n	800ab78 <create_chain+0x106>
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	691b      	ldr	r3, [r3, #16]
 800ab72:	1e5a      	subs	r2, r3, #1
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	791b      	ldrb	r3, [r3, #4]
 800ab7c:	f043 0301 	orr.w	r3, r3, #1
 800ab80:	b2da      	uxtb	r2, r3
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	711a      	strb	r2, [r3, #4]
 800ab86:	e007      	b.n	800ab98 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ab88:	7dfb      	ldrb	r3, [r7, #23]
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d102      	bne.n	800ab94 <create_chain+0x122>
 800ab8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab92:	e000      	b.n	800ab96 <create_chain+0x124>
 800ab94:	2301      	movs	r3, #1
 800ab96:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ab98:	69fb      	ldr	r3, [r7, #28]
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3720      	adds	r7, #32
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800aba2:	b480      	push	{r7}
 800aba4:	b087      	sub	sp, #28
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
 800abaa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abb6:	3304      	adds	r3, #4
 800abb8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	0a5b      	lsrs	r3, r3, #9
 800abbe:	68fa      	ldr	r2, [r7, #12]
 800abc0:	8952      	ldrh	r2, [r2, #10]
 800abc2:	fbb3 f3f2 	udiv	r3, r3, r2
 800abc6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	1d1a      	adds	r2, r3, #4
 800abcc:	613a      	str	r2, [r7, #16]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d101      	bne.n	800abdc <clmt_clust+0x3a>
 800abd8:	2300      	movs	r3, #0
 800abda:	e010      	b.n	800abfe <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800abdc:	697a      	ldr	r2, [r7, #20]
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d307      	bcc.n	800abf4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800abe4:	697a      	ldr	r2, [r7, #20]
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	1ad3      	subs	r3, r2, r3
 800abea:	617b      	str	r3, [r7, #20]
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	3304      	adds	r3, #4
 800abf0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800abf2:	e7e9      	b.n	800abc8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800abf4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	4413      	add	r3, r2
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	371c      	adds	r7, #28
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr

0800ac0a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ac0a:	b580      	push	{r7, lr}
 800ac0c:	b086      	sub	sp, #24
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
 800ac12:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ac20:	d204      	bcs.n	800ac2c <dir_sdi+0x22>
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	f003 031f 	and.w	r3, r3, #31
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d001      	beq.n	800ac30 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ac2c:	2302      	movs	r3, #2
 800ac2e:	e063      	b.n	800acf8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	683a      	ldr	r2, [r7, #0]
 800ac34:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	689b      	ldr	r3, [r3, #8]
 800ac3a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d106      	bne.n	800ac50 <dir_sdi+0x46>
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	2b02      	cmp	r3, #2
 800ac48:	d902      	bls.n	800ac50 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac4e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d10c      	bne.n	800ac70 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	095b      	lsrs	r3, r3, #5
 800ac5a:	693a      	ldr	r2, [r7, #16]
 800ac5c:	8912      	ldrh	r2, [r2, #8]
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d301      	bcc.n	800ac66 <dir_sdi+0x5c>
 800ac62:	2302      	movs	r3, #2
 800ac64:	e048      	b.n	800acf8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	61da      	str	r2, [r3, #28]
 800ac6e:	e029      	b.n	800acc4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	895b      	ldrh	r3, [r3, #10]
 800ac74:	025b      	lsls	r3, r3, #9
 800ac76:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ac78:	e019      	b.n	800acae <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6979      	ldr	r1, [r7, #20]
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7ff fd01 	bl	800a686 <get_fat>
 800ac84:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac8c:	d101      	bne.n	800ac92 <dir_sdi+0x88>
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e032      	b.n	800acf8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d904      	bls.n	800aca2 <dir_sdi+0x98>
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	695b      	ldr	r3, [r3, #20]
 800ac9c:	697a      	ldr	r2, [r7, #20]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d301      	bcc.n	800aca6 <dir_sdi+0x9c>
 800aca2:	2302      	movs	r3, #2
 800aca4:	e028      	b.n	800acf8 <dir_sdi+0xee>
			ofs -= csz;
 800aca6:	683a      	ldr	r2, [r7, #0]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	1ad3      	subs	r3, r2, r3
 800acac:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800acae:	683a      	ldr	r2, [r7, #0]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d2e1      	bcs.n	800ac7a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800acb6:	6979      	ldr	r1, [r7, #20]
 800acb8:	6938      	ldr	r0, [r7, #16]
 800acba:	f7ff fcc5 	bl	800a648 <clust2sect>
 800acbe:	4602      	mov	r2, r0
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	697a      	ldr	r2, [r7, #20]
 800acc8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	69db      	ldr	r3, [r3, #28]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d101      	bne.n	800acd6 <dir_sdi+0xcc>
 800acd2:	2302      	movs	r3, #2
 800acd4:	e010      	b.n	800acf8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	69da      	ldr	r2, [r3, #28]
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	0a5b      	lsrs	r3, r3, #9
 800acde:	441a      	add	r2, r3
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acf0:	441a      	add	r2, r3
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800acf6:	2300      	movs	r3, #0
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3718      	adds	r7, #24
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b086      	sub	sp, #24
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	695b      	ldr	r3, [r3, #20]
 800ad14:	3320      	adds	r3, #32
 800ad16:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	69db      	ldr	r3, [r3, #28]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d003      	beq.n	800ad28 <dir_next+0x28>
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad26:	d301      	bcc.n	800ad2c <dir_next+0x2c>
 800ad28:	2304      	movs	r3, #4
 800ad2a:	e0aa      	b.n	800ae82 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	f040 8098 	bne.w	800ae68 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	69db      	ldr	r3, [r3, #28]
 800ad3c:	1c5a      	adds	r2, r3, #1
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	699b      	ldr	r3, [r3, #24]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d10b      	bne.n	800ad62 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	095b      	lsrs	r3, r3, #5
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	8912      	ldrh	r2, [r2, #8]
 800ad52:	4293      	cmp	r3, r2
 800ad54:	f0c0 8088 	bcc.w	800ae68 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	61da      	str	r2, [r3, #28]
 800ad5e:	2304      	movs	r3, #4
 800ad60:	e08f      	b.n	800ae82 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	0a5b      	lsrs	r3, r3, #9
 800ad66:	68fa      	ldr	r2, [r7, #12]
 800ad68:	8952      	ldrh	r2, [r2, #10]
 800ad6a:	3a01      	subs	r2, #1
 800ad6c:	4013      	ands	r3, r2
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d17a      	bne.n	800ae68 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	699b      	ldr	r3, [r3, #24]
 800ad78:	4619      	mov	r1, r3
 800ad7a:	4610      	mov	r0, r2
 800ad7c:	f7ff fc83 	bl	800a686 <get_fat>
 800ad80:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d801      	bhi.n	800ad8c <dir_next+0x8c>
 800ad88:	2302      	movs	r3, #2
 800ad8a:	e07a      	b.n	800ae82 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad92:	d101      	bne.n	800ad98 <dir_next+0x98>
 800ad94:	2301      	movs	r3, #1
 800ad96:	e074      	b.n	800ae82 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	695b      	ldr	r3, [r3, #20]
 800ad9c:	697a      	ldr	r2, [r7, #20]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d358      	bcc.n	800ae54 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d104      	bne.n	800adb2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2200      	movs	r2, #0
 800adac:	61da      	str	r2, [r3, #28]
 800adae:	2304      	movs	r3, #4
 800adb0:	e067      	b.n	800ae82 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	699b      	ldr	r3, [r3, #24]
 800adb8:	4619      	mov	r1, r3
 800adba:	4610      	mov	r0, r2
 800adbc:	f7ff fe59 	bl	800aa72 <create_chain>
 800adc0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d101      	bne.n	800adcc <dir_next+0xcc>
 800adc8:	2307      	movs	r3, #7
 800adca:	e05a      	b.n	800ae82 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	2b01      	cmp	r3, #1
 800add0:	d101      	bne.n	800add6 <dir_next+0xd6>
 800add2:	2302      	movs	r3, #2
 800add4:	e055      	b.n	800ae82 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800addc:	d101      	bne.n	800ade2 <dir_next+0xe2>
 800adde:	2301      	movs	r3, #1
 800ade0:	e04f      	b.n	800ae82 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f7ff fb50 	bl	800a488 <sync_window>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d001      	beq.n	800adf2 <dir_next+0xf2>
 800adee:	2301      	movs	r3, #1
 800adf0:	e047      	b.n	800ae82 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	3330      	adds	r3, #48	@ 0x30
 800adf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800adfa:	2100      	movs	r1, #0
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7ff f979 	bl	800a0f4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ae02:	2300      	movs	r3, #0
 800ae04:	613b      	str	r3, [r7, #16]
 800ae06:	6979      	ldr	r1, [r7, #20]
 800ae08:	68f8      	ldr	r0, [r7, #12]
 800ae0a:	f7ff fc1d 	bl	800a648 <clust2sect>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ae14:	e012      	b.n	800ae3c <dir_next+0x13c>
						fs->wflag = 1;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2201      	movs	r2, #1
 800ae1a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ae1c:	68f8      	ldr	r0, [r7, #12]
 800ae1e:	f7ff fb33 	bl	800a488 <sync_window>
 800ae22:	4603      	mov	r3, r0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d001      	beq.n	800ae2c <dir_next+0x12c>
 800ae28:	2301      	movs	r3, #1
 800ae2a:	e02a      	b.n	800ae82 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	613b      	str	r3, [r7, #16]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae36:	1c5a      	adds	r2, r3, #1
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	895b      	ldrh	r3, [r3, #10]
 800ae40:	461a      	mov	r2, r3
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d3e6      	bcc.n	800ae16 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	1ad2      	subs	r2, r2, r3
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	697a      	ldr	r2, [r7, #20]
 800ae58:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ae5a:	6979      	ldr	r1, [r7, #20]
 800ae5c:	68f8      	ldr	r0, [r7, #12]
 800ae5e:	f7ff fbf3 	bl	800a648 <clust2sect>
 800ae62:	4602      	mov	r2, r0
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	68ba      	ldr	r2, [r7, #8]
 800ae6c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae7a:	441a      	add	r2, r3
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ae80:	2300      	movs	r3, #0
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3718      	adds	r7, #24
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	b086      	sub	sp, #24
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
 800ae92:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f7ff feb4 	bl	800ac0a <dir_sdi>
 800aea2:	4603      	mov	r3, r0
 800aea4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aea6:	7dfb      	ldrb	r3, [r7, #23]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d12b      	bne.n	800af04 <dir_alloc+0x7a>
		n = 0;
 800aeac:	2300      	movs	r3, #0
 800aeae:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	69db      	ldr	r3, [r3, #28]
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	68f8      	ldr	r0, [r7, #12]
 800aeb8:	f7ff fb2a 	bl	800a510 <move_window>
 800aebc:	4603      	mov	r3, r0
 800aebe:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aec0:	7dfb      	ldrb	r3, [r7, #23]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d11d      	bne.n	800af02 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6a1b      	ldr	r3, [r3, #32]
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	2be5      	cmp	r3, #229	@ 0xe5
 800aece:	d004      	beq.n	800aeda <dir_alloc+0x50>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6a1b      	ldr	r3, [r3, #32]
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d107      	bne.n	800aeea <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	3301      	adds	r3, #1
 800aede:	613b      	str	r3, [r7, #16]
 800aee0:	693a      	ldr	r2, [r7, #16]
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d102      	bne.n	800aeee <dir_alloc+0x64>
 800aee8:	e00c      	b.n	800af04 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800aeea:	2300      	movs	r3, #0
 800aeec:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800aeee:	2101      	movs	r1, #1
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f7ff ff05 	bl	800ad00 <dir_next>
 800aef6:	4603      	mov	r3, r0
 800aef8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800aefa:	7dfb      	ldrb	r3, [r7, #23]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d0d7      	beq.n	800aeb0 <dir_alloc+0x26>
 800af00:	e000      	b.n	800af04 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800af02:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800af04:	7dfb      	ldrb	r3, [r7, #23]
 800af06:	2b04      	cmp	r3, #4
 800af08:	d101      	bne.n	800af0e <dir_alloc+0x84>
 800af0a:	2307      	movs	r3, #7
 800af0c:	75fb      	strb	r3, [r7, #23]
	return res;
 800af0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800af10:	4618      	mov	r0, r3
 800af12:	3718      	adds	r7, #24
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	331a      	adds	r3, #26
 800af26:	4618      	mov	r0, r3
 800af28:	f7ff f840 	bl	8009fac <ld_word>
 800af2c:	4603      	mov	r3, r0
 800af2e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	2b03      	cmp	r3, #3
 800af36:	d109      	bne.n	800af4c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	3314      	adds	r3, #20
 800af3c:	4618      	mov	r0, r3
 800af3e:	f7ff f835 	bl	8009fac <ld_word>
 800af42:	4603      	mov	r3, r0
 800af44:	041b      	lsls	r3, r3, #16
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	4313      	orrs	r3, r2
 800af4a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800af4c:	68fb      	ldr	r3, [r7, #12]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800af56:	b580      	push	{r7, lr}
 800af58:	b084      	sub	sp, #16
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	60f8      	str	r0, [r7, #12]
 800af5e:	60b9      	str	r1, [r7, #8]
 800af60:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	331a      	adds	r3, #26
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	b292      	uxth	r2, r2
 800af6a:	4611      	mov	r1, r2
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7ff f859 	bl	800a024 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	781b      	ldrb	r3, [r3, #0]
 800af76:	2b03      	cmp	r3, #3
 800af78:	d109      	bne.n	800af8e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	f103 0214 	add.w	r2, r3, #20
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	0c1b      	lsrs	r3, r3, #16
 800af84:	b29b      	uxth	r3, r3
 800af86:	4619      	mov	r1, r3
 800af88:	4610      	mov	r0, r2
 800af8a:	f7ff f84b 	bl	800a024 <st_word>
	}
}
 800af8e:	bf00      	nop
 800af90:	3710      	adds	r7, #16
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800af96:	b580      	push	{r7, lr}
 800af98:	b086      	sub	sp, #24
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800afa4:	2100      	movs	r1, #0
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f7ff fe2f 	bl	800ac0a <dir_sdi>
 800afac:	4603      	mov	r3, r0
 800afae:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800afb0:	7dfb      	ldrb	r3, [r7, #23]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d001      	beq.n	800afba <dir_find+0x24>
 800afb6:	7dfb      	ldrb	r3, [r7, #23]
 800afb8:	e03e      	b.n	800b038 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	69db      	ldr	r3, [r3, #28]
 800afbe:	4619      	mov	r1, r3
 800afc0:	6938      	ldr	r0, [r7, #16]
 800afc2:	f7ff faa5 	bl	800a510 <move_window>
 800afc6:	4603      	mov	r3, r0
 800afc8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800afca:	7dfb      	ldrb	r3, [r7, #23]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d12f      	bne.n	800b030 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6a1b      	ldr	r3, [r3, #32]
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800afd8:	7bfb      	ldrb	r3, [r7, #15]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d102      	bne.n	800afe4 <dir_find+0x4e>
 800afde:	2304      	movs	r3, #4
 800afe0:	75fb      	strb	r3, [r7, #23]
 800afe2:	e028      	b.n	800b036 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6a1b      	ldr	r3, [r3, #32]
 800afe8:	330b      	adds	r3, #11
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aff0:	b2da      	uxtb	r2, r3
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6a1b      	ldr	r3, [r3, #32]
 800affa:	330b      	adds	r3, #11
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	f003 0308 	and.w	r3, r3, #8
 800b002:	2b00      	cmp	r3, #0
 800b004:	d10a      	bne.n	800b01c <dir_find+0x86>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6a18      	ldr	r0, [r3, #32]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	3324      	adds	r3, #36	@ 0x24
 800b00e:	220b      	movs	r2, #11
 800b010:	4619      	mov	r1, r3
 800b012:	f7ff f88a 	bl	800a12a <mem_cmp>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00b      	beq.n	800b034 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b01c:	2100      	movs	r1, #0
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f7ff fe6e 	bl	800ad00 <dir_next>
 800b024:	4603      	mov	r3, r0
 800b026:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b028:	7dfb      	ldrb	r3, [r7, #23]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d0c5      	beq.n	800afba <dir_find+0x24>
 800b02e:	e002      	b.n	800b036 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b030:	bf00      	nop
 800b032:	e000      	b.n	800b036 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b034:	bf00      	nop

	return res;
 800b036:	7dfb      	ldrb	r3, [r7, #23]
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3718      	adds	r7, #24
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b04e:	2101      	movs	r1, #1
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f7ff ff1a 	bl	800ae8a <dir_alloc>
 800b056:	4603      	mov	r3, r0
 800b058:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b05a:	7bfb      	ldrb	r3, [r7, #15]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d11c      	bne.n	800b09a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	69db      	ldr	r3, [r3, #28]
 800b064:	4619      	mov	r1, r3
 800b066:	68b8      	ldr	r0, [r7, #8]
 800b068:	f7ff fa52 	bl	800a510 <move_window>
 800b06c:	4603      	mov	r3, r0
 800b06e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b070:	7bfb      	ldrb	r3, [r7, #15]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d111      	bne.n	800b09a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a1b      	ldr	r3, [r3, #32]
 800b07a:	2220      	movs	r2, #32
 800b07c:	2100      	movs	r1, #0
 800b07e:	4618      	mov	r0, r3
 800b080:	f7ff f838 	bl	800a0f4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6a18      	ldr	r0, [r3, #32]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	3324      	adds	r3, #36	@ 0x24
 800b08c:	220b      	movs	r2, #11
 800b08e:	4619      	mov	r1, r3
 800b090:	f7ff f80f 	bl	800a0b2 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	2201      	movs	r2, #1
 800b098:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b09a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3710      	adds	r7, #16
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b088      	sub	sp, #32
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	60fb      	str	r3, [r7, #12]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	3324      	adds	r3, #36	@ 0x24
 800b0b8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b0ba:	220b      	movs	r2, #11
 800b0bc:	2120      	movs	r1, #32
 800b0be:	68b8      	ldr	r0, [r7, #8]
 800b0c0:	f7ff f818 	bl	800a0f4 <mem_set>
	si = i = 0; ni = 8;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	613b      	str	r3, [r7, #16]
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	61fb      	str	r3, [r7, #28]
 800b0cc:	2308      	movs	r3, #8
 800b0ce:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b0d0:	69fb      	ldr	r3, [r7, #28]
 800b0d2:	1c5a      	adds	r2, r3, #1
 800b0d4:	61fa      	str	r2, [r7, #28]
 800b0d6:	68fa      	ldr	r2, [r7, #12]
 800b0d8:	4413      	add	r3, r2
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b0de:	7efb      	ldrb	r3, [r7, #27]
 800b0e0:	2b20      	cmp	r3, #32
 800b0e2:	d94e      	bls.n	800b182 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b0e4:	7efb      	ldrb	r3, [r7, #27]
 800b0e6:	2b2f      	cmp	r3, #47	@ 0x2f
 800b0e8:	d006      	beq.n	800b0f8 <create_name+0x54>
 800b0ea:	7efb      	ldrb	r3, [r7, #27]
 800b0ec:	2b5c      	cmp	r3, #92	@ 0x5c
 800b0ee:	d110      	bne.n	800b112 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b0f0:	e002      	b.n	800b0f8 <create_name+0x54>
 800b0f2:	69fb      	ldr	r3, [r7, #28]
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	61fb      	str	r3, [r7, #28]
 800b0f8:	68fa      	ldr	r2, [r7, #12]
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	4413      	add	r3, r2
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	2b2f      	cmp	r3, #47	@ 0x2f
 800b102:	d0f6      	beq.n	800b0f2 <create_name+0x4e>
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	4413      	add	r3, r2
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	2b5c      	cmp	r3, #92	@ 0x5c
 800b10e:	d0f0      	beq.n	800b0f2 <create_name+0x4e>
			break;
 800b110:	e038      	b.n	800b184 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b112:	7efb      	ldrb	r3, [r7, #27]
 800b114:	2b2e      	cmp	r3, #46	@ 0x2e
 800b116:	d003      	beq.n	800b120 <create_name+0x7c>
 800b118:	693a      	ldr	r2, [r7, #16]
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d30c      	bcc.n	800b13a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	2b0b      	cmp	r3, #11
 800b124:	d002      	beq.n	800b12c <create_name+0x88>
 800b126:	7efb      	ldrb	r3, [r7, #27]
 800b128:	2b2e      	cmp	r3, #46	@ 0x2e
 800b12a:	d001      	beq.n	800b130 <create_name+0x8c>
 800b12c:	2306      	movs	r3, #6
 800b12e:	e044      	b.n	800b1ba <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b130:	2308      	movs	r3, #8
 800b132:	613b      	str	r3, [r7, #16]
 800b134:	230b      	movs	r3, #11
 800b136:	617b      	str	r3, [r7, #20]
			continue;
 800b138:	e022      	b.n	800b180 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b13a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	da04      	bge.n	800b14c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b142:	7efb      	ldrb	r3, [r7, #27]
 800b144:	3b80      	subs	r3, #128	@ 0x80
 800b146:	4a1f      	ldr	r2, [pc, #124]	@ (800b1c4 <create_name+0x120>)
 800b148:	5cd3      	ldrb	r3, [r2, r3]
 800b14a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b14c:	7efb      	ldrb	r3, [r7, #27]
 800b14e:	4619      	mov	r1, r3
 800b150:	481d      	ldr	r0, [pc, #116]	@ (800b1c8 <create_name+0x124>)
 800b152:	f7ff f811 	bl	800a178 <chk_chr>
 800b156:	4603      	mov	r3, r0
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d001      	beq.n	800b160 <create_name+0xbc>
 800b15c:	2306      	movs	r3, #6
 800b15e:	e02c      	b.n	800b1ba <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b160:	7efb      	ldrb	r3, [r7, #27]
 800b162:	2b60      	cmp	r3, #96	@ 0x60
 800b164:	d905      	bls.n	800b172 <create_name+0xce>
 800b166:	7efb      	ldrb	r3, [r7, #27]
 800b168:	2b7a      	cmp	r3, #122	@ 0x7a
 800b16a:	d802      	bhi.n	800b172 <create_name+0xce>
 800b16c:	7efb      	ldrb	r3, [r7, #27]
 800b16e:	3b20      	subs	r3, #32
 800b170:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	1c5a      	adds	r2, r3, #1
 800b176:	613a      	str	r2, [r7, #16]
 800b178:	68ba      	ldr	r2, [r7, #8]
 800b17a:	4413      	add	r3, r2
 800b17c:	7efa      	ldrb	r2, [r7, #27]
 800b17e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b180:	e7a6      	b.n	800b0d0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b182:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b184:	68fa      	ldr	r2, [r7, #12]
 800b186:	69fb      	ldr	r3, [r7, #28]
 800b188:	441a      	add	r2, r3
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d101      	bne.n	800b198 <create_name+0xf4>
 800b194:	2306      	movs	r3, #6
 800b196:	e010      	b.n	800b1ba <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	2be5      	cmp	r3, #229	@ 0xe5
 800b19e:	d102      	bne.n	800b1a6 <create_name+0x102>
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	2205      	movs	r2, #5
 800b1a4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b1a6:	7efb      	ldrb	r3, [r7, #27]
 800b1a8:	2b20      	cmp	r3, #32
 800b1aa:	d801      	bhi.n	800b1b0 <create_name+0x10c>
 800b1ac:	2204      	movs	r2, #4
 800b1ae:	e000      	b.n	800b1b2 <create_name+0x10e>
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	330b      	adds	r3, #11
 800b1b6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b1b8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3720      	adds	r7, #32
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	0800dd08 	.word	0x0800dd08
 800b1c8:	0800dbf0 	.word	0x0800dbf0

0800b1cc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b086      	sub	sp, #24
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b1e0:	e002      	b.n	800b1e8 <follow_path+0x1c>
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	603b      	str	r3, [r7, #0]
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	2b2f      	cmp	r3, #47	@ 0x2f
 800b1ee:	d0f8      	beq.n	800b1e2 <follow_path+0x16>
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	2b5c      	cmp	r3, #92	@ 0x5c
 800b1f6:	d0f4      	beq.n	800b1e2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	2b1f      	cmp	r3, #31
 800b204:	d80a      	bhi.n	800b21c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2280      	movs	r2, #128	@ 0x80
 800b20a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800b20e:	2100      	movs	r1, #0
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f7ff fcfa 	bl	800ac0a <dir_sdi>
 800b216:	4603      	mov	r3, r0
 800b218:	75fb      	strb	r3, [r7, #23]
 800b21a:	e043      	b.n	800b2a4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b21c:	463b      	mov	r3, r7
 800b21e:	4619      	mov	r1, r3
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f7ff ff3f 	bl	800b0a4 <create_name>
 800b226:	4603      	mov	r3, r0
 800b228:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b22a:	7dfb      	ldrb	r3, [r7, #23]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d134      	bne.n	800b29a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f7ff feb0 	bl	800af96 <dir_find>
 800b236:	4603      	mov	r3, r0
 800b238:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b240:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b242:	7dfb      	ldrb	r3, [r7, #23]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d00a      	beq.n	800b25e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b248:	7dfb      	ldrb	r3, [r7, #23]
 800b24a:	2b04      	cmp	r3, #4
 800b24c:	d127      	bne.n	800b29e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b24e:	7afb      	ldrb	r3, [r7, #11]
 800b250:	f003 0304 	and.w	r3, r3, #4
 800b254:	2b00      	cmp	r3, #0
 800b256:	d122      	bne.n	800b29e <follow_path+0xd2>
 800b258:	2305      	movs	r3, #5
 800b25a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b25c:	e01f      	b.n	800b29e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b25e:	7afb      	ldrb	r3, [r7, #11]
 800b260:	f003 0304 	and.w	r3, r3, #4
 800b264:	2b00      	cmp	r3, #0
 800b266:	d11c      	bne.n	800b2a2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	799b      	ldrb	r3, [r3, #6]
 800b26c:	f003 0310 	and.w	r3, r3, #16
 800b270:	2b00      	cmp	r3, #0
 800b272:	d102      	bne.n	800b27a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b274:	2305      	movs	r3, #5
 800b276:	75fb      	strb	r3, [r7, #23]
 800b278:	e014      	b.n	800b2a4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	695b      	ldr	r3, [r3, #20]
 800b284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b288:	4413      	add	r3, r2
 800b28a:	4619      	mov	r1, r3
 800b28c:	68f8      	ldr	r0, [r7, #12]
 800b28e:	f7ff fe43 	bl	800af18 <ld_clust>
 800b292:	4602      	mov	r2, r0
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b298:	e7c0      	b.n	800b21c <follow_path+0x50>
			if (res != FR_OK) break;
 800b29a:	bf00      	nop
 800b29c:	e002      	b.n	800b2a4 <follow_path+0xd8>
				break;
 800b29e:	bf00      	nop
 800b2a0:	e000      	b.n	800b2a4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b2a2:	bf00      	nop
			}
		}
	}

	return res;
 800b2a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3718      	adds	r7, #24
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}

0800b2ae <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b2ae:	b480      	push	{r7}
 800b2b0:	b087      	sub	sp, #28
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b2b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ba:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d031      	beq.n	800b328 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	617b      	str	r3, [r7, #20]
 800b2ca:	e002      	b.n	800b2d2 <get_ldnumber+0x24>
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	617b      	str	r3, [r7, #20]
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	2b20      	cmp	r3, #32
 800b2d8:	d903      	bls.n	800b2e2 <get_ldnumber+0x34>
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	2b3a      	cmp	r3, #58	@ 0x3a
 800b2e0:	d1f4      	bne.n	800b2cc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	2b3a      	cmp	r3, #58	@ 0x3a
 800b2e8:	d11c      	bne.n	800b324 <get_ldnumber+0x76>
			tp = *path;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	1c5a      	adds	r2, r3, #1
 800b2f4:	60fa      	str	r2, [r7, #12]
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	3b30      	subs	r3, #48	@ 0x30
 800b2fa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	2b09      	cmp	r3, #9
 800b300:	d80e      	bhi.n	800b320 <get_ldnumber+0x72>
 800b302:	68fa      	ldr	r2, [r7, #12]
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	429a      	cmp	r2, r3
 800b308:	d10a      	bne.n	800b320 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d107      	bne.n	800b320 <get_ldnumber+0x72>
					vol = (int)i;
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	3301      	adds	r3, #1
 800b318:	617b      	str	r3, [r7, #20]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	697a      	ldr	r2, [r7, #20]
 800b31e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	e002      	b.n	800b32a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b324:	2300      	movs	r3, #0
 800b326:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b328:	693b      	ldr	r3, [r7, #16]
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	371c      	adds	r7, #28
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr
	...

0800b338 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	70da      	strb	r2, [r3, #3]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f04f 32ff 	mov.w	r2, #4294967295
 800b34e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b350:	6839      	ldr	r1, [r7, #0]
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f7ff f8dc 	bl	800a510 <move_window>
 800b358:	4603      	mov	r3, r0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d001      	beq.n	800b362 <check_fs+0x2a>
 800b35e:	2304      	movs	r3, #4
 800b360:	e038      	b.n	800b3d4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	3330      	adds	r3, #48	@ 0x30
 800b366:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7fe fe1e 	bl	8009fac <ld_word>
 800b370:	4603      	mov	r3, r0
 800b372:	461a      	mov	r2, r3
 800b374:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b378:	429a      	cmp	r2, r3
 800b37a:	d001      	beq.n	800b380 <check_fs+0x48>
 800b37c:	2303      	movs	r3, #3
 800b37e:	e029      	b.n	800b3d4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b386:	2be9      	cmp	r3, #233	@ 0xe9
 800b388:	d009      	beq.n	800b39e <check_fs+0x66>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b390:	2beb      	cmp	r3, #235	@ 0xeb
 800b392:	d11e      	bne.n	800b3d2 <check_fs+0x9a>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b39a:	2b90      	cmp	r3, #144	@ 0x90
 800b39c:	d119      	bne.n	800b3d2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	3330      	adds	r3, #48	@ 0x30
 800b3a2:	3336      	adds	r3, #54	@ 0x36
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7fe fe1a 	bl	8009fde <ld_dword>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b3b0:	4a0a      	ldr	r2, [pc, #40]	@ (800b3dc <check_fs+0xa4>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d101      	bne.n	800b3ba <check_fs+0x82>
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	e00c      	b.n	800b3d4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	3330      	adds	r3, #48	@ 0x30
 800b3be:	3352      	adds	r3, #82	@ 0x52
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7fe fe0c 	bl	8009fde <ld_dword>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	4a05      	ldr	r2, [pc, #20]	@ (800b3e0 <check_fs+0xa8>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d101      	bne.n	800b3d2 <check_fs+0x9a>
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	e000      	b.n	800b3d4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b3d2:	2302      	movs	r3, #2
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3708      	adds	r7, #8
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	00544146 	.word	0x00544146
 800b3e0:	33544146 	.word	0x33544146

0800b3e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b096      	sub	sp, #88	@ 0x58
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	4613      	mov	r3, r2
 800b3f0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f7ff ff58 	bl	800b2ae <get_ldnumber>
 800b3fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b402:	2b00      	cmp	r3, #0
 800b404:	da01      	bge.n	800b40a <find_volume+0x26>
 800b406:	230b      	movs	r3, #11
 800b408:	e22d      	b.n	800b866 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b40a:	4aa1      	ldr	r2, [pc, #644]	@ (800b690 <find_volume+0x2ac>)
 800b40c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b40e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b412:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b416:	2b00      	cmp	r3, #0
 800b418:	d101      	bne.n	800b41e <find_volume+0x3a>
 800b41a:	230c      	movs	r3, #12
 800b41c:	e223      	b.n	800b866 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b422:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b424:	79fb      	ldrb	r3, [r7, #7]
 800b426:	f023 0301 	bic.w	r3, r3, #1
 800b42a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b42c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d01a      	beq.n	800b46a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b436:	785b      	ldrb	r3, [r3, #1]
 800b438:	4618      	mov	r0, r3
 800b43a:	f7fe fd17 	bl	8009e6c <disk_status>
 800b43e:	4603      	mov	r3, r0
 800b440:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b444:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b448:	f003 0301 	and.w	r3, r3, #1
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d10c      	bne.n	800b46a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b450:	79fb      	ldrb	r3, [r7, #7]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d007      	beq.n	800b466 <find_volume+0x82>
 800b456:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b45a:	f003 0304 	and.w	r3, r3, #4
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d001      	beq.n	800b466 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b462:	230a      	movs	r3, #10
 800b464:	e1ff      	b.n	800b866 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800b466:	2300      	movs	r3, #0
 800b468:	e1fd      	b.n	800b866 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b46c:	2200      	movs	r2, #0
 800b46e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b472:	b2da      	uxtb	r2, r3
 800b474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b476:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b47a:	785b      	ldrb	r3, [r3, #1]
 800b47c:	4618      	mov	r0, r3
 800b47e:	f7fe fd0f 	bl	8009ea0 <disk_initialize>
 800b482:	4603      	mov	r3, r0
 800b484:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b488:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b48c:	f003 0301 	and.w	r3, r3, #1
 800b490:	2b00      	cmp	r3, #0
 800b492:	d001      	beq.n	800b498 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b494:	2303      	movs	r3, #3
 800b496:	e1e6      	b.n	800b866 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b498:	79fb      	ldrb	r3, [r7, #7]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d007      	beq.n	800b4ae <find_volume+0xca>
 800b49e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b4a2:	f003 0304 	and.w	r3, r3, #4
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d001      	beq.n	800b4ae <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b4aa:	230a      	movs	r3, #10
 800b4ac:	e1db      	b.n	800b866 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b4b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b4b4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b4b6:	f7ff ff3f 	bl	800b338 <check_fs>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b4c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b4c4:	2b02      	cmp	r3, #2
 800b4c6:	d149      	bne.n	800b55c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	643b      	str	r3, [r7, #64]	@ 0x40
 800b4cc:	e01e      	b.n	800b50c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b4d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4d6:	011b      	lsls	r3, r3, #4
 800b4d8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b4dc:	4413      	add	r3, r2
 800b4de:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b4e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e2:	3304      	adds	r3, #4
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d006      	beq.n	800b4f8 <find_volume+0x114>
 800b4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ec:	3308      	adds	r3, #8
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f7fe fd75 	bl	8009fde <ld_dword>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	e000      	b.n	800b4fa <find_volume+0x116>
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	3358      	adds	r3, #88	@ 0x58
 800b500:	443b      	add	r3, r7
 800b502:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b506:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b508:	3301      	adds	r3, #1
 800b50a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b50c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b50e:	2b03      	cmp	r3, #3
 800b510:	d9dd      	bls.n	800b4ce <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b512:	2300      	movs	r3, #0
 800b514:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d002      	beq.n	800b522 <find_volume+0x13e>
 800b51c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b51e:	3b01      	subs	r3, #1
 800b520:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b522:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	3358      	adds	r3, #88	@ 0x58
 800b528:	443b      	add	r3, r7
 800b52a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b52e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b530:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b532:	2b00      	cmp	r3, #0
 800b534:	d005      	beq.n	800b542 <find_volume+0x15e>
 800b536:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b538:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b53a:	f7ff fefd 	bl	800b338 <check_fs>
 800b53e:	4603      	mov	r3, r0
 800b540:	e000      	b.n	800b544 <find_volume+0x160>
 800b542:	2303      	movs	r3, #3
 800b544:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b548:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d905      	bls.n	800b55c <find_volume+0x178>
 800b550:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b552:	3301      	adds	r3, #1
 800b554:	643b      	str	r3, [r7, #64]	@ 0x40
 800b556:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b558:	2b03      	cmp	r3, #3
 800b55a:	d9e2      	bls.n	800b522 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b55c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b560:	2b04      	cmp	r3, #4
 800b562:	d101      	bne.n	800b568 <find_volume+0x184>
 800b564:	2301      	movs	r3, #1
 800b566:	e17e      	b.n	800b866 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b568:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d901      	bls.n	800b574 <find_volume+0x190>
 800b570:	230d      	movs	r3, #13
 800b572:	e178      	b.n	800b866 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b576:	3330      	adds	r3, #48	@ 0x30
 800b578:	330b      	adds	r3, #11
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7fe fd16 	bl	8009fac <ld_word>
 800b580:	4603      	mov	r3, r0
 800b582:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b586:	d001      	beq.n	800b58c <find_volume+0x1a8>
 800b588:	230d      	movs	r3, #13
 800b58a:	e16c      	b.n	800b866 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b58e:	3330      	adds	r3, #48	@ 0x30
 800b590:	3316      	adds	r3, #22
 800b592:	4618      	mov	r0, r3
 800b594:	f7fe fd0a 	bl	8009fac <ld_word>
 800b598:	4603      	mov	r3, r0
 800b59a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b59c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d106      	bne.n	800b5b0 <find_volume+0x1cc>
 800b5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5a4:	3330      	adds	r3, #48	@ 0x30
 800b5a6:	3324      	adds	r3, #36	@ 0x24
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f7fe fd18 	bl	8009fde <ld_dword>
 800b5ae:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b5b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b5b4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b5b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5b8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800b5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5be:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c2:	789b      	ldrb	r3, [r3, #2]
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	d005      	beq.n	800b5d4 <find_volume+0x1f0>
 800b5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ca:	789b      	ldrb	r3, [r3, #2]
 800b5cc:	2b02      	cmp	r3, #2
 800b5ce:	d001      	beq.n	800b5d4 <find_volume+0x1f0>
 800b5d0:	230d      	movs	r3, #13
 800b5d2:	e148      	b.n	800b866 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b5d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5d6:	789b      	ldrb	r3, [r3, #2]
 800b5d8:	461a      	mov	r2, r3
 800b5da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5dc:	fb02 f303 	mul.w	r3, r2, r3
 800b5e0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b5ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5f0:	895b      	ldrh	r3, [r3, #10]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d008      	beq.n	800b608 <find_volume+0x224>
 800b5f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5f8:	895b      	ldrh	r3, [r3, #10]
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5fe:	895b      	ldrh	r3, [r3, #10]
 800b600:	3b01      	subs	r3, #1
 800b602:	4013      	ands	r3, r2
 800b604:	2b00      	cmp	r3, #0
 800b606:	d001      	beq.n	800b60c <find_volume+0x228>
 800b608:	230d      	movs	r3, #13
 800b60a:	e12c      	b.n	800b866 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b60e:	3330      	adds	r3, #48	@ 0x30
 800b610:	3311      	adds	r3, #17
 800b612:	4618      	mov	r0, r3
 800b614:	f7fe fcca 	bl	8009fac <ld_word>
 800b618:	4603      	mov	r3, r0
 800b61a:	461a      	mov	r2, r3
 800b61c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b61e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b622:	891b      	ldrh	r3, [r3, #8]
 800b624:	f003 030f 	and.w	r3, r3, #15
 800b628:	b29b      	uxth	r3, r3
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d001      	beq.n	800b632 <find_volume+0x24e>
 800b62e:	230d      	movs	r3, #13
 800b630:	e119      	b.n	800b866 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b634:	3330      	adds	r3, #48	@ 0x30
 800b636:	3313      	adds	r3, #19
 800b638:	4618      	mov	r0, r3
 800b63a:	f7fe fcb7 	bl	8009fac <ld_word>
 800b63e:	4603      	mov	r3, r0
 800b640:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b642:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b644:	2b00      	cmp	r3, #0
 800b646:	d106      	bne.n	800b656 <find_volume+0x272>
 800b648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b64a:	3330      	adds	r3, #48	@ 0x30
 800b64c:	3320      	adds	r3, #32
 800b64e:	4618      	mov	r0, r3
 800b650:	f7fe fcc5 	bl	8009fde <ld_dword>
 800b654:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b658:	3330      	adds	r3, #48	@ 0x30
 800b65a:	330e      	adds	r3, #14
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7fe fca5 	bl	8009fac <ld_word>
 800b662:	4603      	mov	r3, r0
 800b664:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b666:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d101      	bne.n	800b670 <find_volume+0x28c>
 800b66c:	230d      	movs	r3, #13
 800b66e:	e0fa      	b.n	800b866 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b670:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b672:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b674:	4413      	add	r3, r2
 800b676:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b678:	8912      	ldrh	r2, [r2, #8]
 800b67a:	0912      	lsrs	r2, r2, #4
 800b67c:	b292      	uxth	r2, r2
 800b67e:	4413      	add	r3, r2
 800b680:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b682:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b686:	429a      	cmp	r2, r3
 800b688:	d204      	bcs.n	800b694 <find_volume+0x2b0>
 800b68a:	230d      	movs	r3, #13
 800b68c:	e0eb      	b.n	800b866 <find_volume+0x482>
 800b68e:	bf00      	nop
 800b690:	20000360 	.word	0x20000360
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b694:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b698:	1ad3      	subs	r3, r2, r3
 800b69a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b69c:	8952      	ldrh	r2, [r2, #10]
 800b69e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6a2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d101      	bne.n	800b6ae <find_volume+0x2ca>
 800b6aa:	230d      	movs	r3, #13
 800b6ac:	e0db      	b.n	800b866 <find_volume+0x482>
		fmt = FS_FAT32;
 800b6ae:	2303      	movs	r3, #3
 800b6b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d802      	bhi.n	800b6c4 <find_volume+0x2e0>
 800b6be:	2302      	movs	r3, #2
 800b6c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6c6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d802      	bhi.n	800b6d4 <find_volume+0x2f0>
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6d6:	1c9a      	adds	r2, r3, #2
 800b6d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6da:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b6dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b6e0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b6e2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b6e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6e6:	441a      	add	r2, r3
 800b6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ea:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b6ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6f0:	441a      	add	r2, r3
 800b6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f4:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800b6f6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b6fa:	2b03      	cmp	r3, #3
 800b6fc:	d11e      	bne.n	800b73c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b700:	3330      	adds	r3, #48	@ 0x30
 800b702:	332a      	adds	r3, #42	@ 0x2a
 800b704:	4618      	mov	r0, r3
 800b706:	f7fe fc51 	bl	8009fac <ld_word>
 800b70a:	4603      	mov	r3, r0
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d001      	beq.n	800b714 <find_volume+0x330>
 800b710:	230d      	movs	r3, #13
 800b712:	e0a8      	b.n	800b866 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b716:	891b      	ldrh	r3, [r3, #8]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d001      	beq.n	800b720 <find_volume+0x33c>
 800b71c:	230d      	movs	r3, #13
 800b71e:	e0a2      	b.n	800b866 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b722:	3330      	adds	r3, #48	@ 0x30
 800b724:	332c      	adds	r3, #44	@ 0x2c
 800b726:	4618      	mov	r0, r3
 800b728:	f7fe fc59 	bl	8009fde <ld_dword>
 800b72c:	4602      	mov	r2, r0
 800b72e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b730:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b734:	695b      	ldr	r3, [r3, #20]
 800b736:	009b      	lsls	r3, r3, #2
 800b738:	647b      	str	r3, [r7, #68]	@ 0x44
 800b73a:	e01f      	b.n	800b77c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b73c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b73e:	891b      	ldrh	r3, [r3, #8]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d101      	bne.n	800b748 <find_volume+0x364>
 800b744:	230d      	movs	r3, #13
 800b746:	e08e      	b.n	800b866 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b74a:	6a1a      	ldr	r2, [r3, #32]
 800b74c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b74e:	441a      	add	r2, r3
 800b750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b752:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b754:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b758:	2b02      	cmp	r3, #2
 800b75a:	d103      	bne.n	800b764 <find_volume+0x380>
 800b75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b75e:	695b      	ldr	r3, [r3, #20]
 800b760:	005b      	lsls	r3, r3, #1
 800b762:	e00a      	b.n	800b77a <find_volume+0x396>
 800b764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b766:	695a      	ldr	r2, [r3, #20]
 800b768:	4613      	mov	r3, r2
 800b76a:	005b      	lsls	r3, r3, #1
 800b76c:	4413      	add	r3, r2
 800b76e:	085a      	lsrs	r2, r3, #1
 800b770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b772:	695b      	ldr	r3, [r3, #20]
 800b774:	f003 0301 	and.w	r3, r3, #1
 800b778:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b77a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b77c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b77e:	699a      	ldr	r2, [r3, #24]
 800b780:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b782:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800b786:	0a5b      	lsrs	r3, r3, #9
 800b788:	429a      	cmp	r2, r3
 800b78a:	d201      	bcs.n	800b790 <find_volume+0x3ac>
 800b78c:	230d      	movs	r3, #13
 800b78e:	e06a      	b.n	800b866 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b792:	f04f 32ff 	mov.w	r2, #4294967295
 800b796:	611a      	str	r2, [r3, #16]
 800b798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b79a:	691a      	ldr	r2, [r3, #16]
 800b79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b79e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7a2:	2280      	movs	r2, #128	@ 0x80
 800b7a4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b7a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b7aa:	2b03      	cmp	r3, #3
 800b7ac:	d149      	bne.n	800b842 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7b0:	3330      	adds	r3, #48	@ 0x30
 800b7b2:	3330      	adds	r3, #48	@ 0x30
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f7fe fbf9 	bl	8009fac <ld_word>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d140      	bne.n	800b842 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b7c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b7c8:	f7fe fea2 	bl	800a510 <move_window>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d137      	bne.n	800b842 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800b7d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b7d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7da:	3330      	adds	r3, #48	@ 0x30
 800b7dc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7fe fbe3 	bl	8009fac <ld_word>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d127      	bne.n	800b842 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7f4:	3330      	adds	r3, #48	@ 0x30
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7fe fbf1 	bl	8009fde <ld_dword>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	4a1c      	ldr	r2, [pc, #112]	@ (800b870 <find_volume+0x48c>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d11e      	bne.n	800b842 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b806:	3330      	adds	r3, #48	@ 0x30
 800b808:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7fe fbe6 	bl	8009fde <ld_dword>
 800b812:	4603      	mov	r3, r0
 800b814:	4a17      	ldr	r2, [pc, #92]	@ (800b874 <find_volume+0x490>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d113      	bne.n	800b842 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b81a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b81c:	3330      	adds	r3, #48	@ 0x30
 800b81e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b822:	4618      	mov	r0, r3
 800b824:	f7fe fbdb 	bl	8009fde <ld_dword>
 800b828:	4602      	mov	r2, r0
 800b82a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b82c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b82e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b830:	3330      	adds	r3, #48	@ 0x30
 800b832:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b836:	4618      	mov	r0, r3
 800b838:	f7fe fbd1 	bl	8009fde <ld_dword>
 800b83c:	4602      	mov	r2, r0
 800b83e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b840:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b844:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b848:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b84a:	4b0b      	ldr	r3, [pc, #44]	@ (800b878 <find_volume+0x494>)
 800b84c:	881b      	ldrh	r3, [r3, #0]
 800b84e:	3301      	adds	r3, #1
 800b850:	b29a      	uxth	r2, r3
 800b852:	4b09      	ldr	r3, [pc, #36]	@ (800b878 <find_volume+0x494>)
 800b854:	801a      	strh	r2, [r3, #0]
 800b856:	4b08      	ldr	r3, [pc, #32]	@ (800b878 <find_volume+0x494>)
 800b858:	881a      	ldrh	r2, [r3, #0]
 800b85a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b85c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b85e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b860:	f7fe fdee 	bl	800a440 <clear_lock>
#endif
	return FR_OK;
 800b864:	2300      	movs	r3, #0
}
 800b866:	4618      	mov	r0, r3
 800b868:	3758      	adds	r7, #88	@ 0x58
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	41615252 	.word	0x41615252
 800b874:	61417272 	.word	0x61417272
 800b878:	20000364 	.word	0x20000364

0800b87c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b886:	2309      	movs	r3, #9
 800b888:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d01c      	beq.n	800b8ca <validate+0x4e>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d018      	beq.n	800b8ca <validate+0x4e>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d013      	beq.n	800b8ca <validate+0x4e>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	889a      	ldrh	r2, [r3, #4]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	88db      	ldrh	r3, [r3, #6]
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d10c      	bne.n	800b8ca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	785b      	ldrb	r3, [r3, #1]
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7fe fad8 	bl	8009e6c <disk_status>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	f003 0301 	and.w	r3, r3, #1
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d101      	bne.n	800b8ca <validate+0x4e>
			res = FR_OK;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b8ca:	7bfb      	ldrb	r3, [r7, #15]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d102      	bne.n	800b8d6 <validate+0x5a>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	e000      	b.n	800b8d8 <validate+0x5c>
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	683a      	ldr	r2, [r7, #0]
 800b8da:	6013      	str	r3, [r2, #0]
	return res;
 800b8dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3710      	adds	r7, #16
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
	...

0800b8e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b088      	sub	sp, #32
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	4613      	mov	r3, r2
 800b8f4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b8fa:	f107 0310 	add.w	r3, r7, #16
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7ff fcd5 	bl	800b2ae <get_ldnumber>
 800b904:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	da01      	bge.n	800b910 <f_mount+0x28>
 800b90c:	230b      	movs	r3, #11
 800b90e:	e02b      	b.n	800b968 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b910:	4a17      	ldr	r2, [pc, #92]	@ (800b970 <f_mount+0x88>)
 800b912:	69fb      	ldr	r3, [r7, #28]
 800b914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b918:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b91a:	69bb      	ldr	r3, [r7, #24]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d005      	beq.n	800b92c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b920:	69b8      	ldr	r0, [r7, #24]
 800b922:	f7fe fd8d 	bl	800a440 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b926:	69bb      	ldr	r3, [r7, #24]
 800b928:	2200      	movs	r2, #0
 800b92a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d002      	beq.n	800b938 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2200      	movs	r2, #0
 800b936:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b938:	68fa      	ldr	r2, [r7, #12]
 800b93a:	490d      	ldr	r1, [pc, #52]	@ (800b970 <f_mount+0x88>)
 800b93c:	69fb      	ldr	r3, [r7, #28]
 800b93e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d002      	beq.n	800b94e <f_mount+0x66>
 800b948:	79fb      	ldrb	r3, [r7, #7]
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d001      	beq.n	800b952 <f_mount+0x6a>
 800b94e:	2300      	movs	r3, #0
 800b950:	e00a      	b.n	800b968 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b952:	f107 010c 	add.w	r1, r7, #12
 800b956:	f107 0308 	add.w	r3, r7, #8
 800b95a:	2200      	movs	r2, #0
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7ff fd41 	bl	800b3e4 <find_volume>
 800b962:	4603      	mov	r3, r0
 800b964:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b966:	7dfb      	ldrb	r3, [r7, #23]
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3720      	adds	r7, #32
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}
 800b970:	20000360 	.word	0x20000360

0800b974 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b098      	sub	sp, #96	@ 0x60
 800b978:	af00      	add	r7, sp, #0
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	60b9      	str	r1, [r7, #8]
 800b97e:	4613      	mov	r3, r2
 800b980:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d101      	bne.n	800b98c <f_open+0x18>
 800b988:	2309      	movs	r3, #9
 800b98a:	e1a9      	b.n	800bce0 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b98c:	79fb      	ldrb	r3, [r7, #7]
 800b98e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b992:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b994:	79fa      	ldrb	r2, [r7, #7]
 800b996:	f107 0110 	add.w	r1, r7, #16
 800b99a:	f107 0308 	add.w	r3, r7, #8
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7ff fd20 	bl	800b3e4 <find_volume>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800b9aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	f040 818d 	bne.w	800bcce <f_open+0x35a>
		dj.obj.fs = fs;
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b9b8:	68ba      	ldr	r2, [r7, #8]
 800b9ba:	f107 0314 	add.w	r3, r7, #20
 800b9be:	4611      	mov	r1, r2
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7ff fc03 	bl	800b1cc <follow_path>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b9cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d118      	bne.n	800ba06 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b9d4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b9d8:	b25b      	sxtb	r3, r3
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	da03      	bge.n	800b9e6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b9de:	2306      	movs	r3, #6
 800b9e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b9e4:	e00f      	b.n	800ba06 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b9e6:	79fb      	ldrb	r3, [r7, #7]
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	bf8c      	ite	hi
 800b9ec:	2301      	movhi	r3, #1
 800b9ee:	2300      	movls	r3, #0
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	f107 0314 	add.w	r3, r7, #20
 800b9f8:	4611      	mov	r1, r2
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fe fbd8 	bl	800a1b0 <chk_lock>
 800ba00:	4603      	mov	r3, r0
 800ba02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ba06:	79fb      	ldrb	r3, [r7, #7]
 800ba08:	f003 031c 	and.w	r3, r3, #28
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d07f      	beq.n	800bb10 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800ba10:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d017      	beq.n	800ba48 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ba18:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ba1c:	2b04      	cmp	r3, #4
 800ba1e:	d10e      	bne.n	800ba3e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ba20:	f7fe fc22 	bl	800a268 <enq_lock>
 800ba24:	4603      	mov	r3, r0
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d006      	beq.n	800ba38 <f_open+0xc4>
 800ba2a:	f107 0314 	add.w	r3, r7, #20
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7ff fb06 	bl	800b040 <dir_register>
 800ba34:	4603      	mov	r3, r0
 800ba36:	e000      	b.n	800ba3a <f_open+0xc6>
 800ba38:	2312      	movs	r3, #18
 800ba3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ba3e:	79fb      	ldrb	r3, [r7, #7]
 800ba40:	f043 0308 	orr.w	r3, r3, #8
 800ba44:	71fb      	strb	r3, [r7, #7]
 800ba46:	e010      	b.n	800ba6a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ba48:	7ebb      	ldrb	r3, [r7, #26]
 800ba4a:	f003 0311 	and.w	r3, r3, #17
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d003      	beq.n	800ba5a <f_open+0xe6>
					res = FR_DENIED;
 800ba52:	2307      	movs	r3, #7
 800ba54:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ba58:	e007      	b.n	800ba6a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ba5a:	79fb      	ldrb	r3, [r7, #7]
 800ba5c:	f003 0304 	and.w	r3, r3, #4
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d002      	beq.n	800ba6a <f_open+0xf6>
 800ba64:	2308      	movs	r3, #8
 800ba66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ba6a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d168      	bne.n	800bb44 <f_open+0x1d0>
 800ba72:	79fb      	ldrb	r3, [r7, #7]
 800ba74:	f003 0308 	and.w	r3, r3, #8
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d063      	beq.n	800bb44 <f_open+0x1d0>
				dw = GET_FATTIME();
 800ba7c:	f7fa f910 	bl	8005ca0 <get_fattime>
 800ba80:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ba82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba84:	330e      	adds	r3, #14
 800ba86:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7fe fae6 	bl	800a05a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ba8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba90:	3316      	adds	r3, #22
 800ba92:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7fe fae0 	bl	800a05a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ba9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba9c:	330b      	adds	r3, #11
 800ba9e:	2220      	movs	r2, #32
 800baa0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800baa6:	4611      	mov	r1, r2
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7ff fa35 	bl	800af18 <ld_clust>
 800baae:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bab4:	2200      	movs	r2, #0
 800bab6:	4618      	mov	r0, r3
 800bab8:	f7ff fa4d 	bl	800af56 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800babc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800babe:	331c      	adds	r3, #28
 800bac0:	2100      	movs	r1, #0
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7fe fac9 	bl	800a05a <st_dword>
					fs->wflag = 1;
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	2201      	movs	r2, #1
 800bacc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bace:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d037      	beq.n	800bb44 <f_open+0x1d0>
						dw = fs->winsect;
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bad8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800bada:	f107 0314 	add.w	r3, r7, #20
 800bade:	2200      	movs	r2, #0
 800bae0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7fe ff60 	bl	800a9a8 <remove_chain>
 800bae8:	4603      	mov	r3, r0
 800baea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800baee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d126      	bne.n	800bb44 <f_open+0x1d0>
							res = move_window(fs, dw);
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7fe fd08 	bl	800a510 <move_window>
 800bb00:	4603      	mov	r3, r0
 800bb02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bb0a:	3a01      	subs	r2, #1
 800bb0c:	60da      	str	r2, [r3, #12]
 800bb0e:	e019      	b.n	800bb44 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bb10:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d115      	bne.n	800bb44 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bb18:	7ebb      	ldrb	r3, [r7, #26]
 800bb1a:	f003 0310 	and.w	r3, r3, #16
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d003      	beq.n	800bb2a <f_open+0x1b6>
					res = FR_NO_FILE;
 800bb22:	2304      	movs	r3, #4
 800bb24:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bb28:	e00c      	b.n	800bb44 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bb2a:	79fb      	ldrb	r3, [r7, #7]
 800bb2c:	f003 0302 	and.w	r3, r3, #2
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d007      	beq.n	800bb44 <f_open+0x1d0>
 800bb34:	7ebb      	ldrb	r3, [r7, #26]
 800bb36:	f003 0301 	and.w	r3, r3, #1
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d002      	beq.n	800bb44 <f_open+0x1d0>
						res = FR_DENIED;
 800bb3e:	2307      	movs	r3, #7
 800bb40:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800bb44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d126      	bne.n	800bb9a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bb4c:	79fb      	ldrb	r3, [r7, #7]
 800bb4e:	f003 0308 	and.w	r3, r3, #8
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d003      	beq.n	800bb5e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800bb56:	79fb      	ldrb	r3, [r7, #7]
 800bb58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb5c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800bb66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bb6c:	79fb      	ldrb	r3, [r7, #7]
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	bf8c      	ite	hi
 800bb72:	2301      	movhi	r3, #1
 800bb74:	2300      	movls	r3, #0
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	461a      	mov	r2, r3
 800bb7a:	f107 0314 	add.w	r3, r7, #20
 800bb7e:	4611      	mov	r1, r2
 800bb80:	4618      	mov	r0, r3
 800bb82:	f7fe fb93 	bl	800a2ac <inc_lock>
 800bb86:	4602      	mov	r2, r0
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	691b      	ldr	r3, [r3, #16]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d102      	bne.n	800bb9a <f_open+0x226>
 800bb94:	2302      	movs	r3, #2
 800bb96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bb9a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	f040 8095 	bne.w	800bcce <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bba8:	4611      	mov	r1, r2
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7ff f9b4 	bl	800af18 <ld_clust>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bbb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbb8:	331c      	adds	r3, #28
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7fe fa0f 	bl	8009fde <ld_dword>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bbcc:	693a      	ldr	r2, [r7, #16]
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	88da      	ldrh	r2, [r3, #6]
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	79fa      	ldrb	r2, [r7, #7]
 800bbde:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	3330      	adds	r3, #48	@ 0x30
 800bbf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bbfa:	2100      	movs	r1, #0
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7fe fa79 	bl	800a0f4 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bc02:	79fb      	ldrb	r3, [r7, #7]
 800bc04:	f003 0320 	and.w	r3, r3, #32
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d060      	beq.n	800bcce <f_open+0x35a>
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d05c      	beq.n	800bcce <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	68da      	ldr	r2, [r3, #12]
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	895b      	ldrh	r3, [r3, #10]
 800bc20:	025b      	lsls	r3, r3, #9
 800bc22:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	68db      	ldr	r3, [r3, #12]
 800bc2e:	657b      	str	r3, [r7, #84]	@ 0x54
 800bc30:	e016      	b.n	800bc60 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7fe fd25 	bl	800a686 <get_fat>
 800bc3c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800bc3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d802      	bhi.n	800bc4a <f_open+0x2d6>
 800bc44:	2302      	movs	r3, #2
 800bc46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bc4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc50:	d102      	bne.n	800bc58 <f_open+0x2e4>
 800bc52:	2301      	movs	r3, #1
 800bc54:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bc58:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bc5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc5c:	1ad3      	subs	r3, r2, r3
 800bc5e:	657b      	str	r3, [r7, #84]	@ 0x54
 800bc60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d103      	bne.n	800bc70 <f_open+0x2fc>
 800bc68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bc6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d8e0      	bhi.n	800bc32 <f_open+0x2be>
				}
				fp->clust = clst;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bc74:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bc76:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d127      	bne.n	800bcce <f_open+0x35a>
 800bc7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d022      	beq.n	800bcce <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f7fe fcdb 	bl	800a648 <clust2sect>
 800bc92:	6478      	str	r0, [r7, #68]	@ 0x44
 800bc94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d103      	bne.n	800bca2 <f_open+0x32e>
						res = FR_INT_ERR;
 800bc9a:	2302      	movs	r3, #2
 800bc9c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bca0:	e015      	b.n	800bcce <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bca4:	0a5a      	lsrs	r2, r3, #9
 800bca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bca8:	441a      	add	r2, r3
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	7858      	ldrb	r0, [r3, #1]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	6a1a      	ldr	r2, [r3, #32]
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	f7fe f917 	bl	8009ef0 <disk_read>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d002      	beq.n	800bcce <f_open+0x35a>
 800bcc8:	2301      	movs	r3, #1
 800bcca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bcce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d002      	beq.n	800bcdc <f_open+0x368>
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bcdc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3760      	adds	r7, #96	@ 0x60
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b08e      	sub	sp, #56	@ 0x38
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	607a      	str	r2, [r7, #4]
 800bcf4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f107 0214 	add.w	r2, r7, #20
 800bd06:	4611      	mov	r1, r2
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f7ff fdb7 	bl	800b87c <validate>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bd14:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d107      	bne.n	800bd2c <f_read+0x44>
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	7d5b      	ldrb	r3, [r3, #21]
 800bd20:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bd24:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d002      	beq.n	800bd32 <f_read+0x4a>
 800bd2c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bd30:	e115      	b.n	800bf5e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	7d1b      	ldrb	r3, [r3, #20]
 800bd36:	f003 0301 	and.w	r3, r3, #1
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d101      	bne.n	800bd42 <f_read+0x5a>
 800bd3e:	2307      	movs	r3, #7
 800bd40:	e10d      	b.n	800bf5e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	68da      	ldr	r2, [r3, #12]
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	699b      	ldr	r3, [r3, #24]
 800bd4a:	1ad3      	subs	r3, r2, r3
 800bd4c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	6a3b      	ldr	r3, [r7, #32]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	f240 80fe 	bls.w	800bf54 <f_read+0x26c>
 800bd58:	6a3b      	ldr	r3, [r7, #32]
 800bd5a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800bd5c:	e0fa      	b.n	800bf54 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	699b      	ldr	r3, [r3, #24]
 800bd62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	f040 80c6 	bne.w	800bef8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	699b      	ldr	r3, [r3, #24]
 800bd70:	0a5b      	lsrs	r3, r3, #9
 800bd72:	697a      	ldr	r2, [r7, #20]
 800bd74:	8952      	ldrh	r2, [r2, #10]
 800bd76:	3a01      	subs	r2, #1
 800bd78:	4013      	ands	r3, r2
 800bd7a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d12f      	bne.n	800bde2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	699b      	ldr	r3, [r3, #24]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d103      	bne.n	800bd92 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	689b      	ldr	r3, [r3, #8]
 800bd8e:	633b      	str	r3, [r7, #48]	@ 0x30
 800bd90:	e013      	b.n	800bdba <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d007      	beq.n	800bdaa <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	699b      	ldr	r3, [r3, #24]
 800bd9e:	4619      	mov	r1, r3
 800bda0:	68f8      	ldr	r0, [r7, #12]
 800bda2:	f7fe fefe 	bl	800aba2 <clmt_clust>
 800bda6:	6338      	str	r0, [r7, #48]	@ 0x30
 800bda8:	e007      	b.n	800bdba <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800bdaa:	68fa      	ldr	r2, [r7, #12]
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	69db      	ldr	r3, [r3, #28]
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	4610      	mov	r0, r2
 800bdb4:	f7fe fc67 	bl	800a686 <get_fat>
 800bdb8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800bdba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdbc:	2b01      	cmp	r3, #1
 800bdbe:	d804      	bhi.n	800bdca <f_read+0xe2>
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2202      	movs	r2, #2
 800bdc4:	755a      	strb	r2, [r3, #21]
 800bdc6:	2302      	movs	r3, #2
 800bdc8:	e0c9      	b.n	800bf5e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bdca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd0:	d104      	bne.n	800bddc <f_read+0xf4>
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2201      	movs	r2, #1
 800bdd6:	755a      	strb	r2, [r3, #21]
 800bdd8:	2301      	movs	r3, #1
 800bdda:	e0c0      	b.n	800bf5e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bde0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bde2:	697a      	ldr	r2, [r7, #20]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	69db      	ldr	r3, [r3, #28]
 800bde8:	4619      	mov	r1, r3
 800bdea:	4610      	mov	r0, r2
 800bdec:	f7fe fc2c 	bl	800a648 <clust2sect>
 800bdf0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bdf2:	69bb      	ldr	r3, [r7, #24]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d104      	bne.n	800be02 <f_read+0x11a>
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2202      	movs	r2, #2
 800bdfc:	755a      	strb	r2, [r3, #21]
 800bdfe:	2302      	movs	r3, #2
 800be00:	e0ad      	b.n	800bf5e <f_read+0x276>
			sect += csect;
 800be02:	69ba      	ldr	r2, [r7, #24]
 800be04:	69fb      	ldr	r3, [r7, #28]
 800be06:	4413      	add	r3, r2
 800be08:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	0a5b      	lsrs	r3, r3, #9
 800be0e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800be10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be12:	2b00      	cmp	r3, #0
 800be14:	d039      	beq.n	800be8a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800be16:	69fa      	ldr	r2, [r7, #28]
 800be18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be1a:	4413      	add	r3, r2
 800be1c:	697a      	ldr	r2, [r7, #20]
 800be1e:	8952      	ldrh	r2, [r2, #10]
 800be20:	4293      	cmp	r3, r2
 800be22:	d905      	bls.n	800be30 <f_read+0x148>
					cc = fs->csize - csect;
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	895b      	ldrh	r3, [r3, #10]
 800be28:	461a      	mov	r2, r3
 800be2a:	69fb      	ldr	r3, [r7, #28]
 800be2c:	1ad3      	subs	r3, r2, r3
 800be2e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	7858      	ldrb	r0, [r3, #1]
 800be34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be36:	69ba      	ldr	r2, [r7, #24]
 800be38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800be3a:	f7fe f859 	bl	8009ef0 <disk_read>
 800be3e:	4603      	mov	r3, r0
 800be40:	2b00      	cmp	r3, #0
 800be42:	d004      	beq.n	800be4e <f_read+0x166>
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2201      	movs	r2, #1
 800be48:	755a      	strb	r2, [r3, #21]
 800be4a:	2301      	movs	r3, #1
 800be4c:	e087      	b.n	800bf5e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	7d1b      	ldrb	r3, [r3, #20]
 800be52:	b25b      	sxtb	r3, r3
 800be54:	2b00      	cmp	r3, #0
 800be56:	da14      	bge.n	800be82 <f_read+0x19a>
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	6a1a      	ldr	r2, [r3, #32]
 800be5c:	69bb      	ldr	r3, [r7, #24]
 800be5e:	1ad3      	subs	r3, r2, r3
 800be60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be62:	429a      	cmp	r2, r3
 800be64:	d90d      	bls.n	800be82 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	6a1a      	ldr	r2, [r3, #32]
 800be6a:	69bb      	ldr	r3, [r7, #24]
 800be6c:	1ad3      	subs	r3, r2, r3
 800be6e:	025b      	lsls	r3, r3, #9
 800be70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be72:	18d0      	adds	r0, r2, r3
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	3330      	adds	r3, #48	@ 0x30
 800be78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800be7c:	4619      	mov	r1, r3
 800be7e:	f7fe f918 	bl	800a0b2 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800be82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be84:	025b      	lsls	r3, r3, #9
 800be86:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800be88:	e050      	b.n	800bf2c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	6a1b      	ldr	r3, [r3, #32]
 800be8e:	69ba      	ldr	r2, [r7, #24]
 800be90:	429a      	cmp	r2, r3
 800be92:	d02e      	beq.n	800bef2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	7d1b      	ldrb	r3, [r3, #20]
 800be98:	b25b      	sxtb	r3, r3
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	da18      	bge.n	800bed0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	7858      	ldrb	r0, [r3, #1]
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	6a1a      	ldr	r2, [r3, #32]
 800beac:	2301      	movs	r3, #1
 800beae:	f7fe f83f 	bl	8009f30 <disk_write>
 800beb2:	4603      	mov	r3, r0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d004      	beq.n	800bec2 <f_read+0x1da>
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2201      	movs	r2, #1
 800bebc:	755a      	strb	r2, [r3, #21]
 800bebe:	2301      	movs	r3, #1
 800bec0:	e04d      	b.n	800bf5e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	7d1b      	ldrb	r3, [r3, #20]
 800bec6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800beca:	b2da      	uxtb	r2, r3
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	7858      	ldrb	r0, [r3, #1]
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800beda:	2301      	movs	r3, #1
 800bedc:	69ba      	ldr	r2, [r7, #24]
 800bede:	f7fe f807 	bl	8009ef0 <disk_read>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d004      	beq.n	800bef2 <f_read+0x20a>
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2201      	movs	r2, #1
 800beec:	755a      	strb	r2, [r3, #21]
 800beee:	2301      	movs	r3, #1
 800bef0:	e035      	b.n	800bf5e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	69ba      	ldr	r2, [r7, #24]
 800bef6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	699b      	ldr	r3, [r3, #24]
 800befc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf00:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800bf04:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800bf06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d901      	bls.n	800bf12 <f_read+0x22a>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	699b      	ldr	r3, [r3, #24]
 800bf1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf20:	4413      	add	r3, r2
 800bf22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf24:	4619      	mov	r1, r3
 800bf26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bf28:	f7fe f8c3 	bl	800a0b2 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800bf2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf30:	4413      	add	r3, r2
 800bf32:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	699a      	ldr	r2, [r3, #24]
 800bf38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf3a:	441a      	add	r2, r3
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	619a      	str	r2, [r3, #24]
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	681a      	ldr	r2, [r3, #0]
 800bf44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf46:	441a      	add	r2, r3
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	601a      	str	r2, [r3, #0]
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf50:	1ad3      	subs	r3, r2, r3
 800bf52:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	f47f af01 	bne.w	800bd5e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800bf5c:	2300      	movs	r3, #0
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3738      	adds	r7, #56	@ 0x38
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}

0800bf66 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bf66:	b580      	push	{r7, lr}
 800bf68:	b08c      	sub	sp, #48	@ 0x30
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	60f8      	str	r0, [r7, #12]
 800bf6e:	60b9      	str	r1, [r7, #8]
 800bf70:	607a      	str	r2, [r7, #4]
 800bf72:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f107 0210 	add.w	r2, r7, #16
 800bf84:	4611      	mov	r1, r2
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7ff fc78 	bl	800b87c <validate>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bf92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d107      	bne.n	800bfaa <f_write+0x44>
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	7d5b      	ldrb	r3, [r3, #21]
 800bf9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bfa2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d002      	beq.n	800bfb0 <f_write+0x4a>
 800bfaa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bfae:	e14b      	b.n	800c248 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	7d1b      	ldrb	r3, [r3, #20]
 800bfb4:	f003 0302 	and.w	r3, r3, #2
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d101      	bne.n	800bfc0 <f_write+0x5a>
 800bfbc:	2307      	movs	r3, #7
 800bfbe:	e143      	b.n	800c248 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	699a      	ldr	r2, [r3, #24]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	441a      	add	r2, r3
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	699b      	ldr	r3, [r3, #24]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	f080 812d 	bcs.w	800c22c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	699b      	ldr	r3, [r3, #24]
 800bfd6:	43db      	mvns	r3, r3
 800bfd8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bfda:	e127      	b.n	800c22c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	699b      	ldr	r3, [r3, #24]
 800bfe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	f040 80e3 	bne.w	800c1b0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	699b      	ldr	r3, [r3, #24]
 800bfee:	0a5b      	lsrs	r3, r3, #9
 800bff0:	693a      	ldr	r2, [r7, #16]
 800bff2:	8952      	ldrh	r2, [r2, #10]
 800bff4:	3a01      	subs	r2, #1
 800bff6:	4013      	ands	r3, r2
 800bff8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d143      	bne.n	800c088 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	699b      	ldr	r3, [r3, #24]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d10c      	bne.n	800c022 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c010:	2b00      	cmp	r3, #0
 800c012:	d11a      	bne.n	800c04a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	2100      	movs	r1, #0
 800c018:	4618      	mov	r0, r3
 800c01a:	f7fe fd2a 	bl	800aa72 <create_chain>
 800c01e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c020:	e013      	b.n	800c04a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c026:	2b00      	cmp	r3, #0
 800c028:	d007      	beq.n	800c03a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	699b      	ldr	r3, [r3, #24]
 800c02e:	4619      	mov	r1, r3
 800c030:	68f8      	ldr	r0, [r7, #12]
 800c032:	f7fe fdb6 	bl	800aba2 <clmt_clust>
 800c036:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c038:	e007      	b.n	800c04a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c03a:	68fa      	ldr	r2, [r7, #12]
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	69db      	ldr	r3, [r3, #28]
 800c040:	4619      	mov	r1, r3
 800c042:	4610      	mov	r0, r2
 800c044:	f7fe fd15 	bl	800aa72 <create_chain>
 800c048:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c04a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	f000 80f2 	beq.w	800c236 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c054:	2b01      	cmp	r3, #1
 800c056:	d104      	bne.n	800c062 <f_write+0xfc>
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2202      	movs	r2, #2
 800c05c:	755a      	strb	r2, [r3, #21]
 800c05e:	2302      	movs	r3, #2
 800c060:	e0f2      	b.n	800c248 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c064:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c068:	d104      	bne.n	800c074 <f_write+0x10e>
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2201      	movs	r2, #1
 800c06e:	755a      	strb	r2, [r3, #21]
 800c070:	2301      	movs	r3, #1
 800c072:	e0e9      	b.n	800c248 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c078:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	689b      	ldr	r3, [r3, #8]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d102      	bne.n	800c088 <f_write+0x122>
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c086:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	7d1b      	ldrb	r3, [r3, #20]
 800c08c:	b25b      	sxtb	r3, r3
 800c08e:	2b00      	cmp	r3, #0
 800c090:	da18      	bge.n	800c0c4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	7858      	ldrb	r0, [r3, #1]
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	6a1a      	ldr	r2, [r3, #32]
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	f7fd ff45 	bl	8009f30 <disk_write>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d004      	beq.n	800c0b6 <f_write+0x150>
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	755a      	strb	r2, [r3, #21]
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	e0c8      	b.n	800c248 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	7d1b      	ldrb	r3, [r3, #20]
 800c0ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0be:	b2da      	uxtb	r2, r3
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c0c4:	693a      	ldr	r2, [r7, #16]
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	69db      	ldr	r3, [r3, #28]
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	4610      	mov	r0, r2
 800c0ce:	f7fe fabb 	bl	800a648 <clust2sect>
 800c0d2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d104      	bne.n	800c0e4 <f_write+0x17e>
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2202      	movs	r2, #2
 800c0de:	755a      	strb	r2, [r3, #21]
 800c0e0:	2302      	movs	r3, #2
 800c0e2:	e0b1      	b.n	800c248 <f_write+0x2e2>
			sect += csect;
 800c0e4:	697a      	ldr	r2, [r7, #20]
 800c0e6:	69bb      	ldr	r3, [r7, #24]
 800c0e8:	4413      	add	r3, r2
 800c0ea:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	0a5b      	lsrs	r3, r3, #9
 800c0f0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c0f2:	6a3b      	ldr	r3, [r7, #32]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d03c      	beq.n	800c172 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c0f8:	69ba      	ldr	r2, [r7, #24]
 800c0fa:	6a3b      	ldr	r3, [r7, #32]
 800c0fc:	4413      	add	r3, r2
 800c0fe:	693a      	ldr	r2, [r7, #16]
 800c100:	8952      	ldrh	r2, [r2, #10]
 800c102:	4293      	cmp	r3, r2
 800c104:	d905      	bls.n	800c112 <f_write+0x1ac>
					cc = fs->csize - csect;
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	895b      	ldrh	r3, [r3, #10]
 800c10a:	461a      	mov	r2, r3
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	1ad3      	subs	r3, r2, r3
 800c110:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	7858      	ldrb	r0, [r3, #1]
 800c116:	6a3b      	ldr	r3, [r7, #32]
 800c118:	697a      	ldr	r2, [r7, #20]
 800c11a:	69f9      	ldr	r1, [r7, #28]
 800c11c:	f7fd ff08 	bl	8009f30 <disk_write>
 800c120:	4603      	mov	r3, r0
 800c122:	2b00      	cmp	r3, #0
 800c124:	d004      	beq.n	800c130 <f_write+0x1ca>
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2201      	movs	r2, #1
 800c12a:	755a      	strb	r2, [r3, #21]
 800c12c:	2301      	movs	r3, #1
 800c12e:	e08b      	b.n	800c248 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	6a1a      	ldr	r2, [r3, #32]
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	1ad3      	subs	r3, r2, r3
 800c138:	6a3a      	ldr	r2, [r7, #32]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d915      	bls.n	800c16a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	6a1a      	ldr	r2, [r3, #32]
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	1ad3      	subs	r3, r2, r3
 800c14c:	025b      	lsls	r3, r3, #9
 800c14e:	69fa      	ldr	r2, [r7, #28]
 800c150:	4413      	add	r3, r2
 800c152:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c156:	4619      	mov	r1, r3
 800c158:	f7fd ffab 	bl	800a0b2 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	7d1b      	ldrb	r3, [r3, #20]
 800c160:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c164:	b2da      	uxtb	r2, r3
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c16a:	6a3b      	ldr	r3, [r7, #32]
 800c16c:	025b      	lsls	r3, r3, #9
 800c16e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800c170:	e03f      	b.n	800c1f2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	6a1b      	ldr	r3, [r3, #32]
 800c176:	697a      	ldr	r2, [r7, #20]
 800c178:	429a      	cmp	r2, r3
 800c17a:	d016      	beq.n	800c1aa <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	699a      	ldr	r2, [r3, #24]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c184:	429a      	cmp	r2, r3
 800c186:	d210      	bcs.n	800c1aa <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	7858      	ldrb	r0, [r3, #1]
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c192:	2301      	movs	r3, #1
 800c194:	697a      	ldr	r2, [r7, #20]
 800c196:	f7fd feab 	bl	8009ef0 <disk_read>
 800c19a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d004      	beq.n	800c1aa <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	755a      	strb	r2, [r3, #21]
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	e04e      	b.n	800c248 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	697a      	ldr	r2, [r7, #20]
 800c1ae:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	699b      	ldr	r3, [r3, #24]
 800c1b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1b8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c1bc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c1be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d901      	bls.n	800c1ca <f_write+0x264>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	699b      	ldr	r3, [r3, #24]
 800c1d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1d8:	4413      	add	r3, r2
 800c1da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1dc:	69f9      	ldr	r1, [r7, #28]
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7fd ff67 	bl	800a0b2 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	7d1b      	ldrb	r3, [r3, #20]
 800c1e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c1ec:	b2da      	uxtb	r2, r3
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c1f2:	69fa      	ldr	r2, [r7, #28]
 800c1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f6:	4413      	add	r3, r2
 800c1f8:	61fb      	str	r3, [r7, #28]
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	699a      	ldr	r2, [r3, #24]
 800c1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c200:	441a      	add	r2, r3
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	619a      	str	r2, [r3, #24]
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	68da      	ldr	r2, [r3, #12]
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	699b      	ldr	r3, [r3, #24]
 800c20e:	429a      	cmp	r2, r3
 800c210:	bf38      	it	cc
 800c212:	461a      	movcc	r2, r3
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	60da      	str	r2, [r3, #12]
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	681a      	ldr	r2, [r3, #0]
 800c21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c21e:	441a      	add	r2, r3
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	601a      	str	r2, [r3, #0]
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c228:	1ad3      	subs	r3, r2, r3
 800c22a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	f47f aed4 	bne.w	800bfdc <f_write+0x76>
 800c234:	e000      	b.n	800c238 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c236:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	7d1b      	ldrb	r3, [r3, #20]
 800c23c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c240:	b2da      	uxtb	r2, r3
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c246:	2300      	movs	r3, #0
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3730      	adds	r7, #48	@ 0x30
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b086      	sub	sp, #24
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f107 0208 	add.w	r2, r7, #8
 800c25e:	4611      	mov	r1, r2
 800c260:	4618      	mov	r0, r3
 800c262:	f7ff fb0b 	bl	800b87c <validate>
 800c266:	4603      	mov	r3, r0
 800c268:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c26a:	7dfb      	ldrb	r3, [r7, #23]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d168      	bne.n	800c342 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	7d1b      	ldrb	r3, [r3, #20]
 800c274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d062      	beq.n	800c342 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	7d1b      	ldrb	r3, [r3, #20]
 800c280:	b25b      	sxtb	r3, r3
 800c282:	2b00      	cmp	r3, #0
 800c284:	da15      	bge.n	800c2b2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	7858      	ldrb	r0, [r3, #1]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6a1a      	ldr	r2, [r3, #32]
 800c294:	2301      	movs	r3, #1
 800c296:	f7fd fe4b 	bl	8009f30 <disk_write>
 800c29a:	4603      	mov	r3, r0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d001      	beq.n	800c2a4 <f_sync+0x54>
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	e04f      	b.n	800c344 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	7d1b      	ldrb	r3, [r3, #20]
 800c2a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2ac:	b2da      	uxtb	r2, r3
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c2b2:	f7f9 fcf5 	bl	8005ca0 <get_fattime>
 800c2b6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c2b8:	68ba      	ldr	r2, [r7, #8]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2be:	4619      	mov	r1, r3
 800c2c0:	4610      	mov	r0, r2
 800c2c2:	f7fe f925 	bl	800a510 <move_window>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c2ca:	7dfb      	ldrb	r3, [r7, #23]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d138      	bne.n	800c342 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2d4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	330b      	adds	r3, #11
 800c2da:	781a      	ldrb	r2, [r3, #0]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	330b      	adds	r3, #11
 800c2e0:	f042 0220 	orr.w	r2, r2, #32
 800c2e4:	b2d2      	uxtb	r2, r2
 800c2e6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6818      	ldr	r0, [r3, #0]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	689b      	ldr	r3, [r3, #8]
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	68f9      	ldr	r1, [r7, #12]
 800c2f4:	f7fe fe2f 	bl	800af56 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f103 021c 	add.w	r2, r3, #28
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	68db      	ldr	r3, [r3, #12]
 800c302:	4619      	mov	r1, r3
 800c304:	4610      	mov	r0, r2
 800c306:	f7fd fea8 	bl	800a05a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	3316      	adds	r3, #22
 800c30e:	6939      	ldr	r1, [r7, #16]
 800c310:	4618      	mov	r0, r3
 800c312:	f7fd fea2 	bl	800a05a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	3312      	adds	r3, #18
 800c31a:	2100      	movs	r1, #0
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7fd fe81 	bl	800a024 <st_word>
					fs->wflag = 1;
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	2201      	movs	r2, #1
 800c326:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	4618      	mov	r0, r3
 800c32c:	f7fe f91e 	bl	800a56c <sync_fs>
 800c330:	4603      	mov	r3, r0
 800c332:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	7d1b      	ldrb	r3, [r3, #20]
 800c338:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c33c:	b2da      	uxtb	r2, r3
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c342:	7dfb      	ldrb	r3, [r7, #23]
}
 800c344:	4618      	mov	r0, r3
 800c346:	3718      	adds	r7, #24
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f7ff ff7b 	bl	800c250 <f_sync>
 800c35a:	4603      	mov	r3, r0
 800c35c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c35e:	7bfb      	ldrb	r3, [r7, #15]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d118      	bne.n	800c396 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f107 0208 	add.w	r2, r7, #8
 800c36a:	4611      	mov	r1, r2
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7ff fa85 	bl	800b87c <validate>
 800c372:	4603      	mov	r3, r0
 800c374:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c376:	7bfb      	ldrb	r3, [r7, #15]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d10c      	bne.n	800c396 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	691b      	ldr	r3, [r3, #16]
 800c380:	4618      	mov	r0, r3
 800c382:	f7fe f821 	bl	800a3c8 <dec_lock>
 800c386:	4603      	mov	r3, r0
 800c388:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c38a:	7bfb      	ldrb	r3, [r7, #15]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d102      	bne.n	800c396 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2200      	movs	r2, #0
 800c394:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c396:	7bfb      	ldrb	r3, [r7, #15]
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3710      	adds	r7, #16
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}

0800c3a0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b092      	sub	sp, #72	@ 0x48
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	60f8      	str	r0, [r7, #12]
 800c3a8:	60b9      	str	r1, [r7, #8]
 800c3aa:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800c3ac:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800c3b0:	f107 030c 	add.w	r3, r7, #12
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7ff f814 	bl	800b3e4 <find_volume>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800c3c2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	f040 8099 	bne.w	800c4fe <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800c3cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800c3d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3d4:	691a      	ldr	r2, [r3, #16]
 800c3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3d8:	695b      	ldr	r3, [r3, #20]
 800c3da:	3b02      	subs	r3, #2
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d804      	bhi.n	800c3ea <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800c3e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3e2:	691a      	ldr	r2, [r3, #16]
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	601a      	str	r2, [r3, #0]
 800c3e8:	e089      	b.n	800c4fe <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800c3ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	2b01      	cmp	r3, #1
 800c3f4:	d128      	bne.n	800c448 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800c3f6:	2302      	movs	r3, #2
 800c3f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3fc:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800c3fe:	f107 0314 	add.w	r3, r7, #20
 800c402:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c404:	4618      	mov	r0, r3
 800c406:	f7fe f93e 	bl	800a686 <get_fat>
 800c40a:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800c40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c40e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c412:	d103      	bne.n	800c41c <f_getfree+0x7c>
 800c414:	2301      	movs	r3, #1
 800c416:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c41a:	e063      	b.n	800c4e4 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800c41c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c41e:	2b01      	cmp	r3, #1
 800c420:	d103      	bne.n	800c42a <f_getfree+0x8a>
 800c422:	2302      	movs	r3, #2
 800c424:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c428:	e05c      	b.n	800c4e4 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800c42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d102      	bne.n	800c436 <f_getfree+0x96>
 800c430:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c432:	3301      	adds	r3, #1
 800c434:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800c436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c438:	3301      	adds	r3, #1
 800c43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c43c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c43e:	695b      	ldr	r3, [r3, #20]
 800c440:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c442:	429a      	cmp	r2, r3
 800c444:	d3db      	bcc.n	800c3fe <f_getfree+0x5e>
 800c446:	e04d      	b.n	800c4e4 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800c448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c44a:	695b      	ldr	r3, [r3, #20]
 800c44c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c450:	6a1b      	ldr	r3, [r3, #32]
 800c452:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800c454:	2300      	movs	r3, #0
 800c456:	637b      	str	r3, [r7, #52]	@ 0x34
 800c458:	2300      	movs	r3, #0
 800c45a:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800c45c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d113      	bne.n	800c48a <f_getfree+0xea>
							res = move_window(fs, sect++);
 800c462:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c466:	1c5a      	adds	r2, r3, #1
 800c468:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c46a:	4619      	mov	r1, r3
 800c46c:	f7fe f850 	bl	800a510 <move_window>
 800c470:	4603      	mov	r3, r0
 800c472:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800c476:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d131      	bne.n	800c4e2 <f_getfree+0x142>
							p = fs->win;
 800c47e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c480:	3330      	adds	r3, #48	@ 0x30
 800c482:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800c484:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c488:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800c48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	2b02      	cmp	r3, #2
 800c490:	d10f      	bne.n	800c4b2 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800c492:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c494:	f7fd fd8a 	bl	8009fac <ld_word>
 800c498:	4603      	mov	r3, r0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d102      	bne.n	800c4a4 <f_getfree+0x104>
 800c49e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800c4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4a6:	3302      	adds	r3, #2
 800c4a8:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4ac:	3b02      	subs	r3, #2
 800c4ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4b0:	e010      	b.n	800c4d4 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800c4b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c4b4:	f7fd fd93 	bl	8009fde <ld_dword>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d102      	bne.n	800c4c8 <f_getfree+0x128>
 800c4c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800c4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ca:	3304      	adds	r3, #4
 800c4cc:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4d0:	3b04      	subs	r3, #4
 800c4d2:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800c4d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4d6:	3b01      	subs	r3, #1
 800c4d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d1bd      	bne.n	800c45c <f_getfree+0xbc>
 800c4e0:	e000      	b.n	800c4e4 <f_getfree+0x144>
							if (res != FR_OK) break;
 800c4e2:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c4e8:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800c4ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c4ee:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800c4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4f2:	791a      	ldrb	r2, [r3, #4]
 800c4f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4f6:	f042 0201 	orr.w	r2, r2, #1
 800c4fa:	b2d2      	uxtb	r2, r2
 800c4fc:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800c4fe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800c502:	4618      	mov	r0, r3
 800c504:	3748      	adds	r7, #72	@ 0x48
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}

0800c50a <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800c50a:	b580      	push	{r7, lr}
 800c50c:	b088      	sub	sp, #32
 800c50e:	af00      	add	r7, sp, #0
 800c510:	60f8      	str	r0, [r7, #12]
 800c512:	60b9      	str	r1, [r7, #8]
 800c514:	607a      	str	r2, [r7, #4]
	int n = 0;
 800c516:	2300      	movs	r3, #0
 800c518:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800c51e:	e01c      	b.n	800c55a <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800c520:	f107 0310 	add.w	r3, r7, #16
 800c524:	f107 0114 	add.w	r1, r7, #20
 800c528:	2201      	movs	r2, #1
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f7ff fbdc 	bl	800bce8 <f_read>
		if (rc != 1) break;
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	2b01      	cmp	r3, #1
 800c534:	d117      	bne.n	800c566 <f_gets+0x5c>
		c = s[0];
 800c536:	7d3b      	ldrb	r3, [r7, #20]
 800c538:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800c53a:	7dfb      	ldrb	r3, [r7, #23]
 800c53c:	2b0d      	cmp	r3, #13
 800c53e:	d00b      	beq.n	800c558 <f_gets+0x4e>
		*p++ = c;
 800c540:	69bb      	ldr	r3, [r7, #24]
 800c542:	1c5a      	adds	r2, r3, #1
 800c544:	61ba      	str	r2, [r7, #24]
 800c546:	7dfa      	ldrb	r2, [r7, #23]
 800c548:	701a      	strb	r2, [r3, #0]
		n++;
 800c54a:	69fb      	ldr	r3, [r7, #28]
 800c54c:	3301      	adds	r3, #1
 800c54e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800c550:	7dfb      	ldrb	r3, [r7, #23]
 800c552:	2b0a      	cmp	r3, #10
 800c554:	d009      	beq.n	800c56a <f_gets+0x60>
 800c556:	e000      	b.n	800c55a <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800c558:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	3b01      	subs	r3, #1
 800c55e:	69fa      	ldr	r2, [r7, #28]
 800c560:	429a      	cmp	r2, r3
 800c562:	dbdd      	blt.n	800c520 <f_gets+0x16>
 800c564:	e002      	b.n	800c56c <f_gets+0x62>
		if (rc != 1) break;
 800c566:	bf00      	nop
 800c568:	e000      	b.n	800c56c <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800c56a:	bf00      	nop
	}
	*p = 0;
 800c56c:	69bb      	ldr	r3, [r7, #24]
 800c56e:	2200      	movs	r2, #0
 800c570:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800c572:	69fb      	ldr	r3, [r7, #28]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d001      	beq.n	800c57c <f_gets+0x72>
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	e000      	b.n	800c57e <f_gets+0x74>
 800c57c:	2300      	movs	r3, #0
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3720      	adds	r7, #32
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
	...

0800c588 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c588:	b480      	push	{r7}
 800c58a:	b087      	sub	sp, #28
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	4613      	mov	r3, r2
 800c594:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c596:	2301      	movs	r3, #1
 800c598:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c59a:	2300      	movs	r3, #0
 800c59c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c59e:	4b1f      	ldr	r3, [pc, #124]	@ (800c61c <FATFS_LinkDriverEx+0x94>)
 800c5a0:	7a5b      	ldrb	r3, [r3, #9]
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d131      	bne.n	800c60c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c5a8:	4b1c      	ldr	r3, [pc, #112]	@ (800c61c <FATFS_LinkDriverEx+0x94>)
 800c5aa:	7a5b      	ldrb	r3, [r3, #9]
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	4b1a      	ldr	r3, [pc, #104]	@ (800c61c <FATFS_LinkDriverEx+0x94>)
 800c5b2:	2100      	movs	r1, #0
 800c5b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c5b6:	4b19      	ldr	r3, [pc, #100]	@ (800c61c <FATFS_LinkDriverEx+0x94>)
 800c5b8:	7a5b      	ldrb	r3, [r3, #9]
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	4a17      	ldr	r2, [pc, #92]	@ (800c61c <FATFS_LinkDriverEx+0x94>)
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	4413      	add	r3, r2
 800c5c2:	68fa      	ldr	r2, [r7, #12]
 800c5c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c5c6:	4b15      	ldr	r3, [pc, #84]	@ (800c61c <FATFS_LinkDriverEx+0x94>)
 800c5c8:	7a5b      	ldrb	r3, [r3, #9]
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	461a      	mov	r2, r3
 800c5ce:	4b13      	ldr	r3, [pc, #76]	@ (800c61c <FATFS_LinkDriverEx+0x94>)
 800c5d0:	4413      	add	r3, r2
 800c5d2:	79fa      	ldrb	r2, [r7, #7]
 800c5d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c5d6:	4b11      	ldr	r3, [pc, #68]	@ (800c61c <FATFS_LinkDriverEx+0x94>)
 800c5d8:	7a5b      	ldrb	r3, [r3, #9]
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	1c5a      	adds	r2, r3, #1
 800c5de:	b2d1      	uxtb	r1, r2
 800c5e0:	4a0e      	ldr	r2, [pc, #56]	@ (800c61c <FATFS_LinkDriverEx+0x94>)
 800c5e2:	7251      	strb	r1, [r2, #9]
 800c5e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c5e6:	7dbb      	ldrb	r3, [r7, #22]
 800c5e8:	3330      	adds	r3, #48	@ 0x30
 800c5ea:	b2da      	uxtb	r2, r3
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	3301      	adds	r3, #1
 800c5f4:	223a      	movs	r2, #58	@ 0x3a
 800c5f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	3302      	adds	r3, #2
 800c5fc:	222f      	movs	r2, #47	@ 0x2f
 800c5fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	3303      	adds	r3, #3
 800c604:	2200      	movs	r2, #0
 800c606:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c608:	2300      	movs	r3, #0
 800c60a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c60c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c60e:	4618      	mov	r0, r3
 800c610:	371c      	adds	r7, #28
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr
 800c61a:	bf00      	nop
 800c61c:	20000388 	.word	0x20000388

0800c620 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b082      	sub	sp, #8
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c62a:	2200      	movs	r2, #0
 800c62c:	6839      	ldr	r1, [r7, #0]
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f7ff ffaa 	bl	800c588 <FATFS_LinkDriverEx>
 800c634:	4603      	mov	r3, r0
}
 800c636:	4618      	mov	r0, r3
 800c638:	3708      	adds	r7, #8
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
	...

0800c640 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800c644:	2201      	movs	r2, #1
 800c646:	4918      	ldr	r1, [pc, #96]	@ (800c6a8 <MX_USB_DEVICE_Init+0x68>)
 800c648:	4818      	ldr	r0, [pc, #96]	@ (800c6ac <MX_USB_DEVICE_Init+0x6c>)
 800c64a:	f7fc f912 	bl	8008872 <USBD_Init>
 800c64e:	4603      	mov	r3, r0
 800c650:	2b00      	cmp	r3, #0
 800c652:	d001      	beq.n	800c658 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c654:	f7f4 fa26 	bl	8000aa4 <Error_Handler>
  }
  myprintf("\r\n~ USB_Init OK ~\r\n\r\n");
 800c658:	4815      	ldr	r0, [pc, #84]	@ (800c6b0 <MX_USB_DEVICE_Init+0x70>)
 800c65a:	f7f3 ffb7 	bl	80005cc <myprintf>
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_MSC) != USBD_OK)
 800c65e:	4915      	ldr	r1, [pc, #84]	@ (800c6b4 <MX_USB_DEVICE_Init+0x74>)
 800c660:	4812      	ldr	r0, [pc, #72]	@ (800c6ac <MX_USB_DEVICE_Init+0x6c>)
 800c662:	f7fc f936 	bl	80088d2 <USBD_RegisterClass>
 800c666:	4603      	mov	r3, r0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d001      	beq.n	800c670 <MX_USB_DEVICE_Init+0x30>
  {
    Error_Handler();
 800c66c:	f7f4 fa1a 	bl	8000aa4 <Error_Handler>
  }
  myprintf("\r\n~ USBD_RegisterClass OK ~\r\n\r\n");
 800c670:	4811      	ldr	r0, [pc, #68]	@ (800c6b8 <MX_USB_DEVICE_Init+0x78>)
 800c672:	f7f3 ffab 	bl	80005cc <myprintf>
  if (USBD_MSC_RegisterStorage(&hUsbDeviceHS, &USBD_Storage_Interface_fops_HS) != USBD_OK)
 800c676:	4911      	ldr	r1, [pc, #68]	@ (800c6bc <MX_USB_DEVICE_Init+0x7c>)
 800c678:	480c      	ldr	r0, [pc, #48]	@ (800c6ac <MX_USB_DEVICE_Init+0x6c>)
 800c67a:	f7fa faef 	bl	8006c5c <USBD_MSC_RegisterStorage>
 800c67e:	4603      	mov	r3, r0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d001      	beq.n	800c688 <MX_USB_DEVICE_Init+0x48>
  {
    Error_Handler();
 800c684:	f7f4 fa0e 	bl	8000aa4 <Error_Handler>
  }
  myprintf("\r\n~ USBD_MSC_RegisterStorag OK ~\r\n\r\n");
 800c688:	480d      	ldr	r0, [pc, #52]	@ (800c6c0 <MX_USB_DEVICE_Init+0x80>)
 800c68a:	f7f3 ff9f 	bl	80005cc <myprintf>
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800c68e:	4807      	ldr	r0, [pc, #28]	@ (800c6ac <MX_USB_DEVICE_Init+0x6c>)
 800c690:	f7fc f955 	bl	800893e <USBD_Start>
 800c694:	4603      	mov	r3, r0
 800c696:	2b00      	cmp	r3, #0
 800c698:	d001      	beq.n	800c69e <MX_USB_DEVICE_Init+0x5e>
  {
    Error_Handler();
 800c69a:	f7f4 fa03 	bl	8000aa4 <Error_Handler>
  }
  myprintf("\r\n~ USBD_Start ok ~\r\n\r\n");
 800c69e:	4809      	ldr	r0, [pc, #36]	@ (800c6c4 <MX_USB_DEVICE_Init+0x84>)
 800c6a0:	f7f3 ff94 	bl	80005cc <myprintf>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c6a4:	bf00      	nop
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	200000a4 	.word	0x200000a4
 800c6ac:	20000394 	.word	0x20000394
 800c6b0:	0800dc34 	.word	0x0800dc34
 800c6b4:	20000024 	.word	0x20000024
 800c6b8:	0800dc4c 	.word	0x0800dc4c
 800c6bc:	200000f4 	.word	0x200000f4
 800c6c0:	0800dc6c 	.word	0x0800dc6c
 800c6c4:	0800dc94 	.word	0x0800dc94

0800c6c8 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b083      	sub	sp, #12
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	6039      	str	r1, [r7, #0]
 800c6d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	2212      	movs	r2, #18
 800c6d8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800c6da:	4b03      	ldr	r3, [pc, #12]	@ (800c6e8 <USBD_HS_DeviceDescriptor+0x20>)
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	370c      	adds	r7, #12
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr
 800c6e8:	200000c0 	.word	0x200000c0

0800c6ec <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	6039      	str	r1, [r7, #0]
 800c6f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	2204      	movs	r2, #4
 800c6fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c6fe:	4b03      	ldr	r3, [pc, #12]	@ (800c70c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800c700:	4618      	mov	r0, r3
 800c702:	370c      	adds	r7, #12
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr
 800c70c:	200000d4 	.word	0x200000d4

0800c710 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	4603      	mov	r3, r0
 800c718:	6039      	str	r1, [r7, #0]
 800c71a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c71c:	79fb      	ldrb	r3, [r7, #7]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d105      	bne.n	800c72e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800c722:	683a      	ldr	r2, [r7, #0]
 800c724:	4907      	ldr	r1, [pc, #28]	@ (800c744 <USBD_HS_ProductStrDescriptor+0x34>)
 800c726:	4808      	ldr	r0, [pc, #32]	@ (800c748 <USBD_HS_ProductStrDescriptor+0x38>)
 800c728:	f7fd face 	bl	8009cc8 <USBD_GetString>
 800c72c:	e004      	b.n	800c738 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800c72e:	683a      	ldr	r2, [r7, #0]
 800c730:	4904      	ldr	r1, [pc, #16]	@ (800c744 <USBD_HS_ProductStrDescriptor+0x34>)
 800c732:	4805      	ldr	r0, [pc, #20]	@ (800c748 <USBD_HS_ProductStrDescriptor+0x38>)
 800c734:	f7fd fac8 	bl	8009cc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c738:	4b02      	ldr	r3, [pc, #8]	@ (800c744 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3708      	adds	r7, #8
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	20000670 	.word	0x20000670
 800c748:	0800dcac 	.word	0x0800dcac

0800c74c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b082      	sub	sp, #8
 800c750:	af00      	add	r7, sp, #0
 800c752:	4603      	mov	r3, r0
 800c754:	6039      	str	r1, [r7, #0]
 800c756:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c758:	683a      	ldr	r2, [r7, #0]
 800c75a:	4904      	ldr	r1, [pc, #16]	@ (800c76c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800c75c:	4804      	ldr	r0, [pc, #16]	@ (800c770 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800c75e:	f7fd fab3 	bl	8009cc8 <USBD_GetString>
  return USBD_StrDesc;
 800c762:	4b02      	ldr	r3, [pc, #8]	@ (800c76c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800c764:	4618      	mov	r0, r3
 800c766:	3708      	adds	r7, #8
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}
 800c76c:	20000670 	.word	0x20000670
 800c770:	0800dcc0 	.word	0x0800dcc0

0800c774 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b082      	sub	sp, #8
 800c778:	af00      	add	r7, sp, #0
 800c77a:	4603      	mov	r3, r0
 800c77c:	6039      	str	r1, [r7, #0]
 800c77e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	221a      	movs	r2, #26
 800c784:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c786:	f000 f843 	bl	800c810 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c78a:	4b02      	ldr	r3, [pc, #8]	@ (800c794 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3708      	adds	r7, #8
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}
 800c794:	200000d8 	.word	0x200000d8

0800c798 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	4603      	mov	r3, r0
 800c7a0:	6039      	str	r1, [r7, #0]
 800c7a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c7a4:	79fb      	ldrb	r3, [r7, #7]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d105      	bne.n	800c7b6 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800c7aa:	683a      	ldr	r2, [r7, #0]
 800c7ac:	4907      	ldr	r1, [pc, #28]	@ (800c7cc <USBD_HS_ConfigStrDescriptor+0x34>)
 800c7ae:	4808      	ldr	r0, [pc, #32]	@ (800c7d0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800c7b0:	f7fd fa8a 	bl	8009cc8 <USBD_GetString>
 800c7b4:	e004      	b.n	800c7c0 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800c7b6:	683a      	ldr	r2, [r7, #0]
 800c7b8:	4904      	ldr	r1, [pc, #16]	@ (800c7cc <USBD_HS_ConfigStrDescriptor+0x34>)
 800c7ba:	4805      	ldr	r0, [pc, #20]	@ (800c7d0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800c7bc:	f7fd fa84 	bl	8009cc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c7c0:	4b02      	ldr	r3, [pc, #8]	@ (800c7cc <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3708      	adds	r7, #8
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	20000670 	.word	0x20000670
 800c7d0:	0800dcd4 	.word	0x0800dcd4

0800c7d4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b082      	sub	sp, #8
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	4603      	mov	r3, r0
 800c7dc:	6039      	str	r1, [r7, #0]
 800c7de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c7e0:	79fb      	ldrb	r3, [r7, #7]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d105      	bne.n	800c7f2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800c7e6:	683a      	ldr	r2, [r7, #0]
 800c7e8:	4907      	ldr	r1, [pc, #28]	@ (800c808 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800c7ea:	4808      	ldr	r0, [pc, #32]	@ (800c80c <USBD_HS_InterfaceStrDescriptor+0x38>)
 800c7ec:	f7fd fa6c 	bl	8009cc8 <USBD_GetString>
 800c7f0:	e004      	b.n	800c7fc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800c7f2:	683a      	ldr	r2, [r7, #0]
 800c7f4:	4904      	ldr	r1, [pc, #16]	@ (800c808 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800c7f6:	4805      	ldr	r0, [pc, #20]	@ (800c80c <USBD_HS_InterfaceStrDescriptor+0x38>)
 800c7f8:	f7fd fa66 	bl	8009cc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c7fc:	4b02      	ldr	r3, [pc, #8]	@ (800c808 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3708      	adds	r7, #8
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
 800c806:	bf00      	nop
 800c808:	20000670 	.word	0x20000670
 800c80c:	0800dce0 	.word	0x0800dce0

0800c810 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b084      	sub	sp, #16
 800c814:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c816:	4b0f      	ldr	r3, [pc, #60]	@ (800c854 <Get_SerialNum+0x44>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c81c:	4b0e      	ldr	r3, [pc, #56]	@ (800c858 <Get_SerialNum+0x48>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c822:	4b0e      	ldr	r3, [pc, #56]	@ (800c85c <Get_SerialNum+0x4c>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c828:	68fa      	ldr	r2, [r7, #12]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	4413      	add	r3, r2
 800c82e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d009      	beq.n	800c84a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c836:	2208      	movs	r2, #8
 800c838:	4909      	ldr	r1, [pc, #36]	@ (800c860 <Get_SerialNum+0x50>)
 800c83a:	68f8      	ldr	r0, [r7, #12]
 800c83c:	f000 f814 	bl	800c868 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c840:	2204      	movs	r2, #4
 800c842:	4908      	ldr	r1, [pc, #32]	@ (800c864 <Get_SerialNum+0x54>)
 800c844:	68b8      	ldr	r0, [r7, #8]
 800c846:	f000 f80f 	bl	800c868 <IntToUnicode>
  }
}
 800c84a:	bf00      	nop
 800c84c:	3710      	adds	r7, #16
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop
 800c854:	1fff7a10 	.word	0x1fff7a10
 800c858:	1fff7a14 	.word	0x1fff7a14
 800c85c:	1fff7a18 	.word	0x1fff7a18
 800c860:	200000da 	.word	0x200000da
 800c864:	200000ea 	.word	0x200000ea

0800c868 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c868:	b480      	push	{r7}
 800c86a:	b087      	sub	sp, #28
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	4613      	mov	r3, r2
 800c874:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c876:	2300      	movs	r3, #0
 800c878:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c87a:	2300      	movs	r3, #0
 800c87c:	75fb      	strb	r3, [r7, #23]
 800c87e:	e027      	b.n	800c8d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	0f1b      	lsrs	r3, r3, #28
 800c884:	2b09      	cmp	r3, #9
 800c886:	d80b      	bhi.n	800c8a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	0f1b      	lsrs	r3, r3, #28
 800c88c:	b2da      	uxtb	r2, r3
 800c88e:	7dfb      	ldrb	r3, [r7, #23]
 800c890:	005b      	lsls	r3, r3, #1
 800c892:	4619      	mov	r1, r3
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	440b      	add	r3, r1
 800c898:	3230      	adds	r2, #48	@ 0x30
 800c89a:	b2d2      	uxtb	r2, r2
 800c89c:	701a      	strb	r2, [r3, #0]
 800c89e:	e00a      	b.n	800c8b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	0f1b      	lsrs	r3, r3, #28
 800c8a4:	b2da      	uxtb	r2, r3
 800c8a6:	7dfb      	ldrb	r3, [r7, #23]
 800c8a8:	005b      	lsls	r3, r3, #1
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	440b      	add	r3, r1
 800c8b0:	3237      	adds	r2, #55	@ 0x37
 800c8b2:	b2d2      	uxtb	r2, r2
 800c8b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	011b      	lsls	r3, r3, #4
 800c8ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c8bc:	7dfb      	ldrb	r3, [r7, #23]
 800c8be:	005b      	lsls	r3, r3, #1
 800c8c0:	3301      	adds	r3, #1
 800c8c2:	68ba      	ldr	r2, [r7, #8]
 800c8c4:	4413      	add	r3, r2
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c8ca:	7dfb      	ldrb	r3, [r7, #23]
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	75fb      	strb	r3, [r7, #23]
 800c8d0:	7dfa      	ldrb	r2, [r7, #23]
 800c8d2:	79fb      	ldrb	r3, [r7, #7]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d3d3      	bcc.n	800c880 <IntToUnicode+0x18>
  }
}
 800c8d8:	bf00      	nop
 800c8da:	bf00      	nop
 800c8dc:	371c      	adds	r7, #28
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e4:	4770      	bx	lr

0800c8e6 <STORAGE_Init_HS>:
  * @brief  Initializes the storage unit (medium).
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_HS(uint8_t lun)
{
 800c8e6:	b580      	push	{r7, lr}
 800c8e8:	b082      	sub	sp, #8
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 9 */
    if (USER_initialize(lun) == RES_OK)   // RES_OK == 0
 800c8f0:	79fb      	ldrb	r3, [r7, #7]
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7f9 f9dc 	bl	8005cb0 <USER_initialize>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d101      	bne.n	800c902 <STORAGE_Init_HS+0x1c>
    {
        return (USBD_OK);
 800c8fe:	2300      	movs	r3, #0
 800c900:	e000      	b.n	800c904 <STORAGE_Init_HS+0x1e>
    }
    return (USBD_FAIL);
 800c902:	2303      	movs	r3, #3
  /* USER CODE END 9 */
}
 800c904:	4618      	mov	r0, r3
 800c906:	3708      	adds	r7, #8
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <STORAGE_GetCapacity_HS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_HS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b086      	sub	sp, #24
 800c910:	af00      	add	r7, sp, #0
 800c912:	4603      	mov	r3, r0
 800c914:	60b9      	str	r1, [r7, #8]
 800c916:	607a      	str	r2, [r7, #4]
 800c918:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 10 */
	DWORD sector_count = 0;
 800c91a:	2300      	movs	r3, #0
 800c91c:	617b      	str	r3, [r7, #20]
	    WORD sector_size   = 0;
 800c91e:	2300      	movs	r3, #0
 800c920:	827b      	strh	r3, [r7, #18]

	    /* Dùng USER_ioctl để lấy số sector */
	    if (USER_ioctl(lun, GET_SECTOR_COUNT, &sector_count) != RES_OK)
 800c922:	7bfb      	ldrb	r3, [r7, #15]
 800c924:	f107 0214 	add.w	r2, r7, #20
 800c928:	2101      	movs	r1, #1
 800c92a:	4618      	mov	r0, r3
 800c92c:	f7f9 fa02 	bl	8005d34 <USER_ioctl>
 800c930:	4603      	mov	r3, r0
 800c932:	2b00      	cmp	r3, #0
 800c934:	d001      	beq.n	800c93a <STORAGE_GetCapacity_HS+0x2e>
	    {
	        return (USBD_FAIL);
 800c936:	2303      	movs	r3, #3
 800c938:	e012      	b.n	800c960 <STORAGE_GetCapacity_HS+0x54>
	    }
	    /* Dùng USER_ioctl để lấy kích thước mỗi sector (thường 512) */
	    if (USER_ioctl(lun, GET_SECTOR_SIZE, &sector_size) != RES_OK)
 800c93a:	7bfb      	ldrb	r3, [r7, #15]
 800c93c:	f107 0212 	add.w	r2, r7, #18
 800c940:	2102      	movs	r1, #2
 800c942:	4618      	mov	r0, r3
 800c944:	f7f9 f9f6 	bl	8005d34 <USER_ioctl>
 800c948:	4603      	mov	r3, r0
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d001      	beq.n	800c952 <STORAGE_GetCapacity_HS+0x46>
	    {
	        return (USBD_FAIL);
 800c94e:	2303      	movs	r3, #3
 800c950:	e006      	b.n	800c960 <STORAGE_GetCapacity_HS+0x54>
	    }

	    *block_num  = sector_count;
 800c952:	697a      	ldr	r2, [r7, #20]
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	601a      	str	r2, [r3, #0]
	    *block_size = sector_size;
 800c958:	8a7a      	ldrh	r2, [r7, #18]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	801a      	strh	r2, [r3, #0]
	    return (USBD_OK);
 800c95e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800c960:	4618      	mov	r0, r3
 800c962:	3718      	adds	r7, #24
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}

0800c968 <STORAGE_IsReady_HS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_HS(uint8_t lun)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b084      	sub	sp, #16
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	4603      	mov	r3, r0
 800c970:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 11 */
    DSTATUS stat = USER_status(lun);
 800c972:	79fb      	ldrb	r3, [r7, #7]
 800c974:	4618      	mov	r0, r3
 800c976:	f7f9 f9a9 	bl	8005ccc <USER_status>
 800c97a:	4603      	mov	r3, r0
 800c97c:	73fb      	strb	r3, [r7, #15]
    if (stat == 0)   /* STA_OK == 0 */
 800c97e:	7bfb      	ldrb	r3, [r7, #15]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d101      	bne.n	800c988 <STORAGE_IsReady_HS+0x20>
        return (USBD_OK);
 800c984:	2300      	movs	r3, #0
 800c986:	e000      	b.n	800c98a <STORAGE_IsReady_HS+0x22>
    return (USBD_FAIL);
 800c988:	2303      	movs	r3, #3

  /* USER CODE END 11 */
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3710      	adds	r7, #16
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}

0800c992 <STORAGE_IsWriteProtected_HS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_HS(uint8_t lun)
{
 800c992:	b480      	push	{r7}
 800c994:	b083      	sub	sp, #12
 800c996:	af00      	add	r7, sp, #0
 800c998:	4603      	mov	r3, r0
 800c99a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 12 */
  return (USBD_OK);
 800c99c:	2300      	movs	r3, #0
  /* USER CODE END 12 */
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	370c      	adds	r7, #12
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr

0800c9aa <STORAGE_Read_HS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_HS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c9aa:	b580      	push	{r7, lr}
 800c9ac:	b084      	sub	sp, #16
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	60b9      	str	r1, [r7, #8]
 800c9b2:	607a      	str	r2, [r7, #4]
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	73fb      	strb	r3, [r7, #15]
 800c9ba:	4613      	mov	r3, r2
 800c9bc:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 13 */
	   if (USER_read(lun, buf, blk_addr, blk_len) == RES_OK)
 800c9be:	7bf8      	ldrb	r0, [r7, #15]
 800c9c0:	89bb      	ldrh	r3, [r7, #12]
 800c9c2:	687a      	ldr	r2, [r7, #4]
 800c9c4:	68b9      	ldr	r1, [r7, #8]
 800c9c6:	f7f9 f98f 	bl	8005ce8 <USER_read>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d101      	bne.n	800c9d4 <STORAGE_Read_HS+0x2a>
	        return (USBD_OK);
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	e000      	b.n	800c9d6 <STORAGE_Read_HS+0x2c>
	    return (USBD_FAIL);
 800c9d4:	2303      	movs	r3, #3
  /* USER CODE END 13 */
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3710      	adds	r7, #16
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}

0800c9de <STORAGE_Write_HS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_HS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c9de:	b580      	push	{r7, lr}
 800c9e0:	b084      	sub	sp, #16
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	60b9      	str	r1, [r7, #8]
 800c9e6:	607a      	str	r2, [r7, #4]
 800c9e8:	461a      	mov	r2, r3
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	73fb      	strb	r3, [r7, #15]
 800c9ee:	4613      	mov	r3, r2
 800c9f0:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 14 */
    if (USER_write(lun, buf, blk_addr, blk_len) == RES_OK)
 800c9f2:	7bf8      	ldrb	r0, [r7, #15]
 800c9f4:	89bb      	ldrh	r3, [r7, #12]
 800c9f6:	687a      	ldr	r2, [r7, #4]
 800c9f8:	68b9      	ldr	r1, [r7, #8]
 800c9fa:	f7f9 f988 	bl	8005d0e <USER_write>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d101      	bne.n	800ca08 <STORAGE_Write_HS+0x2a>
        return (USBD_OK);
 800ca04:	2300      	movs	r3, #0
 800ca06:	e000      	b.n	800ca0a <STORAGE_Write_HS+0x2c>
    return (USBD_FAIL);
 800ca08:	2303      	movs	r3, #3
  /* USER CODE END 14 */
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3710      	adds	r7, #16
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}

0800ca12 <STORAGE_GetMaxLun_HS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_HS(void)
{
 800ca12:	b480      	push	{r7}
 800ca14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 15 */
  return (STORAGE_LUN_NBR - 1);
 800ca16:	2300      	movs	r3, #0
  /* USER CODE END 15 */
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca20:	4770      	bx	lr
	...

0800ca24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b08a      	sub	sp, #40	@ 0x28
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca2c:	f107 0314 	add.w	r3, r7, #20
 800ca30:	2200      	movs	r2, #0
 800ca32:	601a      	str	r2, [r3, #0]
 800ca34:	605a      	str	r2, [r3, #4]
 800ca36:	609a      	str	r2, [r3, #8]
 800ca38:	60da      	str	r2, [r3, #12]
 800ca3a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a24      	ldr	r2, [pc, #144]	@ (800cad4 <HAL_PCD_MspInit+0xb0>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d141      	bne.n	800caca <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ca46:	2300      	movs	r3, #0
 800ca48:	613b      	str	r3, [r7, #16]
 800ca4a:	4b23      	ldr	r3, [pc, #140]	@ (800cad8 <HAL_PCD_MspInit+0xb4>)
 800ca4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca4e:	4a22      	ldr	r2, [pc, #136]	@ (800cad8 <HAL_PCD_MspInit+0xb4>)
 800ca50:	f043 0302 	orr.w	r3, r3, #2
 800ca54:	6313      	str	r3, [r2, #48]	@ 0x30
 800ca56:	4b20      	ldr	r3, [pc, #128]	@ (800cad8 <HAL_PCD_MspInit+0xb4>)
 800ca58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca5a:	f003 0302 	and.w	r3, r3, #2
 800ca5e:	613b      	str	r3, [r7, #16]
 800ca60:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800ca62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ca66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ca70:	f107 0314 	add.w	r3, r7, #20
 800ca74:	4619      	mov	r1, r3
 800ca76:	4819      	ldr	r0, [pc, #100]	@ (800cadc <HAL_PCD_MspInit+0xb8>)
 800ca78:	f7f4 fb5a 	bl	8001130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800ca7c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800ca80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca82:	2302      	movs	r3, #2
 800ca84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca86:	2300      	movs	r3, #0
 800ca88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca8a:	2303      	movs	r3, #3
 800ca8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800ca8e:	230c      	movs	r3, #12
 800ca90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ca92:	f107 0314 	add.w	r3, r7, #20
 800ca96:	4619      	mov	r1, r3
 800ca98:	4810      	ldr	r0, [pc, #64]	@ (800cadc <HAL_PCD_MspInit+0xb8>)
 800ca9a:	f7f4 fb49 	bl	8001130 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800ca9e:	2300      	movs	r3, #0
 800caa0:	60fb      	str	r3, [r7, #12]
 800caa2:	4b0d      	ldr	r3, [pc, #52]	@ (800cad8 <HAL_PCD_MspInit+0xb4>)
 800caa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800caa6:	4a0c      	ldr	r2, [pc, #48]	@ (800cad8 <HAL_PCD_MspInit+0xb4>)
 800caa8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800caac:	6313      	str	r3, [r2, #48]	@ 0x30
 800caae:	4b0a      	ldr	r3, [pc, #40]	@ (800cad8 <HAL_PCD_MspInit+0xb4>)
 800cab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cab2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cab6:	60fb      	str	r3, [r7, #12]
 800cab8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800caba:	2200      	movs	r2, #0
 800cabc:	2100      	movs	r1, #0
 800cabe:	204d      	movs	r0, #77	@ 0x4d
 800cac0:	f7f4 fadd 	bl	800107e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800cac4:	204d      	movs	r0, #77	@ 0x4d
 800cac6:	f7f4 faf6 	bl	80010b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800caca:	bf00      	nop
 800cacc:	3728      	adds	r7, #40	@ 0x28
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
 800cad2:	bf00      	nop
 800cad4:	40040000 	.word	0x40040000
 800cad8:	40023800 	.word	0x40023800
 800cadc:	40020400 	.word	0x40020400

0800cae0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800caf4:	4619      	mov	r1, r3
 800caf6:	4610      	mov	r0, r2
 800caf8:	f7fb ff6e 	bl	80089d8 <USBD_LL_SetupStage>
}
 800cafc:	bf00      	nop
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cb16:	78fa      	ldrb	r2, [r7, #3]
 800cb18:	6879      	ldr	r1, [r7, #4]
 800cb1a:	4613      	mov	r3, r2
 800cb1c:	00db      	lsls	r3, r3, #3
 800cb1e:	4413      	add	r3, r2
 800cb20:	009b      	lsls	r3, r3, #2
 800cb22:	440b      	add	r3, r1
 800cb24:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cb28:	681a      	ldr	r2, [r3, #0]
 800cb2a:	78fb      	ldrb	r3, [r7, #3]
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	f7fb ffa8 	bl	8008a82 <USBD_LL_DataOutStage>
}
 800cb32:	bf00      	nop
 800cb34:	3708      	adds	r7, #8
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}

0800cb3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb3a:	b580      	push	{r7, lr}
 800cb3c:	b082      	sub	sp, #8
 800cb3e:	af00      	add	r7, sp, #0
 800cb40:	6078      	str	r0, [r7, #4]
 800cb42:	460b      	mov	r3, r1
 800cb44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cb4c:	78fa      	ldrb	r2, [r7, #3]
 800cb4e:	6879      	ldr	r1, [r7, #4]
 800cb50:	4613      	mov	r3, r2
 800cb52:	00db      	lsls	r3, r3, #3
 800cb54:	4413      	add	r3, r2
 800cb56:	009b      	lsls	r3, r3, #2
 800cb58:	440b      	add	r3, r1
 800cb5a:	3320      	adds	r3, #32
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	78fb      	ldrb	r3, [r7, #3]
 800cb60:	4619      	mov	r1, r3
 800cb62:	f7fc f84a 	bl	8008bfa <USBD_LL_DataInStage>
}
 800cb66:	bf00      	nop
 800cb68:	3708      	adds	r7, #8
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}

0800cb6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb6e:	b580      	push	{r7, lr}
 800cb70:	b082      	sub	sp, #8
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f7fc f98e 	bl	8008e9e <USBD_LL_SOF>
}
 800cb82:	bf00      	nop
 800cb84:	3708      	adds	r7, #8
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}

0800cb8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb8a:	b580      	push	{r7, lr}
 800cb8c:	b084      	sub	sp, #16
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cb92:	2301      	movs	r3, #1
 800cb94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	79db      	ldrb	r3, [r3, #7]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d102      	bne.n	800cba4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	73fb      	strb	r3, [r7, #15]
 800cba2:	e008      	b.n	800cbb6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	79db      	ldrb	r3, [r3, #7]
 800cba8:	2b02      	cmp	r3, #2
 800cbaa:	d102      	bne.n	800cbb2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cbac:	2301      	movs	r3, #1
 800cbae:	73fb      	strb	r3, [r7, #15]
 800cbb0:	e001      	b.n	800cbb6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cbb2:	f7f3 ff77 	bl	8000aa4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cbbc:	7bfa      	ldrb	r2, [r7, #15]
 800cbbe:	4611      	mov	r1, r2
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f7fc f928 	bl	8008e16 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f7fc f8cf 	bl	8008d70 <USBD_LL_Reset>
}
 800cbd2:	bf00      	nop
 800cbd4:	3710      	adds	r7, #16
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
	...

0800cbdc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7fc f923 	bl	8008e36 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	687a      	ldr	r2, [r7, #4]
 800cbfc:	6812      	ldr	r2, [r2, #0]
 800cbfe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cc02:	f043 0301 	orr.w	r3, r3, #1
 800cc06:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	7adb      	ldrb	r3, [r3, #11]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d005      	beq.n	800cc1c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cc10:	4b04      	ldr	r3, [pc, #16]	@ (800cc24 <HAL_PCD_SuspendCallback+0x48>)
 800cc12:	691b      	ldr	r3, [r3, #16]
 800cc14:	4a03      	ldr	r2, [pc, #12]	@ (800cc24 <HAL_PCD_SuspendCallback+0x48>)
 800cc16:	f043 0306 	orr.w	r3, r3, #6
 800cc1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cc1c:	bf00      	nop
 800cc1e:	3708      	adds	r7, #8
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	e000ed00 	.word	0xe000ed00

0800cc28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7fc f919 	bl	8008e6e <USBD_LL_Resume>
}
 800cc3c:	bf00      	nop
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b082      	sub	sp, #8
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	460b      	mov	r3, r1
 800cc4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cc56:	78fa      	ldrb	r2, [r7, #3]
 800cc58:	4611      	mov	r1, r2
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7fc f971 	bl	8008f42 <USBD_LL_IsoOUTIncomplete>
}
 800cc60:	bf00      	nop
 800cc62:	3708      	adds	r7, #8
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	460b      	mov	r3, r1
 800cc72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cc7a:	78fa      	ldrb	r2, [r7, #3]
 800cc7c:	4611      	mov	r1, r2
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7fc f92d 	bl	8008ede <USBD_LL_IsoINIncomplete>
}
 800cc84:	bf00      	nop
 800cc86:	3708      	adds	r7, #8
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}

0800cc8c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b082      	sub	sp, #8
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f7fc f983 	bl	8008fa6 <USBD_LL_DevConnected>
}
 800cca0:	bf00      	nop
 800cca2:	3708      	adds	r7, #8
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7fc f980 	bl	8008fbc <USBD_LL_DevDisconnected>
}
 800ccbc:	bf00      	nop
 800ccbe:	3708      	adds	r7, #8
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	2b01      	cmp	r3, #1
 800ccd2:	d140      	bne.n	800cd56 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800ccd4:	4a22      	ldr	r2, [pc, #136]	@ (800cd60 <USBD_LL_Init+0x9c>)
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	4a20      	ldr	r2, [pc, #128]	@ (800cd60 <USBD_LL_Init+0x9c>)
 800cce0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800cce4:	4b1e      	ldr	r3, [pc, #120]	@ (800cd60 <USBD_LL_Init+0x9c>)
 800cce6:	4a1f      	ldr	r2, [pc, #124]	@ (800cd64 <USBD_LL_Init+0xa0>)
 800cce8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800ccea:	4b1d      	ldr	r3, [pc, #116]	@ (800cd60 <USBD_LL_Init+0x9c>)
 800ccec:	2206      	movs	r2, #6
 800ccee:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800ccf0:	4b1b      	ldr	r3, [pc, #108]	@ (800cd60 <USBD_LL_Init+0x9c>)
 800ccf2:	2202      	movs	r2, #2
 800ccf4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800ccf6:	4b1a      	ldr	r3, [pc, #104]	@ (800cd60 <USBD_LL_Init+0x9c>)
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800ccfc:	4b18      	ldr	r3, [pc, #96]	@ (800cd60 <USBD_LL_Init+0x9c>)
 800ccfe:	2202      	movs	r2, #2
 800cd00:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800cd02:	4b17      	ldr	r3, [pc, #92]	@ (800cd60 <USBD_LL_Init+0x9c>)
 800cd04:	2200      	movs	r2, #0
 800cd06:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800cd08:	4b15      	ldr	r3, [pc, #84]	@ (800cd60 <USBD_LL_Init+0x9c>)
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800cd0e:	4b14      	ldr	r3, [pc, #80]	@ (800cd60 <USBD_LL_Init+0x9c>)
 800cd10:	2200      	movs	r2, #0
 800cd12:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 800cd14:	4b12      	ldr	r3, [pc, #72]	@ (800cd60 <USBD_LL_Init+0x9c>)
 800cd16:	2201      	movs	r2, #1
 800cd18:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800cd1a:	4b11      	ldr	r3, [pc, #68]	@ (800cd60 <USBD_LL_Init+0x9c>)
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800cd20:	4b0f      	ldr	r3, [pc, #60]	@ (800cd60 <USBD_LL_Init+0x9c>)
 800cd22:	2200      	movs	r2, #0
 800cd24:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800cd26:	480e      	ldr	r0, [pc, #56]	@ (800cd60 <USBD_LL_Init+0x9c>)
 800cd28:	f7f4 fbc7 	bl	80014ba <HAL_PCD_Init>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d001      	beq.n	800cd36 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800cd32:	f7f3 feb7 	bl	8000aa4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800cd36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cd3a:	4809      	ldr	r0, [pc, #36]	@ (800cd60 <USBD_LL_Init+0x9c>)
 800cd3c:	f7f5 fe1f 	bl	800297e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800cd40:	2280      	movs	r2, #128	@ 0x80
 800cd42:	2100      	movs	r1, #0
 800cd44:	4806      	ldr	r0, [pc, #24]	@ (800cd60 <USBD_LL_Init+0x9c>)
 800cd46:	f7f5 fdd3 	bl	80028f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800cd4a:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800cd4e:	2101      	movs	r1, #1
 800cd50:	4803      	ldr	r0, [pc, #12]	@ (800cd60 <USBD_LL_Init+0x9c>)
 800cd52:	f7f5 fdcd 	bl	80028f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cd56:	2300      	movs	r3, #0
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3708      	adds	r7, #8
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}
 800cd60:	20000870 	.word	0x20000870
 800cd64:	40040000 	.word	0x40040000

0800cd68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b084      	sub	sp, #16
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd70:	2300      	movs	r3, #0
 800cd72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd74:	2300      	movs	r3, #0
 800cd76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7f4 fcaa 	bl	80016d8 <HAL_PCD_Start>
 800cd84:	4603      	mov	r3, r0
 800cd86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd88:	7bfb      	ldrb	r3, [r7, #15]
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f000 f962 	bl	800d054 <USBD_Get_USB_Status>
 800cd90:	4603      	mov	r3, r0
 800cd92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd94:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3710      	adds	r7, #16
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}

0800cd9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cd9e:	b580      	push	{r7, lr}
 800cda0:	b084      	sub	sp, #16
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	6078      	str	r0, [r7, #4]
 800cda6:	4608      	mov	r0, r1
 800cda8:	4611      	mov	r1, r2
 800cdaa:	461a      	mov	r2, r3
 800cdac:	4603      	mov	r3, r0
 800cdae:	70fb      	strb	r3, [r7, #3]
 800cdb0:	460b      	mov	r3, r1
 800cdb2:	70bb      	strb	r3, [r7, #2]
 800cdb4:	4613      	mov	r3, r2
 800cdb6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cdc6:	78bb      	ldrb	r3, [r7, #2]
 800cdc8:	883a      	ldrh	r2, [r7, #0]
 800cdca:	78f9      	ldrb	r1, [r7, #3]
 800cdcc:	f7f5 f97e 	bl	80020cc <HAL_PCD_EP_Open>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdd4:	7bfb      	ldrb	r3, [r7, #15]
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f000 f93c 	bl	800d054 <USBD_Get_USB_Status>
 800cddc:	4603      	mov	r3, r0
 800cdde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cde0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3710      	adds	r7, #16
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}

0800cdea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdea:	b580      	push	{r7, lr}
 800cdec:	b084      	sub	sp, #16
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6078      	str	r0, [r7, #4]
 800cdf2:	460b      	mov	r3, r1
 800cdf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ce04:	78fa      	ldrb	r2, [r7, #3]
 800ce06:	4611      	mov	r1, r2
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7f5 f9c9 	bl	80021a0 <HAL_PCD_EP_Close>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce12:	7bfb      	ldrb	r3, [r7, #15]
 800ce14:	4618      	mov	r0, r3
 800ce16:	f000 f91d 	bl	800d054 <USBD_Get_USB_Status>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3710      	adds	r7, #16
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}

0800ce28 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	460b      	mov	r3, r1
 800ce32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce34:	2300      	movs	r3, #0
 800ce36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce38:	2300      	movs	r3, #0
 800ce3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ce42:	78fa      	ldrb	r2, [r7, #3]
 800ce44:	4611      	mov	r1, r2
 800ce46:	4618      	mov	r0, r3
 800ce48:	f7f5 fb6b 	bl	8002522 <HAL_PCD_EP_Flush>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce50:	7bfb      	ldrb	r3, [r7, #15]
 800ce52:	4618      	mov	r0, r3
 800ce54:	f000 f8fe 	bl	800d054 <USBD_Get_USB_Status>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3710      	adds	r7, #16
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}

0800ce66 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce66:	b580      	push	{r7, lr}
 800ce68:	b084      	sub	sp, #16
 800ce6a:	af00      	add	r7, sp, #0
 800ce6c:	6078      	str	r0, [r7, #4]
 800ce6e:	460b      	mov	r3, r1
 800ce70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce72:	2300      	movs	r3, #0
 800ce74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce76:	2300      	movs	r3, #0
 800ce78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ce80:	78fa      	ldrb	r2, [r7, #3]
 800ce82:	4611      	mov	r1, r2
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7f5 fa62 	bl	800234e <HAL_PCD_EP_SetStall>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce8e:	7bfb      	ldrb	r3, [r7, #15]
 800ce90:	4618      	mov	r0, r3
 800ce92:	f000 f8df 	bl	800d054 <USBD_Get_USB_Status>
 800ce96:	4603      	mov	r3, r0
 800ce98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3710      	adds	r7, #16
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	460b      	mov	r3, r1
 800ceae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cebe:	78fa      	ldrb	r2, [r7, #3]
 800cec0:	4611      	mov	r1, r2
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7f5 faa6 	bl	8002414 <HAL_PCD_EP_ClrStall>
 800cec8:	4603      	mov	r3, r0
 800ceca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cecc:	7bfb      	ldrb	r3, [r7, #15]
 800cece:	4618      	mov	r0, r3
 800ced0:	f000 f8c0 	bl	800d054 <USBD_Get_USB_Status>
 800ced4:	4603      	mov	r3, r0
 800ced6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ced8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3710      	adds	r7, #16
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}

0800cee2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cee2:	b480      	push	{r7}
 800cee4:	b085      	sub	sp, #20
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	6078      	str	r0, [r7, #4]
 800ceea:	460b      	mov	r3, r1
 800ceec:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cef4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cef6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	da0b      	bge.n	800cf16 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cefe:	78fb      	ldrb	r3, [r7, #3]
 800cf00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf04:	68f9      	ldr	r1, [r7, #12]
 800cf06:	4613      	mov	r3, r2
 800cf08:	00db      	lsls	r3, r3, #3
 800cf0a:	4413      	add	r3, r2
 800cf0c:	009b      	lsls	r3, r3, #2
 800cf0e:	440b      	add	r3, r1
 800cf10:	3316      	adds	r3, #22
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	e00b      	b.n	800cf2e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cf16:	78fb      	ldrb	r3, [r7, #3]
 800cf18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf1c:	68f9      	ldr	r1, [r7, #12]
 800cf1e:	4613      	mov	r3, r2
 800cf20:	00db      	lsls	r3, r3, #3
 800cf22:	4413      	add	r3, r2
 800cf24:	009b      	lsls	r3, r3, #2
 800cf26:	440b      	add	r3, r1
 800cf28:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800cf2c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3714      	adds	r7, #20
 800cf32:	46bd      	mov	sp, r7
 800cf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf38:	4770      	bx	lr

0800cf3a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cf3a:	b580      	push	{r7, lr}
 800cf3c:	b084      	sub	sp, #16
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	6078      	str	r0, [r7, #4]
 800cf42:	460b      	mov	r3, r1
 800cf44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf46:	2300      	movs	r3, #0
 800cf48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cf54:	78fa      	ldrb	r2, [r7, #3]
 800cf56:	4611      	mov	r1, r2
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f7f5 f893 	bl	8002084 <HAL_PCD_SetAddress>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf62:	7bfb      	ldrb	r3, [r7, #15]
 800cf64:	4618      	mov	r0, r3
 800cf66:	f000 f875 	bl	800d054 <USBD_Get_USB_Status>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3710      	adds	r7, #16
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}

0800cf78 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b086      	sub	sp, #24
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	607a      	str	r2, [r7, #4]
 800cf82:	603b      	str	r3, [r7, #0]
 800cf84:	460b      	mov	r3, r1
 800cf86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cf96:	7af9      	ldrb	r1, [r7, #11]
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	687a      	ldr	r2, [r7, #4]
 800cf9c:	f7f5 f99d 	bl	80022da <HAL_PCD_EP_Transmit>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfa4:	7dfb      	ldrb	r3, [r7, #23]
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f000 f854 	bl	800d054 <USBD_Get_USB_Status>
 800cfac:	4603      	mov	r3, r0
 800cfae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cfb0:	7dbb      	ldrb	r3, [r7, #22]
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3718      	adds	r7, #24
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}

0800cfba <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cfba:	b580      	push	{r7, lr}
 800cfbc:	b086      	sub	sp, #24
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	60f8      	str	r0, [r7, #12]
 800cfc2:	607a      	str	r2, [r7, #4]
 800cfc4:	603b      	str	r3, [r7, #0]
 800cfc6:	460b      	mov	r3, r1
 800cfc8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cfd8:	7af9      	ldrb	r1, [r7, #11]
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	f7f5 f929 	bl	8002234 <HAL_PCD_EP_Receive>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfe6:	7dfb      	ldrb	r3, [r7, #23]
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f000 f833 	bl	800d054 <USBD_Get_USB_Status>
 800cfee:	4603      	mov	r3, r0
 800cff0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cff2:	7dbb      	ldrb	r3, [r7, #22]
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	3718      	adds	r7, #24
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}

0800cffc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	460b      	mov	r3, r1
 800d006:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d00e:	78fa      	ldrb	r2, [r7, #3]
 800d010:	4611      	mov	r1, r2
 800d012:	4618      	mov	r0, r3
 800d014:	f7f5 f949 	bl	80022aa <HAL_PCD_EP_GetRxCount>
 800d018:	4603      	mov	r3, r0
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3708      	adds	r7, #8
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
	...

0800d024 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d024:	b480      	push	{r7}
 800d026:	b083      	sub	sp, #12
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d02c:	4b03      	ldr	r3, [pc, #12]	@ (800d03c <USBD_static_malloc+0x18>)
}
 800d02e:	4618      	mov	r0, r3
 800d030:	370c      	adds	r7, #12
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr
 800d03a:	bf00      	nop
 800d03c:	20000d54 	.word	0x20000d54

0800d040 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d040:	b480      	push	{r7}
 800d042:	b083      	sub	sp, #12
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]

}
 800d048:	bf00      	nop
 800d04a:	370c      	adds	r7, #12
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr

0800d054 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d054:	b480      	push	{r7}
 800d056:	b085      	sub	sp, #20
 800d058:	af00      	add	r7, sp, #0
 800d05a:	4603      	mov	r3, r0
 800d05c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d05e:	2300      	movs	r3, #0
 800d060:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d062:	79fb      	ldrb	r3, [r7, #7]
 800d064:	2b03      	cmp	r3, #3
 800d066:	d817      	bhi.n	800d098 <USBD_Get_USB_Status+0x44>
 800d068:	a201      	add	r2, pc, #4	@ (adr r2, 800d070 <USBD_Get_USB_Status+0x1c>)
 800d06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d06e:	bf00      	nop
 800d070:	0800d081 	.word	0x0800d081
 800d074:	0800d087 	.word	0x0800d087
 800d078:	0800d08d 	.word	0x0800d08d
 800d07c:	0800d093 	.word	0x0800d093
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d080:	2300      	movs	r3, #0
 800d082:	73fb      	strb	r3, [r7, #15]
    break;
 800d084:	e00b      	b.n	800d09e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d086:	2303      	movs	r3, #3
 800d088:	73fb      	strb	r3, [r7, #15]
    break;
 800d08a:	e008      	b.n	800d09e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d08c:	2301      	movs	r3, #1
 800d08e:	73fb      	strb	r3, [r7, #15]
    break;
 800d090:	e005      	b.n	800d09e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d092:	2303      	movs	r3, #3
 800d094:	73fb      	strb	r3, [r7, #15]
    break;
 800d096:	e002      	b.n	800d09e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d098:	2303      	movs	r3, #3
 800d09a:	73fb      	strb	r3, [r7, #15]
    break;
 800d09c:	bf00      	nop
  }
  return usb_status;
 800d09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3714      	adds	r7, #20
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr

0800d0ac <_vsniprintf_r>:
 800d0ac:	b530      	push	{r4, r5, lr}
 800d0ae:	4614      	mov	r4, r2
 800d0b0:	2c00      	cmp	r4, #0
 800d0b2:	b09b      	sub	sp, #108	@ 0x6c
 800d0b4:	4605      	mov	r5, r0
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	da05      	bge.n	800d0c6 <_vsniprintf_r+0x1a>
 800d0ba:	238b      	movs	r3, #139	@ 0x8b
 800d0bc:	6003      	str	r3, [r0, #0]
 800d0be:	f04f 30ff 	mov.w	r0, #4294967295
 800d0c2:	b01b      	add	sp, #108	@ 0x6c
 800d0c4:	bd30      	pop	{r4, r5, pc}
 800d0c6:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d0ca:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d0ce:	f04f 0300 	mov.w	r3, #0
 800d0d2:	9319      	str	r3, [sp, #100]	@ 0x64
 800d0d4:	bf14      	ite	ne
 800d0d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d0da:	4623      	moveq	r3, r4
 800d0dc:	9302      	str	r3, [sp, #8]
 800d0de:	9305      	str	r3, [sp, #20]
 800d0e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d0e4:	9100      	str	r1, [sp, #0]
 800d0e6:	9104      	str	r1, [sp, #16]
 800d0e8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d0ec:	4669      	mov	r1, sp
 800d0ee:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800d0f0:	f000 f9a0 	bl	800d434 <_svfiprintf_r>
 800d0f4:	1c43      	adds	r3, r0, #1
 800d0f6:	bfbc      	itt	lt
 800d0f8:	238b      	movlt	r3, #139	@ 0x8b
 800d0fa:	602b      	strlt	r3, [r5, #0]
 800d0fc:	2c00      	cmp	r4, #0
 800d0fe:	d0e0      	beq.n	800d0c2 <_vsniprintf_r+0x16>
 800d100:	9b00      	ldr	r3, [sp, #0]
 800d102:	2200      	movs	r2, #0
 800d104:	701a      	strb	r2, [r3, #0]
 800d106:	e7dc      	b.n	800d0c2 <_vsniprintf_r+0x16>

0800d108 <vsniprintf>:
 800d108:	b507      	push	{r0, r1, r2, lr}
 800d10a:	9300      	str	r3, [sp, #0]
 800d10c:	4613      	mov	r3, r2
 800d10e:	460a      	mov	r2, r1
 800d110:	4601      	mov	r1, r0
 800d112:	4803      	ldr	r0, [pc, #12]	@ (800d120 <vsniprintf+0x18>)
 800d114:	6800      	ldr	r0, [r0, #0]
 800d116:	f7ff ffc9 	bl	800d0ac <_vsniprintf_r>
 800d11a:	b003      	add	sp, #12
 800d11c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d120:	20000114 	.word	0x20000114

0800d124 <memset>:
 800d124:	4402      	add	r2, r0
 800d126:	4603      	mov	r3, r0
 800d128:	4293      	cmp	r3, r2
 800d12a:	d100      	bne.n	800d12e <memset+0xa>
 800d12c:	4770      	bx	lr
 800d12e:	f803 1b01 	strb.w	r1, [r3], #1
 800d132:	e7f9      	b.n	800d128 <memset+0x4>

0800d134 <__errno>:
 800d134:	4b01      	ldr	r3, [pc, #4]	@ (800d13c <__errno+0x8>)
 800d136:	6818      	ldr	r0, [r3, #0]
 800d138:	4770      	bx	lr
 800d13a:	bf00      	nop
 800d13c:	20000114 	.word	0x20000114

0800d140 <__libc_init_array>:
 800d140:	b570      	push	{r4, r5, r6, lr}
 800d142:	4d0d      	ldr	r5, [pc, #52]	@ (800d178 <__libc_init_array+0x38>)
 800d144:	4c0d      	ldr	r4, [pc, #52]	@ (800d17c <__libc_init_array+0x3c>)
 800d146:	1b64      	subs	r4, r4, r5
 800d148:	10a4      	asrs	r4, r4, #2
 800d14a:	2600      	movs	r6, #0
 800d14c:	42a6      	cmp	r6, r4
 800d14e:	d109      	bne.n	800d164 <__libc_init_array+0x24>
 800d150:	4d0b      	ldr	r5, [pc, #44]	@ (800d180 <__libc_init_array+0x40>)
 800d152:	4c0c      	ldr	r4, [pc, #48]	@ (800d184 <__libc_init_array+0x44>)
 800d154:	f000 fc64 	bl	800da20 <_init>
 800d158:	1b64      	subs	r4, r4, r5
 800d15a:	10a4      	asrs	r4, r4, #2
 800d15c:	2600      	movs	r6, #0
 800d15e:	42a6      	cmp	r6, r4
 800d160:	d105      	bne.n	800d16e <__libc_init_array+0x2e>
 800d162:	bd70      	pop	{r4, r5, r6, pc}
 800d164:	f855 3b04 	ldr.w	r3, [r5], #4
 800d168:	4798      	blx	r3
 800d16a:	3601      	adds	r6, #1
 800d16c:	e7ee      	b.n	800d14c <__libc_init_array+0xc>
 800d16e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d172:	4798      	blx	r3
 800d174:	3601      	adds	r6, #1
 800d176:	e7f2      	b.n	800d15e <__libc_init_array+0x1e>
 800d178:	0800dde8 	.word	0x0800dde8
 800d17c:	0800dde8 	.word	0x0800dde8
 800d180:	0800dde8 	.word	0x0800dde8
 800d184:	0800ddec 	.word	0x0800ddec

0800d188 <__retarget_lock_acquire_recursive>:
 800d188:	4770      	bx	lr

0800d18a <__retarget_lock_release_recursive>:
 800d18a:	4770      	bx	lr

0800d18c <_free_r>:
 800d18c:	b538      	push	{r3, r4, r5, lr}
 800d18e:	4605      	mov	r5, r0
 800d190:	2900      	cmp	r1, #0
 800d192:	d041      	beq.n	800d218 <_free_r+0x8c>
 800d194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d198:	1f0c      	subs	r4, r1, #4
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	bfb8      	it	lt
 800d19e:	18e4      	addlt	r4, r4, r3
 800d1a0:	f000 f8e0 	bl	800d364 <__malloc_lock>
 800d1a4:	4a1d      	ldr	r2, [pc, #116]	@ (800d21c <_free_r+0x90>)
 800d1a6:	6813      	ldr	r3, [r2, #0]
 800d1a8:	b933      	cbnz	r3, 800d1b8 <_free_r+0x2c>
 800d1aa:	6063      	str	r3, [r4, #4]
 800d1ac:	6014      	str	r4, [r2, #0]
 800d1ae:	4628      	mov	r0, r5
 800d1b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1b4:	f000 b8dc 	b.w	800d370 <__malloc_unlock>
 800d1b8:	42a3      	cmp	r3, r4
 800d1ba:	d908      	bls.n	800d1ce <_free_r+0x42>
 800d1bc:	6820      	ldr	r0, [r4, #0]
 800d1be:	1821      	adds	r1, r4, r0
 800d1c0:	428b      	cmp	r3, r1
 800d1c2:	bf01      	itttt	eq
 800d1c4:	6819      	ldreq	r1, [r3, #0]
 800d1c6:	685b      	ldreq	r3, [r3, #4]
 800d1c8:	1809      	addeq	r1, r1, r0
 800d1ca:	6021      	streq	r1, [r4, #0]
 800d1cc:	e7ed      	b.n	800d1aa <_free_r+0x1e>
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	685b      	ldr	r3, [r3, #4]
 800d1d2:	b10b      	cbz	r3, 800d1d8 <_free_r+0x4c>
 800d1d4:	42a3      	cmp	r3, r4
 800d1d6:	d9fa      	bls.n	800d1ce <_free_r+0x42>
 800d1d8:	6811      	ldr	r1, [r2, #0]
 800d1da:	1850      	adds	r0, r2, r1
 800d1dc:	42a0      	cmp	r0, r4
 800d1de:	d10b      	bne.n	800d1f8 <_free_r+0x6c>
 800d1e0:	6820      	ldr	r0, [r4, #0]
 800d1e2:	4401      	add	r1, r0
 800d1e4:	1850      	adds	r0, r2, r1
 800d1e6:	4283      	cmp	r3, r0
 800d1e8:	6011      	str	r1, [r2, #0]
 800d1ea:	d1e0      	bne.n	800d1ae <_free_r+0x22>
 800d1ec:	6818      	ldr	r0, [r3, #0]
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	6053      	str	r3, [r2, #4]
 800d1f2:	4408      	add	r0, r1
 800d1f4:	6010      	str	r0, [r2, #0]
 800d1f6:	e7da      	b.n	800d1ae <_free_r+0x22>
 800d1f8:	d902      	bls.n	800d200 <_free_r+0x74>
 800d1fa:	230c      	movs	r3, #12
 800d1fc:	602b      	str	r3, [r5, #0]
 800d1fe:	e7d6      	b.n	800d1ae <_free_r+0x22>
 800d200:	6820      	ldr	r0, [r4, #0]
 800d202:	1821      	adds	r1, r4, r0
 800d204:	428b      	cmp	r3, r1
 800d206:	bf04      	itt	eq
 800d208:	6819      	ldreq	r1, [r3, #0]
 800d20a:	685b      	ldreq	r3, [r3, #4]
 800d20c:	6063      	str	r3, [r4, #4]
 800d20e:	bf04      	itt	eq
 800d210:	1809      	addeq	r1, r1, r0
 800d212:	6021      	streq	r1, [r4, #0]
 800d214:	6054      	str	r4, [r2, #4]
 800d216:	e7ca      	b.n	800d1ae <_free_r+0x22>
 800d218:	bd38      	pop	{r3, r4, r5, pc}
 800d21a:	bf00      	nop
 800d21c:	20001120 	.word	0x20001120

0800d220 <sbrk_aligned>:
 800d220:	b570      	push	{r4, r5, r6, lr}
 800d222:	4e0f      	ldr	r6, [pc, #60]	@ (800d260 <sbrk_aligned+0x40>)
 800d224:	460c      	mov	r4, r1
 800d226:	6831      	ldr	r1, [r6, #0]
 800d228:	4605      	mov	r5, r0
 800d22a:	b911      	cbnz	r1, 800d232 <sbrk_aligned+0x12>
 800d22c:	f000 fba4 	bl	800d978 <_sbrk_r>
 800d230:	6030      	str	r0, [r6, #0]
 800d232:	4621      	mov	r1, r4
 800d234:	4628      	mov	r0, r5
 800d236:	f000 fb9f 	bl	800d978 <_sbrk_r>
 800d23a:	1c43      	adds	r3, r0, #1
 800d23c:	d103      	bne.n	800d246 <sbrk_aligned+0x26>
 800d23e:	f04f 34ff 	mov.w	r4, #4294967295
 800d242:	4620      	mov	r0, r4
 800d244:	bd70      	pop	{r4, r5, r6, pc}
 800d246:	1cc4      	adds	r4, r0, #3
 800d248:	f024 0403 	bic.w	r4, r4, #3
 800d24c:	42a0      	cmp	r0, r4
 800d24e:	d0f8      	beq.n	800d242 <sbrk_aligned+0x22>
 800d250:	1a21      	subs	r1, r4, r0
 800d252:	4628      	mov	r0, r5
 800d254:	f000 fb90 	bl	800d978 <_sbrk_r>
 800d258:	3001      	adds	r0, #1
 800d25a:	d1f2      	bne.n	800d242 <sbrk_aligned+0x22>
 800d25c:	e7ef      	b.n	800d23e <sbrk_aligned+0x1e>
 800d25e:	bf00      	nop
 800d260:	2000111c 	.word	0x2000111c

0800d264 <_malloc_r>:
 800d264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d268:	1ccd      	adds	r5, r1, #3
 800d26a:	f025 0503 	bic.w	r5, r5, #3
 800d26e:	3508      	adds	r5, #8
 800d270:	2d0c      	cmp	r5, #12
 800d272:	bf38      	it	cc
 800d274:	250c      	movcc	r5, #12
 800d276:	2d00      	cmp	r5, #0
 800d278:	4606      	mov	r6, r0
 800d27a:	db01      	blt.n	800d280 <_malloc_r+0x1c>
 800d27c:	42a9      	cmp	r1, r5
 800d27e:	d904      	bls.n	800d28a <_malloc_r+0x26>
 800d280:	230c      	movs	r3, #12
 800d282:	6033      	str	r3, [r6, #0]
 800d284:	2000      	movs	r0, #0
 800d286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d28a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d360 <_malloc_r+0xfc>
 800d28e:	f000 f869 	bl	800d364 <__malloc_lock>
 800d292:	f8d8 3000 	ldr.w	r3, [r8]
 800d296:	461c      	mov	r4, r3
 800d298:	bb44      	cbnz	r4, 800d2ec <_malloc_r+0x88>
 800d29a:	4629      	mov	r1, r5
 800d29c:	4630      	mov	r0, r6
 800d29e:	f7ff ffbf 	bl	800d220 <sbrk_aligned>
 800d2a2:	1c43      	adds	r3, r0, #1
 800d2a4:	4604      	mov	r4, r0
 800d2a6:	d158      	bne.n	800d35a <_malloc_r+0xf6>
 800d2a8:	f8d8 4000 	ldr.w	r4, [r8]
 800d2ac:	4627      	mov	r7, r4
 800d2ae:	2f00      	cmp	r7, #0
 800d2b0:	d143      	bne.n	800d33a <_malloc_r+0xd6>
 800d2b2:	2c00      	cmp	r4, #0
 800d2b4:	d04b      	beq.n	800d34e <_malloc_r+0xea>
 800d2b6:	6823      	ldr	r3, [r4, #0]
 800d2b8:	4639      	mov	r1, r7
 800d2ba:	4630      	mov	r0, r6
 800d2bc:	eb04 0903 	add.w	r9, r4, r3
 800d2c0:	f000 fb5a 	bl	800d978 <_sbrk_r>
 800d2c4:	4581      	cmp	r9, r0
 800d2c6:	d142      	bne.n	800d34e <_malloc_r+0xea>
 800d2c8:	6821      	ldr	r1, [r4, #0]
 800d2ca:	1a6d      	subs	r5, r5, r1
 800d2cc:	4629      	mov	r1, r5
 800d2ce:	4630      	mov	r0, r6
 800d2d0:	f7ff ffa6 	bl	800d220 <sbrk_aligned>
 800d2d4:	3001      	adds	r0, #1
 800d2d6:	d03a      	beq.n	800d34e <_malloc_r+0xea>
 800d2d8:	6823      	ldr	r3, [r4, #0]
 800d2da:	442b      	add	r3, r5
 800d2dc:	6023      	str	r3, [r4, #0]
 800d2de:	f8d8 3000 	ldr.w	r3, [r8]
 800d2e2:	685a      	ldr	r2, [r3, #4]
 800d2e4:	bb62      	cbnz	r2, 800d340 <_malloc_r+0xdc>
 800d2e6:	f8c8 7000 	str.w	r7, [r8]
 800d2ea:	e00f      	b.n	800d30c <_malloc_r+0xa8>
 800d2ec:	6822      	ldr	r2, [r4, #0]
 800d2ee:	1b52      	subs	r2, r2, r5
 800d2f0:	d420      	bmi.n	800d334 <_malloc_r+0xd0>
 800d2f2:	2a0b      	cmp	r2, #11
 800d2f4:	d917      	bls.n	800d326 <_malloc_r+0xc2>
 800d2f6:	1961      	adds	r1, r4, r5
 800d2f8:	42a3      	cmp	r3, r4
 800d2fa:	6025      	str	r5, [r4, #0]
 800d2fc:	bf18      	it	ne
 800d2fe:	6059      	strne	r1, [r3, #4]
 800d300:	6863      	ldr	r3, [r4, #4]
 800d302:	bf08      	it	eq
 800d304:	f8c8 1000 	streq.w	r1, [r8]
 800d308:	5162      	str	r2, [r4, r5]
 800d30a:	604b      	str	r3, [r1, #4]
 800d30c:	4630      	mov	r0, r6
 800d30e:	f000 f82f 	bl	800d370 <__malloc_unlock>
 800d312:	f104 000b 	add.w	r0, r4, #11
 800d316:	1d23      	adds	r3, r4, #4
 800d318:	f020 0007 	bic.w	r0, r0, #7
 800d31c:	1ac2      	subs	r2, r0, r3
 800d31e:	bf1c      	itt	ne
 800d320:	1a1b      	subne	r3, r3, r0
 800d322:	50a3      	strne	r3, [r4, r2]
 800d324:	e7af      	b.n	800d286 <_malloc_r+0x22>
 800d326:	6862      	ldr	r2, [r4, #4]
 800d328:	42a3      	cmp	r3, r4
 800d32a:	bf0c      	ite	eq
 800d32c:	f8c8 2000 	streq.w	r2, [r8]
 800d330:	605a      	strne	r2, [r3, #4]
 800d332:	e7eb      	b.n	800d30c <_malloc_r+0xa8>
 800d334:	4623      	mov	r3, r4
 800d336:	6864      	ldr	r4, [r4, #4]
 800d338:	e7ae      	b.n	800d298 <_malloc_r+0x34>
 800d33a:	463c      	mov	r4, r7
 800d33c:	687f      	ldr	r7, [r7, #4]
 800d33e:	e7b6      	b.n	800d2ae <_malloc_r+0x4a>
 800d340:	461a      	mov	r2, r3
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	42a3      	cmp	r3, r4
 800d346:	d1fb      	bne.n	800d340 <_malloc_r+0xdc>
 800d348:	2300      	movs	r3, #0
 800d34a:	6053      	str	r3, [r2, #4]
 800d34c:	e7de      	b.n	800d30c <_malloc_r+0xa8>
 800d34e:	230c      	movs	r3, #12
 800d350:	6033      	str	r3, [r6, #0]
 800d352:	4630      	mov	r0, r6
 800d354:	f000 f80c 	bl	800d370 <__malloc_unlock>
 800d358:	e794      	b.n	800d284 <_malloc_r+0x20>
 800d35a:	6005      	str	r5, [r0, #0]
 800d35c:	e7d6      	b.n	800d30c <_malloc_r+0xa8>
 800d35e:	bf00      	nop
 800d360:	20001120 	.word	0x20001120

0800d364 <__malloc_lock>:
 800d364:	4801      	ldr	r0, [pc, #4]	@ (800d36c <__malloc_lock+0x8>)
 800d366:	f7ff bf0f 	b.w	800d188 <__retarget_lock_acquire_recursive>
 800d36a:	bf00      	nop
 800d36c:	20001118 	.word	0x20001118

0800d370 <__malloc_unlock>:
 800d370:	4801      	ldr	r0, [pc, #4]	@ (800d378 <__malloc_unlock+0x8>)
 800d372:	f7ff bf0a 	b.w	800d18a <__retarget_lock_release_recursive>
 800d376:	bf00      	nop
 800d378:	20001118 	.word	0x20001118

0800d37c <__ssputs_r>:
 800d37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d380:	688e      	ldr	r6, [r1, #8]
 800d382:	461f      	mov	r7, r3
 800d384:	42be      	cmp	r6, r7
 800d386:	680b      	ldr	r3, [r1, #0]
 800d388:	4682      	mov	sl, r0
 800d38a:	460c      	mov	r4, r1
 800d38c:	4690      	mov	r8, r2
 800d38e:	d82d      	bhi.n	800d3ec <__ssputs_r+0x70>
 800d390:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d394:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d398:	d026      	beq.n	800d3e8 <__ssputs_r+0x6c>
 800d39a:	6965      	ldr	r5, [r4, #20]
 800d39c:	6909      	ldr	r1, [r1, #16]
 800d39e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d3a2:	eba3 0901 	sub.w	r9, r3, r1
 800d3a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d3aa:	1c7b      	adds	r3, r7, #1
 800d3ac:	444b      	add	r3, r9
 800d3ae:	106d      	asrs	r5, r5, #1
 800d3b0:	429d      	cmp	r5, r3
 800d3b2:	bf38      	it	cc
 800d3b4:	461d      	movcc	r5, r3
 800d3b6:	0553      	lsls	r3, r2, #21
 800d3b8:	d527      	bpl.n	800d40a <__ssputs_r+0x8e>
 800d3ba:	4629      	mov	r1, r5
 800d3bc:	f7ff ff52 	bl	800d264 <_malloc_r>
 800d3c0:	4606      	mov	r6, r0
 800d3c2:	b360      	cbz	r0, 800d41e <__ssputs_r+0xa2>
 800d3c4:	6921      	ldr	r1, [r4, #16]
 800d3c6:	464a      	mov	r2, r9
 800d3c8:	f000 fae6 	bl	800d998 <memcpy>
 800d3cc:	89a3      	ldrh	r3, [r4, #12]
 800d3ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d3d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3d6:	81a3      	strh	r3, [r4, #12]
 800d3d8:	6126      	str	r6, [r4, #16]
 800d3da:	6165      	str	r5, [r4, #20]
 800d3dc:	444e      	add	r6, r9
 800d3de:	eba5 0509 	sub.w	r5, r5, r9
 800d3e2:	6026      	str	r6, [r4, #0]
 800d3e4:	60a5      	str	r5, [r4, #8]
 800d3e6:	463e      	mov	r6, r7
 800d3e8:	42be      	cmp	r6, r7
 800d3ea:	d900      	bls.n	800d3ee <__ssputs_r+0x72>
 800d3ec:	463e      	mov	r6, r7
 800d3ee:	6820      	ldr	r0, [r4, #0]
 800d3f0:	4632      	mov	r2, r6
 800d3f2:	4641      	mov	r1, r8
 800d3f4:	f000 faa6 	bl	800d944 <memmove>
 800d3f8:	68a3      	ldr	r3, [r4, #8]
 800d3fa:	1b9b      	subs	r3, r3, r6
 800d3fc:	60a3      	str	r3, [r4, #8]
 800d3fe:	6823      	ldr	r3, [r4, #0]
 800d400:	4433      	add	r3, r6
 800d402:	6023      	str	r3, [r4, #0]
 800d404:	2000      	movs	r0, #0
 800d406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d40a:	462a      	mov	r2, r5
 800d40c:	f000 fad2 	bl	800d9b4 <_realloc_r>
 800d410:	4606      	mov	r6, r0
 800d412:	2800      	cmp	r0, #0
 800d414:	d1e0      	bne.n	800d3d8 <__ssputs_r+0x5c>
 800d416:	6921      	ldr	r1, [r4, #16]
 800d418:	4650      	mov	r0, sl
 800d41a:	f7ff feb7 	bl	800d18c <_free_r>
 800d41e:	230c      	movs	r3, #12
 800d420:	f8ca 3000 	str.w	r3, [sl]
 800d424:	89a3      	ldrh	r3, [r4, #12]
 800d426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d42a:	81a3      	strh	r3, [r4, #12]
 800d42c:	f04f 30ff 	mov.w	r0, #4294967295
 800d430:	e7e9      	b.n	800d406 <__ssputs_r+0x8a>
	...

0800d434 <_svfiprintf_r>:
 800d434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d438:	4698      	mov	r8, r3
 800d43a:	898b      	ldrh	r3, [r1, #12]
 800d43c:	061b      	lsls	r3, r3, #24
 800d43e:	b09d      	sub	sp, #116	@ 0x74
 800d440:	4607      	mov	r7, r0
 800d442:	460d      	mov	r5, r1
 800d444:	4614      	mov	r4, r2
 800d446:	d510      	bpl.n	800d46a <_svfiprintf_r+0x36>
 800d448:	690b      	ldr	r3, [r1, #16]
 800d44a:	b973      	cbnz	r3, 800d46a <_svfiprintf_r+0x36>
 800d44c:	2140      	movs	r1, #64	@ 0x40
 800d44e:	f7ff ff09 	bl	800d264 <_malloc_r>
 800d452:	6028      	str	r0, [r5, #0]
 800d454:	6128      	str	r0, [r5, #16]
 800d456:	b930      	cbnz	r0, 800d466 <_svfiprintf_r+0x32>
 800d458:	230c      	movs	r3, #12
 800d45a:	603b      	str	r3, [r7, #0]
 800d45c:	f04f 30ff 	mov.w	r0, #4294967295
 800d460:	b01d      	add	sp, #116	@ 0x74
 800d462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d466:	2340      	movs	r3, #64	@ 0x40
 800d468:	616b      	str	r3, [r5, #20]
 800d46a:	2300      	movs	r3, #0
 800d46c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d46e:	2320      	movs	r3, #32
 800d470:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d474:	f8cd 800c 	str.w	r8, [sp, #12]
 800d478:	2330      	movs	r3, #48	@ 0x30
 800d47a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d618 <_svfiprintf_r+0x1e4>
 800d47e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d482:	f04f 0901 	mov.w	r9, #1
 800d486:	4623      	mov	r3, r4
 800d488:	469a      	mov	sl, r3
 800d48a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d48e:	b10a      	cbz	r2, 800d494 <_svfiprintf_r+0x60>
 800d490:	2a25      	cmp	r2, #37	@ 0x25
 800d492:	d1f9      	bne.n	800d488 <_svfiprintf_r+0x54>
 800d494:	ebba 0b04 	subs.w	fp, sl, r4
 800d498:	d00b      	beq.n	800d4b2 <_svfiprintf_r+0x7e>
 800d49a:	465b      	mov	r3, fp
 800d49c:	4622      	mov	r2, r4
 800d49e:	4629      	mov	r1, r5
 800d4a0:	4638      	mov	r0, r7
 800d4a2:	f7ff ff6b 	bl	800d37c <__ssputs_r>
 800d4a6:	3001      	adds	r0, #1
 800d4a8:	f000 80a7 	beq.w	800d5fa <_svfiprintf_r+0x1c6>
 800d4ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d4ae:	445a      	add	r2, fp
 800d4b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d4b2:	f89a 3000 	ldrb.w	r3, [sl]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	f000 809f 	beq.w	800d5fa <_svfiprintf_r+0x1c6>
 800d4bc:	2300      	movs	r3, #0
 800d4be:	f04f 32ff 	mov.w	r2, #4294967295
 800d4c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4c6:	f10a 0a01 	add.w	sl, sl, #1
 800d4ca:	9304      	str	r3, [sp, #16]
 800d4cc:	9307      	str	r3, [sp, #28]
 800d4ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d4d2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d4d4:	4654      	mov	r4, sl
 800d4d6:	2205      	movs	r2, #5
 800d4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4dc:	484e      	ldr	r0, [pc, #312]	@ (800d618 <_svfiprintf_r+0x1e4>)
 800d4de:	f7f2 fe8f 	bl	8000200 <memchr>
 800d4e2:	9a04      	ldr	r2, [sp, #16]
 800d4e4:	b9d8      	cbnz	r0, 800d51e <_svfiprintf_r+0xea>
 800d4e6:	06d0      	lsls	r0, r2, #27
 800d4e8:	bf44      	itt	mi
 800d4ea:	2320      	movmi	r3, #32
 800d4ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4f0:	0711      	lsls	r1, r2, #28
 800d4f2:	bf44      	itt	mi
 800d4f4:	232b      	movmi	r3, #43	@ 0x2b
 800d4f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4fa:	f89a 3000 	ldrb.w	r3, [sl]
 800d4fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800d500:	d015      	beq.n	800d52e <_svfiprintf_r+0xfa>
 800d502:	9a07      	ldr	r2, [sp, #28]
 800d504:	4654      	mov	r4, sl
 800d506:	2000      	movs	r0, #0
 800d508:	f04f 0c0a 	mov.w	ip, #10
 800d50c:	4621      	mov	r1, r4
 800d50e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d512:	3b30      	subs	r3, #48	@ 0x30
 800d514:	2b09      	cmp	r3, #9
 800d516:	d94b      	bls.n	800d5b0 <_svfiprintf_r+0x17c>
 800d518:	b1b0      	cbz	r0, 800d548 <_svfiprintf_r+0x114>
 800d51a:	9207      	str	r2, [sp, #28]
 800d51c:	e014      	b.n	800d548 <_svfiprintf_r+0x114>
 800d51e:	eba0 0308 	sub.w	r3, r0, r8
 800d522:	fa09 f303 	lsl.w	r3, r9, r3
 800d526:	4313      	orrs	r3, r2
 800d528:	9304      	str	r3, [sp, #16]
 800d52a:	46a2      	mov	sl, r4
 800d52c:	e7d2      	b.n	800d4d4 <_svfiprintf_r+0xa0>
 800d52e:	9b03      	ldr	r3, [sp, #12]
 800d530:	1d19      	adds	r1, r3, #4
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	9103      	str	r1, [sp, #12]
 800d536:	2b00      	cmp	r3, #0
 800d538:	bfbb      	ittet	lt
 800d53a:	425b      	neglt	r3, r3
 800d53c:	f042 0202 	orrlt.w	r2, r2, #2
 800d540:	9307      	strge	r3, [sp, #28]
 800d542:	9307      	strlt	r3, [sp, #28]
 800d544:	bfb8      	it	lt
 800d546:	9204      	strlt	r2, [sp, #16]
 800d548:	7823      	ldrb	r3, [r4, #0]
 800d54a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d54c:	d10a      	bne.n	800d564 <_svfiprintf_r+0x130>
 800d54e:	7863      	ldrb	r3, [r4, #1]
 800d550:	2b2a      	cmp	r3, #42	@ 0x2a
 800d552:	d132      	bne.n	800d5ba <_svfiprintf_r+0x186>
 800d554:	9b03      	ldr	r3, [sp, #12]
 800d556:	1d1a      	adds	r2, r3, #4
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	9203      	str	r2, [sp, #12]
 800d55c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d560:	3402      	adds	r4, #2
 800d562:	9305      	str	r3, [sp, #20]
 800d564:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d628 <_svfiprintf_r+0x1f4>
 800d568:	7821      	ldrb	r1, [r4, #0]
 800d56a:	2203      	movs	r2, #3
 800d56c:	4650      	mov	r0, sl
 800d56e:	f7f2 fe47 	bl	8000200 <memchr>
 800d572:	b138      	cbz	r0, 800d584 <_svfiprintf_r+0x150>
 800d574:	9b04      	ldr	r3, [sp, #16]
 800d576:	eba0 000a 	sub.w	r0, r0, sl
 800d57a:	2240      	movs	r2, #64	@ 0x40
 800d57c:	4082      	lsls	r2, r0
 800d57e:	4313      	orrs	r3, r2
 800d580:	3401      	adds	r4, #1
 800d582:	9304      	str	r3, [sp, #16]
 800d584:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d588:	4824      	ldr	r0, [pc, #144]	@ (800d61c <_svfiprintf_r+0x1e8>)
 800d58a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d58e:	2206      	movs	r2, #6
 800d590:	f7f2 fe36 	bl	8000200 <memchr>
 800d594:	2800      	cmp	r0, #0
 800d596:	d036      	beq.n	800d606 <_svfiprintf_r+0x1d2>
 800d598:	4b21      	ldr	r3, [pc, #132]	@ (800d620 <_svfiprintf_r+0x1ec>)
 800d59a:	bb1b      	cbnz	r3, 800d5e4 <_svfiprintf_r+0x1b0>
 800d59c:	9b03      	ldr	r3, [sp, #12]
 800d59e:	3307      	adds	r3, #7
 800d5a0:	f023 0307 	bic.w	r3, r3, #7
 800d5a4:	3308      	adds	r3, #8
 800d5a6:	9303      	str	r3, [sp, #12]
 800d5a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5aa:	4433      	add	r3, r6
 800d5ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5ae:	e76a      	b.n	800d486 <_svfiprintf_r+0x52>
 800d5b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5b4:	460c      	mov	r4, r1
 800d5b6:	2001      	movs	r0, #1
 800d5b8:	e7a8      	b.n	800d50c <_svfiprintf_r+0xd8>
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	3401      	adds	r4, #1
 800d5be:	9305      	str	r3, [sp, #20]
 800d5c0:	4619      	mov	r1, r3
 800d5c2:	f04f 0c0a 	mov.w	ip, #10
 800d5c6:	4620      	mov	r0, r4
 800d5c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5cc:	3a30      	subs	r2, #48	@ 0x30
 800d5ce:	2a09      	cmp	r2, #9
 800d5d0:	d903      	bls.n	800d5da <_svfiprintf_r+0x1a6>
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d0c6      	beq.n	800d564 <_svfiprintf_r+0x130>
 800d5d6:	9105      	str	r1, [sp, #20]
 800d5d8:	e7c4      	b.n	800d564 <_svfiprintf_r+0x130>
 800d5da:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5de:	4604      	mov	r4, r0
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	e7f0      	b.n	800d5c6 <_svfiprintf_r+0x192>
 800d5e4:	ab03      	add	r3, sp, #12
 800d5e6:	9300      	str	r3, [sp, #0]
 800d5e8:	462a      	mov	r2, r5
 800d5ea:	4b0e      	ldr	r3, [pc, #56]	@ (800d624 <_svfiprintf_r+0x1f0>)
 800d5ec:	a904      	add	r1, sp, #16
 800d5ee:	4638      	mov	r0, r7
 800d5f0:	f3af 8000 	nop.w
 800d5f4:	1c42      	adds	r2, r0, #1
 800d5f6:	4606      	mov	r6, r0
 800d5f8:	d1d6      	bne.n	800d5a8 <_svfiprintf_r+0x174>
 800d5fa:	89ab      	ldrh	r3, [r5, #12]
 800d5fc:	065b      	lsls	r3, r3, #25
 800d5fe:	f53f af2d 	bmi.w	800d45c <_svfiprintf_r+0x28>
 800d602:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d604:	e72c      	b.n	800d460 <_svfiprintf_r+0x2c>
 800d606:	ab03      	add	r3, sp, #12
 800d608:	9300      	str	r3, [sp, #0]
 800d60a:	462a      	mov	r2, r5
 800d60c:	4b05      	ldr	r3, [pc, #20]	@ (800d624 <_svfiprintf_r+0x1f0>)
 800d60e:	a904      	add	r1, sp, #16
 800d610:	4638      	mov	r0, r7
 800d612:	f000 f879 	bl	800d708 <_printf_i>
 800d616:	e7ed      	b.n	800d5f4 <_svfiprintf_r+0x1c0>
 800d618:	0800ddac 	.word	0x0800ddac
 800d61c:	0800ddb6 	.word	0x0800ddb6
 800d620:	00000000 	.word	0x00000000
 800d624:	0800d37d 	.word	0x0800d37d
 800d628:	0800ddb2 	.word	0x0800ddb2

0800d62c <_printf_common>:
 800d62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d630:	4616      	mov	r6, r2
 800d632:	4698      	mov	r8, r3
 800d634:	688a      	ldr	r2, [r1, #8]
 800d636:	690b      	ldr	r3, [r1, #16]
 800d638:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d63c:	4293      	cmp	r3, r2
 800d63e:	bfb8      	it	lt
 800d640:	4613      	movlt	r3, r2
 800d642:	6033      	str	r3, [r6, #0]
 800d644:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d648:	4607      	mov	r7, r0
 800d64a:	460c      	mov	r4, r1
 800d64c:	b10a      	cbz	r2, 800d652 <_printf_common+0x26>
 800d64e:	3301      	adds	r3, #1
 800d650:	6033      	str	r3, [r6, #0]
 800d652:	6823      	ldr	r3, [r4, #0]
 800d654:	0699      	lsls	r1, r3, #26
 800d656:	bf42      	ittt	mi
 800d658:	6833      	ldrmi	r3, [r6, #0]
 800d65a:	3302      	addmi	r3, #2
 800d65c:	6033      	strmi	r3, [r6, #0]
 800d65e:	6825      	ldr	r5, [r4, #0]
 800d660:	f015 0506 	ands.w	r5, r5, #6
 800d664:	d106      	bne.n	800d674 <_printf_common+0x48>
 800d666:	f104 0a19 	add.w	sl, r4, #25
 800d66a:	68e3      	ldr	r3, [r4, #12]
 800d66c:	6832      	ldr	r2, [r6, #0]
 800d66e:	1a9b      	subs	r3, r3, r2
 800d670:	42ab      	cmp	r3, r5
 800d672:	dc26      	bgt.n	800d6c2 <_printf_common+0x96>
 800d674:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d678:	6822      	ldr	r2, [r4, #0]
 800d67a:	3b00      	subs	r3, #0
 800d67c:	bf18      	it	ne
 800d67e:	2301      	movne	r3, #1
 800d680:	0692      	lsls	r2, r2, #26
 800d682:	d42b      	bmi.n	800d6dc <_printf_common+0xb0>
 800d684:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d688:	4641      	mov	r1, r8
 800d68a:	4638      	mov	r0, r7
 800d68c:	47c8      	blx	r9
 800d68e:	3001      	adds	r0, #1
 800d690:	d01e      	beq.n	800d6d0 <_printf_common+0xa4>
 800d692:	6823      	ldr	r3, [r4, #0]
 800d694:	6922      	ldr	r2, [r4, #16]
 800d696:	f003 0306 	and.w	r3, r3, #6
 800d69a:	2b04      	cmp	r3, #4
 800d69c:	bf02      	ittt	eq
 800d69e:	68e5      	ldreq	r5, [r4, #12]
 800d6a0:	6833      	ldreq	r3, [r6, #0]
 800d6a2:	1aed      	subeq	r5, r5, r3
 800d6a4:	68a3      	ldr	r3, [r4, #8]
 800d6a6:	bf0c      	ite	eq
 800d6a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d6ac:	2500      	movne	r5, #0
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	bfc4      	itt	gt
 800d6b2:	1a9b      	subgt	r3, r3, r2
 800d6b4:	18ed      	addgt	r5, r5, r3
 800d6b6:	2600      	movs	r6, #0
 800d6b8:	341a      	adds	r4, #26
 800d6ba:	42b5      	cmp	r5, r6
 800d6bc:	d11a      	bne.n	800d6f4 <_printf_common+0xc8>
 800d6be:	2000      	movs	r0, #0
 800d6c0:	e008      	b.n	800d6d4 <_printf_common+0xa8>
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	4652      	mov	r2, sl
 800d6c6:	4641      	mov	r1, r8
 800d6c8:	4638      	mov	r0, r7
 800d6ca:	47c8      	blx	r9
 800d6cc:	3001      	adds	r0, #1
 800d6ce:	d103      	bne.n	800d6d8 <_printf_common+0xac>
 800d6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6d8:	3501      	adds	r5, #1
 800d6da:	e7c6      	b.n	800d66a <_printf_common+0x3e>
 800d6dc:	18e1      	adds	r1, r4, r3
 800d6de:	1c5a      	adds	r2, r3, #1
 800d6e0:	2030      	movs	r0, #48	@ 0x30
 800d6e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d6e6:	4422      	add	r2, r4
 800d6e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d6ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d6f0:	3302      	adds	r3, #2
 800d6f2:	e7c7      	b.n	800d684 <_printf_common+0x58>
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	4622      	mov	r2, r4
 800d6f8:	4641      	mov	r1, r8
 800d6fa:	4638      	mov	r0, r7
 800d6fc:	47c8      	blx	r9
 800d6fe:	3001      	adds	r0, #1
 800d700:	d0e6      	beq.n	800d6d0 <_printf_common+0xa4>
 800d702:	3601      	adds	r6, #1
 800d704:	e7d9      	b.n	800d6ba <_printf_common+0x8e>
	...

0800d708 <_printf_i>:
 800d708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d70c:	7e0f      	ldrb	r7, [r1, #24]
 800d70e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d710:	2f78      	cmp	r7, #120	@ 0x78
 800d712:	4691      	mov	r9, r2
 800d714:	4680      	mov	r8, r0
 800d716:	460c      	mov	r4, r1
 800d718:	469a      	mov	sl, r3
 800d71a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d71e:	d807      	bhi.n	800d730 <_printf_i+0x28>
 800d720:	2f62      	cmp	r7, #98	@ 0x62
 800d722:	d80a      	bhi.n	800d73a <_printf_i+0x32>
 800d724:	2f00      	cmp	r7, #0
 800d726:	f000 80d1 	beq.w	800d8cc <_printf_i+0x1c4>
 800d72a:	2f58      	cmp	r7, #88	@ 0x58
 800d72c:	f000 80b8 	beq.w	800d8a0 <_printf_i+0x198>
 800d730:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d734:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d738:	e03a      	b.n	800d7b0 <_printf_i+0xa8>
 800d73a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d73e:	2b15      	cmp	r3, #21
 800d740:	d8f6      	bhi.n	800d730 <_printf_i+0x28>
 800d742:	a101      	add	r1, pc, #4	@ (adr r1, 800d748 <_printf_i+0x40>)
 800d744:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d748:	0800d7a1 	.word	0x0800d7a1
 800d74c:	0800d7b5 	.word	0x0800d7b5
 800d750:	0800d731 	.word	0x0800d731
 800d754:	0800d731 	.word	0x0800d731
 800d758:	0800d731 	.word	0x0800d731
 800d75c:	0800d731 	.word	0x0800d731
 800d760:	0800d7b5 	.word	0x0800d7b5
 800d764:	0800d731 	.word	0x0800d731
 800d768:	0800d731 	.word	0x0800d731
 800d76c:	0800d731 	.word	0x0800d731
 800d770:	0800d731 	.word	0x0800d731
 800d774:	0800d8b3 	.word	0x0800d8b3
 800d778:	0800d7df 	.word	0x0800d7df
 800d77c:	0800d86d 	.word	0x0800d86d
 800d780:	0800d731 	.word	0x0800d731
 800d784:	0800d731 	.word	0x0800d731
 800d788:	0800d8d5 	.word	0x0800d8d5
 800d78c:	0800d731 	.word	0x0800d731
 800d790:	0800d7df 	.word	0x0800d7df
 800d794:	0800d731 	.word	0x0800d731
 800d798:	0800d731 	.word	0x0800d731
 800d79c:	0800d875 	.word	0x0800d875
 800d7a0:	6833      	ldr	r3, [r6, #0]
 800d7a2:	1d1a      	adds	r2, r3, #4
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	6032      	str	r2, [r6, #0]
 800d7a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d7ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	e09c      	b.n	800d8ee <_printf_i+0x1e6>
 800d7b4:	6833      	ldr	r3, [r6, #0]
 800d7b6:	6820      	ldr	r0, [r4, #0]
 800d7b8:	1d19      	adds	r1, r3, #4
 800d7ba:	6031      	str	r1, [r6, #0]
 800d7bc:	0606      	lsls	r6, r0, #24
 800d7be:	d501      	bpl.n	800d7c4 <_printf_i+0xbc>
 800d7c0:	681d      	ldr	r5, [r3, #0]
 800d7c2:	e003      	b.n	800d7cc <_printf_i+0xc4>
 800d7c4:	0645      	lsls	r5, r0, #25
 800d7c6:	d5fb      	bpl.n	800d7c0 <_printf_i+0xb8>
 800d7c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d7cc:	2d00      	cmp	r5, #0
 800d7ce:	da03      	bge.n	800d7d8 <_printf_i+0xd0>
 800d7d0:	232d      	movs	r3, #45	@ 0x2d
 800d7d2:	426d      	negs	r5, r5
 800d7d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d7d8:	4858      	ldr	r0, [pc, #352]	@ (800d93c <_printf_i+0x234>)
 800d7da:	230a      	movs	r3, #10
 800d7dc:	e011      	b.n	800d802 <_printf_i+0xfa>
 800d7de:	6821      	ldr	r1, [r4, #0]
 800d7e0:	6833      	ldr	r3, [r6, #0]
 800d7e2:	0608      	lsls	r0, r1, #24
 800d7e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800d7e8:	d402      	bmi.n	800d7f0 <_printf_i+0xe8>
 800d7ea:	0649      	lsls	r1, r1, #25
 800d7ec:	bf48      	it	mi
 800d7ee:	b2ad      	uxthmi	r5, r5
 800d7f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800d7f2:	4852      	ldr	r0, [pc, #328]	@ (800d93c <_printf_i+0x234>)
 800d7f4:	6033      	str	r3, [r6, #0]
 800d7f6:	bf14      	ite	ne
 800d7f8:	230a      	movne	r3, #10
 800d7fa:	2308      	moveq	r3, #8
 800d7fc:	2100      	movs	r1, #0
 800d7fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d802:	6866      	ldr	r6, [r4, #4]
 800d804:	60a6      	str	r6, [r4, #8]
 800d806:	2e00      	cmp	r6, #0
 800d808:	db05      	blt.n	800d816 <_printf_i+0x10e>
 800d80a:	6821      	ldr	r1, [r4, #0]
 800d80c:	432e      	orrs	r6, r5
 800d80e:	f021 0104 	bic.w	r1, r1, #4
 800d812:	6021      	str	r1, [r4, #0]
 800d814:	d04b      	beq.n	800d8ae <_printf_i+0x1a6>
 800d816:	4616      	mov	r6, r2
 800d818:	fbb5 f1f3 	udiv	r1, r5, r3
 800d81c:	fb03 5711 	mls	r7, r3, r1, r5
 800d820:	5dc7      	ldrb	r7, [r0, r7]
 800d822:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d826:	462f      	mov	r7, r5
 800d828:	42bb      	cmp	r3, r7
 800d82a:	460d      	mov	r5, r1
 800d82c:	d9f4      	bls.n	800d818 <_printf_i+0x110>
 800d82e:	2b08      	cmp	r3, #8
 800d830:	d10b      	bne.n	800d84a <_printf_i+0x142>
 800d832:	6823      	ldr	r3, [r4, #0]
 800d834:	07df      	lsls	r7, r3, #31
 800d836:	d508      	bpl.n	800d84a <_printf_i+0x142>
 800d838:	6923      	ldr	r3, [r4, #16]
 800d83a:	6861      	ldr	r1, [r4, #4]
 800d83c:	4299      	cmp	r1, r3
 800d83e:	bfde      	ittt	le
 800d840:	2330      	movle	r3, #48	@ 0x30
 800d842:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d846:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d84a:	1b92      	subs	r2, r2, r6
 800d84c:	6122      	str	r2, [r4, #16]
 800d84e:	f8cd a000 	str.w	sl, [sp]
 800d852:	464b      	mov	r3, r9
 800d854:	aa03      	add	r2, sp, #12
 800d856:	4621      	mov	r1, r4
 800d858:	4640      	mov	r0, r8
 800d85a:	f7ff fee7 	bl	800d62c <_printf_common>
 800d85e:	3001      	adds	r0, #1
 800d860:	d14a      	bne.n	800d8f8 <_printf_i+0x1f0>
 800d862:	f04f 30ff 	mov.w	r0, #4294967295
 800d866:	b004      	add	sp, #16
 800d868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d86c:	6823      	ldr	r3, [r4, #0]
 800d86e:	f043 0320 	orr.w	r3, r3, #32
 800d872:	6023      	str	r3, [r4, #0]
 800d874:	4832      	ldr	r0, [pc, #200]	@ (800d940 <_printf_i+0x238>)
 800d876:	2778      	movs	r7, #120	@ 0x78
 800d878:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d87c:	6823      	ldr	r3, [r4, #0]
 800d87e:	6831      	ldr	r1, [r6, #0]
 800d880:	061f      	lsls	r7, r3, #24
 800d882:	f851 5b04 	ldr.w	r5, [r1], #4
 800d886:	d402      	bmi.n	800d88e <_printf_i+0x186>
 800d888:	065f      	lsls	r7, r3, #25
 800d88a:	bf48      	it	mi
 800d88c:	b2ad      	uxthmi	r5, r5
 800d88e:	6031      	str	r1, [r6, #0]
 800d890:	07d9      	lsls	r1, r3, #31
 800d892:	bf44      	itt	mi
 800d894:	f043 0320 	orrmi.w	r3, r3, #32
 800d898:	6023      	strmi	r3, [r4, #0]
 800d89a:	b11d      	cbz	r5, 800d8a4 <_printf_i+0x19c>
 800d89c:	2310      	movs	r3, #16
 800d89e:	e7ad      	b.n	800d7fc <_printf_i+0xf4>
 800d8a0:	4826      	ldr	r0, [pc, #152]	@ (800d93c <_printf_i+0x234>)
 800d8a2:	e7e9      	b.n	800d878 <_printf_i+0x170>
 800d8a4:	6823      	ldr	r3, [r4, #0]
 800d8a6:	f023 0320 	bic.w	r3, r3, #32
 800d8aa:	6023      	str	r3, [r4, #0]
 800d8ac:	e7f6      	b.n	800d89c <_printf_i+0x194>
 800d8ae:	4616      	mov	r6, r2
 800d8b0:	e7bd      	b.n	800d82e <_printf_i+0x126>
 800d8b2:	6833      	ldr	r3, [r6, #0]
 800d8b4:	6825      	ldr	r5, [r4, #0]
 800d8b6:	6961      	ldr	r1, [r4, #20]
 800d8b8:	1d18      	adds	r0, r3, #4
 800d8ba:	6030      	str	r0, [r6, #0]
 800d8bc:	062e      	lsls	r6, r5, #24
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	d501      	bpl.n	800d8c6 <_printf_i+0x1be>
 800d8c2:	6019      	str	r1, [r3, #0]
 800d8c4:	e002      	b.n	800d8cc <_printf_i+0x1c4>
 800d8c6:	0668      	lsls	r0, r5, #25
 800d8c8:	d5fb      	bpl.n	800d8c2 <_printf_i+0x1ba>
 800d8ca:	8019      	strh	r1, [r3, #0]
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	6123      	str	r3, [r4, #16]
 800d8d0:	4616      	mov	r6, r2
 800d8d2:	e7bc      	b.n	800d84e <_printf_i+0x146>
 800d8d4:	6833      	ldr	r3, [r6, #0]
 800d8d6:	1d1a      	adds	r2, r3, #4
 800d8d8:	6032      	str	r2, [r6, #0]
 800d8da:	681e      	ldr	r6, [r3, #0]
 800d8dc:	6862      	ldr	r2, [r4, #4]
 800d8de:	2100      	movs	r1, #0
 800d8e0:	4630      	mov	r0, r6
 800d8e2:	f7f2 fc8d 	bl	8000200 <memchr>
 800d8e6:	b108      	cbz	r0, 800d8ec <_printf_i+0x1e4>
 800d8e8:	1b80      	subs	r0, r0, r6
 800d8ea:	6060      	str	r0, [r4, #4]
 800d8ec:	6863      	ldr	r3, [r4, #4]
 800d8ee:	6123      	str	r3, [r4, #16]
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d8f6:	e7aa      	b.n	800d84e <_printf_i+0x146>
 800d8f8:	6923      	ldr	r3, [r4, #16]
 800d8fa:	4632      	mov	r2, r6
 800d8fc:	4649      	mov	r1, r9
 800d8fe:	4640      	mov	r0, r8
 800d900:	47d0      	blx	sl
 800d902:	3001      	adds	r0, #1
 800d904:	d0ad      	beq.n	800d862 <_printf_i+0x15a>
 800d906:	6823      	ldr	r3, [r4, #0]
 800d908:	079b      	lsls	r3, r3, #30
 800d90a:	d413      	bmi.n	800d934 <_printf_i+0x22c>
 800d90c:	68e0      	ldr	r0, [r4, #12]
 800d90e:	9b03      	ldr	r3, [sp, #12]
 800d910:	4298      	cmp	r0, r3
 800d912:	bfb8      	it	lt
 800d914:	4618      	movlt	r0, r3
 800d916:	e7a6      	b.n	800d866 <_printf_i+0x15e>
 800d918:	2301      	movs	r3, #1
 800d91a:	4632      	mov	r2, r6
 800d91c:	4649      	mov	r1, r9
 800d91e:	4640      	mov	r0, r8
 800d920:	47d0      	blx	sl
 800d922:	3001      	adds	r0, #1
 800d924:	d09d      	beq.n	800d862 <_printf_i+0x15a>
 800d926:	3501      	adds	r5, #1
 800d928:	68e3      	ldr	r3, [r4, #12]
 800d92a:	9903      	ldr	r1, [sp, #12]
 800d92c:	1a5b      	subs	r3, r3, r1
 800d92e:	42ab      	cmp	r3, r5
 800d930:	dcf2      	bgt.n	800d918 <_printf_i+0x210>
 800d932:	e7eb      	b.n	800d90c <_printf_i+0x204>
 800d934:	2500      	movs	r5, #0
 800d936:	f104 0619 	add.w	r6, r4, #25
 800d93a:	e7f5      	b.n	800d928 <_printf_i+0x220>
 800d93c:	0800ddbd 	.word	0x0800ddbd
 800d940:	0800ddce 	.word	0x0800ddce

0800d944 <memmove>:
 800d944:	4288      	cmp	r0, r1
 800d946:	b510      	push	{r4, lr}
 800d948:	eb01 0402 	add.w	r4, r1, r2
 800d94c:	d902      	bls.n	800d954 <memmove+0x10>
 800d94e:	4284      	cmp	r4, r0
 800d950:	4623      	mov	r3, r4
 800d952:	d807      	bhi.n	800d964 <memmove+0x20>
 800d954:	1e43      	subs	r3, r0, #1
 800d956:	42a1      	cmp	r1, r4
 800d958:	d008      	beq.n	800d96c <memmove+0x28>
 800d95a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d95e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d962:	e7f8      	b.n	800d956 <memmove+0x12>
 800d964:	4402      	add	r2, r0
 800d966:	4601      	mov	r1, r0
 800d968:	428a      	cmp	r2, r1
 800d96a:	d100      	bne.n	800d96e <memmove+0x2a>
 800d96c:	bd10      	pop	{r4, pc}
 800d96e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d972:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d976:	e7f7      	b.n	800d968 <memmove+0x24>

0800d978 <_sbrk_r>:
 800d978:	b538      	push	{r3, r4, r5, lr}
 800d97a:	4d06      	ldr	r5, [pc, #24]	@ (800d994 <_sbrk_r+0x1c>)
 800d97c:	2300      	movs	r3, #0
 800d97e:	4604      	mov	r4, r0
 800d980:	4608      	mov	r0, r1
 800d982:	602b      	str	r3, [r5, #0]
 800d984:	f7f3 f998 	bl	8000cb8 <_sbrk>
 800d988:	1c43      	adds	r3, r0, #1
 800d98a:	d102      	bne.n	800d992 <_sbrk_r+0x1a>
 800d98c:	682b      	ldr	r3, [r5, #0]
 800d98e:	b103      	cbz	r3, 800d992 <_sbrk_r+0x1a>
 800d990:	6023      	str	r3, [r4, #0]
 800d992:	bd38      	pop	{r3, r4, r5, pc}
 800d994:	20001114 	.word	0x20001114

0800d998 <memcpy>:
 800d998:	440a      	add	r2, r1
 800d99a:	4291      	cmp	r1, r2
 800d99c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d9a0:	d100      	bne.n	800d9a4 <memcpy+0xc>
 800d9a2:	4770      	bx	lr
 800d9a4:	b510      	push	{r4, lr}
 800d9a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9ae:	4291      	cmp	r1, r2
 800d9b0:	d1f9      	bne.n	800d9a6 <memcpy+0xe>
 800d9b2:	bd10      	pop	{r4, pc}

0800d9b4 <_realloc_r>:
 800d9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9b8:	4607      	mov	r7, r0
 800d9ba:	4614      	mov	r4, r2
 800d9bc:	460d      	mov	r5, r1
 800d9be:	b921      	cbnz	r1, 800d9ca <_realloc_r+0x16>
 800d9c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9c4:	4611      	mov	r1, r2
 800d9c6:	f7ff bc4d 	b.w	800d264 <_malloc_r>
 800d9ca:	b92a      	cbnz	r2, 800d9d8 <_realloc_r+0x24>
 800d9cc:	f7ff fbde 	bl	800d18c <_free_r>
 800d9d0:	4625      	mov	r5, r4
 800d9d2:	4628      	mov	r0, r5
 800d9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9d8:	f000 f81a 	bl	800da10 <_malloc_usable_size_r>
 800d9dc:	4284      	cmp	r4, r0
 800d9de:	4606      	mov	r6, r0
 800d9e0:	d802      	bhi.n	800d9e8 <_realloc_r+0x34>
 800d9e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d9e6:	d8f4      	bhi.n	800d9d2 <_realloc_r+0x1e>
 800d9e8:	4621      	mov	r1, r4
 800d9ea:	4638      	mov	r0, r7
 800d9ec:	f7ff fc3a 	bl	800d264 <_malloc_r>
 800d9f0:	4680      	mov	r8, r0
 800d9f2:	b908      	cbnz	r0, 800d9f8 <_realloc_r+0x44>
 800d9f4:	4645      	mov	r5, r8
 800d9f6:	e7ec      	b.n	800d9d2 <_realloc_r+0x1e>
 800d9f8:	42b4      	cmp	r4, r6
 800d9fa:	4622      	mov	r2, r4
 800d9fc:	4629      	mov	r1, r5
 800d9fe:	bf28      	it	cs
 800da00:	4632      	movcs	r2, r6
 800da02:	f7ff ffc9 	bl	800d998 <memcpy>
 800da06:	4629      	mov	r1, r5
 800da08:	4638      	mov	r0, r7
 800da0a:	f7ff fbbf 	bl	800d18c <_free_r>
 800da0e:	e7f1      	b.n	800d9f4 <_realloc_r+0x40>

0800da10 <_malloc_usable_size_r>:
 800da10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da14:	1f18      	subs	r0, r3, #4
 800da16:	2b00      	cmp	r3, #0
 800da18:	bfbc      	itt	lt
 800da1a:	580b      	ldrlt	r3, [r1, r0]
 800da1c:	18c0      	addlt	r0, r0, r3
 800da1e:	4770      	bx	lr

0800da20 <_init>:
 800da20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da22:	bf00      	nop
 800da24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da26:	bc08      	pop	{r3}
 800da28:	469e      	mov	lr, r3
 800da2a:	4770      	bx	lr

0800da2c <_fini>:
 800da2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da2e:	bf00      	nop
 800da30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da32:	bc08      	pop	{r3}
 800da34:	469e      	mov	lr, r3
 800da36:	4770      	bx	lr
